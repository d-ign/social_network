{"version":3,"sources":["img/no_photo.png","redux/messages-reducer.js","utils/objects-helpers.js","redux/users-reducer.js","api/api.js","components/Profile/Wall/Post/Post.module.css","img/icons/logo.svg","components/Header/Header.jsx","redux/auth-reducer.js","components/Header/HeaderContainer.jsx","components/Navbar/Navbar.jsx","redux/profile-reducer.js","img/avatar_2.jpg","components/Profile/Wall/Post/Post.jsx","components/Profile/Wall/Wall.jsx","components/Profile/Wall/WallContainer.jsx","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/ProfileContainer.jsx","components/Login/Login.jsx","redux/app-reducer.js","redux/redux-store.js","components/hoc/withSuspense.js","App.js","reportWebVitals.js","index.js","img/preloader.svg","components/common/Preloader/Preloader.jsx","utils/validators/validators.js","components/Header/Header.module.css","components/Login/Login.module.css","components/Navbar/Navbar.module.css","components/common/FormsControls/FormsControls.js","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/Wall/Wall.module.css","components/common/FormsControls/FormsControls.module.css"],"names":["SEND_MESSAGE","initialState","dialogs","id","name","messages","message","sendMessage","newMessageBody","type","messagesReducer","state","action","updateObjectInArray","items","itemID","objPropName","newObjProps","map","u","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","followSuccess","userID","unfollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingProgress","getUsersThunk","page","dispatch","usersAPI","getUsers","then","data","totalCount","count","followUnfollowFlow","apiMethod","actionCreator","a","resultCode","follow","followUser","bind","unfollow","unfollowUser","usersReducer","followed","filter","instance","axios","withCredentials","baseURL","headers","get","response","post","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","savePhotoAPI","photoFile","formData","FormData","append","authAPI","me","login","email","password","rememberMe","logout","module","exports","Header","props","className","s","header","src","logo","alt","loginBlock","isAuth","login_name","onClick","logoutThunk","login_link","to","SET_USER_DATA","setAuthUserData","payload","getAuthUserData","authReducer","HeaderContainer","render","React","Component","connect","auth","Navbar","nav","activeClassName","active","ADD_POST","SET_USER","SET_STATUS","DELETE_POST","SAVE_PHOTO_SUCCESS","posts","likesCount","profile","setStatus","savePhotoSuccessAC","photos","profileReducer","newPost","newPostText","p","postID","photo","Post","pageWall__newPost","avatar","maxLength30","maxLengthCreator","Textarea","Element","PostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","validate","placeholder","Wall","postsElements","pageWall","pageWall__title","values","addPost","profilePage","ProfileStatus","editMode","activateEditMode","setState","deactivateEditMode","handleFocus","event","target","select","onStatusChange","e","currentTarget","value","prevProps","this","autoFocus","onFocus","onChange","onBlur","ProfileInfo","Preloader","pageInfo__data","dataRow","large","unknown","isOwner","files","length","savePhotoThunk","about","aboutMe","href","contacts","facebook","website","vk","twitter","instagram","youtube","github","ProfileContainer","userId","match","params","authorizedUserID","history","push","getUserProfile","refreshProfile","WallContainer","compose","withRouter","Input","LoginReduxForm","error","row","for","required","formError","loginThunk","stopSubmit","_error","INITIALIZED_SUCCESS","initialized","appReducer","reducers","combineReducers","messagesPage","usersPage","app","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","fallback","DialogsContainer","lazy","UsersContainer","App","initializeAppThunk","exact","from","path","AppContainer","Promise","all","SamuraiJSApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById","preloader","undefined","maxLength","input","meta","touched","showError","formControl"],"mappings":"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","file":"static/js/main.c526f23a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/no_photo.0ddfe4d4.png\";","// const UPDATE_NEW_MESSAGE_BODY = 'UPDATE-NEW-MESSAGE-BODY';\r\nconst SEND_MESSAGE = 'SEND-MESSAGE';\r\n\r\nlet initialState = {\r\n  dialogs: [\r\n    { id: '1', name: 'Denis' },\r\n    { id: '2', name: 'Andrey' },\r\n    { id: '3', name: 'Alexandr' },\r\n    { id: '4', name: 'Alisa' },\r\n  ],\r\n\r\n  messages: [\r\n    { id: '1', message: 'Hi!' },\r\n    { id: '2', message: 'lalalalalalala' },\r\n    { id: '3', message: 'How are you?' },\r\n  ],\r\n};\r\n\r\nconst messagesReducer = (state = initialState, action) => {\r\n\r\n  // копируем только то, что планируем изменять; внутренние объекты массива (с id которые) мы менять не планируем, поэтому их копию и не делаем\r\n  // stateCopy = 'копия state' или copy of state\r\n\r\n  switch (action.type) {\r\n    // case UPDATE_NEW_MESSAGE_BODY:\r\n    //   return {\r\n    //     ...state,\r\n    //     newMessageBody: action.body\r\n    //   };\r\n\r\n    case SEND_MESSAGE:\r\n      return {\r\n        ...state,\r\n        messages: [\r\n          ...state.messages, \r\n          { id: '6', \r\n          message: action.newMessageBody }\r\n        ],\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// updateNewMessageBody (читается: обновить ТЕЛО нового сообщения) то же самое, что и \"body of new message\"\r\n// больше его не надо, т.к. за состояние сообщения теперь отвечает библиотека redux-form\r\n// export const updateNewMessageBody = (symbol) => ({\r\n//   type: UPDATE_NEW_MESSAGE_BODY,\r\n//   body: symbol\r\n// });\r\nexport const sendMessage = (newMessageBody) => ({ type: SEND_MESSAGE, newMessageBody });\r\n\r\nexport default messagesReducer;","export const updateObjectInArray = (items, itemID, objPropName, newObjProps) => {\r\n  return items.map(u => {\r\n    if (u[objPropName] === itemID) {\r\n      return { ...u, ...newObjProps }\r\n    }\r\n    return u\r\n  })\r\n}","import { usersAPI } from '../api/api';\r\nimport { updateObjectInArray } from '../utils/objects-helpers';\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET-USERS';\r\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET-TOTAL-USERS-COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE-IS-FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE-IS-FOLLOWING-PROGRESS';\r\n\r\nlet initialState = {\r\n  users: [],\r\n  pageSize: 50,\r\n  totalUsersCount: 0,\r\n  currentPage: 1,\r\n  isFetching: true, // Preloader - крутилка во время ожидания ответа от сервера. is - это означает вопрос: получен? Вообще смотреть на последнее слово, оно ообозначает то, что находится в значении\r\n  followingInProgress: [], // disabled button после нажатия\r\n};\r\n\r\n// здесь в зависимости от type в action который к нас пришел мы возвращаем новый объект на основе старого state (копируем) и вносит свои изменения (перезаписываем одно из свойств)\r\nconst usersReducer = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case FOLLOW: {\r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(\r\n          state.users, action.userID, 'id', { followed: true }),\r\n        // users: state.users.map(u => {\r\n        //   if (u.id === action.userID) {\r\n        //     return { ...u, followed: true }\r\n        //   }\r\n        //   return u\r\n        // })\r\n      }\r\n    }\r\n    case UNFOLLOW: {\r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(\r\n          state.users, action.userID, 'id', { followed: false }),\r\n\r\n        // users: state.users.map(u => {\r\n        //   if (u.id === action.userID) {\r\n        //     return { ...u, followed: false }\r\n        //   }\r\n        //   return u\r\n        // })\r\n      }\r\n    }\r\n    case SET_USERS: {\r\n      return {\r\n        ...state,\r\n        users: action.users\r\n      }\r\n    }\r\n    case SET_CURRENT_PAGE: {\r\n      return {\r\n        ...state,\r\n        currentPage: action.currentPage,\r\n      }\r\n    }\r\n    case SET_TOTAL_USERS_COUNT: {\r\n      return {\r\n        ...state,\r\n        totalUsersCount: action.count,\r\n      }\r\n    }\r\n    case TOGGLE_IS_FETCHING: {\r\n      return {\r\n        ...state,\r\n        isFetching: action.isFetching,\r\n      }\r\n    }\r\n    case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n      return {\r\n        ...state,\r\n        // делаем блокировку только одной кнопки подписки пока идёт запрос и возвращается ответ с сервера, а не всех\r\n        followingInProgress: action.isFetching\r\n          ? [...state.followingInProgress, action.userID]\r\n          : state.followingInProgress.filter(id => id !== action.userID), // filter вернёт новый массив, поэтому копию не нужно делать\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// это action creators = call backs, которые dispatch-ит connect (сам за кадром) и они возвращают action (объекты), который сам redux берёт и отправляет в соответствующий reducer, и после определяется совпадающий case, делается копия state, они сравниваются и отличия перерисовывается (ререндериваються) - перерисовывается UI\r\nconst followSuccess = (userID) => ({ type: FOLLOW, userID });\r\nconst unfollowSuccess = (userID) => ({ type: UNFOLLOW, userID });\r\n\r\n// получить всех пользователей\r\nconst setUsers = (users) => ({ type: SET_USERS, users: users });\r\n// установить текущую страницу, на которую кликаем\r\nexport const setCurrentPage = (currentPage) => ({ type: SET_CURRENT_PAGE, currentPage: currentPage }); // или currentPage просто\r\n// установить общее кол-во пользователей\r\nconst setTotalUsersCount = (totalUsersCount) => ({ type: SET_TOTAL_USERS_COUNT, count: totalUsersCount });\r\nconst toggleIsFetching = (isFetching) => ({ type: TOGGLE_IS_FETCHING, isFetching });\r\nexport const toggleFollowingProgress = (isFetching, userID) => ({ type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userID });\r\n\r\n\r\n\r\n\r\n// создатель \"санки\"\r\nexport const getUsersThunk = (page, pageSize) => {\r\n  // возвращаем \"санку\", замкнув параметр выше\r\n  return (dispatch) => {\r\n    dispatch(toggleIsFetching(true));\r\n\r\n    usersAPI.getUsers(page, pageSize).then(data => {\r\n      dispatch(setUsers(data.items));\r\n      dispatch(setTotalUsersCount(data.totalCount));\r\n      dispatch(toggleIsFetching(false));\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst followUnfollowFlow = async (dispatch, id, apiMethod, actionCreator) => {\r\n  dispatch(toggleFollowingProgress(true, id));\r\n\r\n  const response = await apiMethod(id);\r\n  if (response.data.resultCode === 0) {\r\n    dispatch(actionCreator(id))\r\n  }\r\n\r\n  dispatch(toggleFollowingProgress(false, id));\r\n}\r\n\r\nexport const follow = (id) => {\r\n  return async (dispatch) => {\r\n    followUnfollowFlow(dispatch, id, \r\n      usersAPI.followUser.bind(usersAPI), followSuccess)\r\n  }\r\n}\r\n\r\nexport const unfollow = (id) => {\r\n  return async (dispatch) => {\r\n    followUnfollowFlow(dispatch, id, \r\n      usersAPI.unfollowUser.bind(usersAPI), unfollowSuccess)\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default usersReducer;","// Слой (Layer) доступа к данным (Data Access Layer — DAL), он занимается типом запроса, url и такое всё - это его ответсвенность. Находится между BLL и сервером. UI общается только с BLL, BLL с DAL, DAL с сервером\r\nimport * as axios from 'axios';\r\n\r\n\r\n// создание отдельного экземпляра axios для работы с конкретной айпишкой, конкретной версией, на разных серверах + уход от повторения некоторых данных\r\nconst instance = axios.create({\r\n  withCredentials: true, // цепляем куку при запросе с локального хоста на домен соц. сети, чтобы сказать, что мы это мы, что мы зарегались уже на домене соц. сети, пустите нас :)\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n  headers: {\r\n    'API-KEY': '9fe42175-1733-4793-9c3f-72022637a8a0' // ключ доступа нужен всем запросам кроме get\r\n  }\r\n});\r\n\r\n\r\n\r\n\r\nexport const usersAPI = {\r\n  getUsers(currentPage = 1, pageSize = 10) {\r\n    return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n      .then(response => response.data)\r\n  },\r\n\r\n  followUser(id) {\r\n    return instance.post(`follow/${id}`, {})\r\n  },\r\n\r\n  unfollowUser(id) {\r\n    return instance.delete(`follow/${id}`)\r\n  },\r\n\r\n  getProfile(id) {\r\n    console.warn('Obsolete method. Please, use profileAPI object.')\r\n    return profileAPI.getProfile(id)\r\n  },\r\n};\r\n\r\n\r\n\r\n\r\nexport const profileAPI = {\r\n  getProfile(id) {\r\n    return instance.get(`profile/${id}`)\r\n  },\r\n  getStatus(id) {\r\n    return instance.get(`profile/status/${id}`)\r\n  },\r\n  updateStatus(status) {\r\n    return instance.put(`profile/status`, { status: status })\r\n  },\r\n  savePhotoAPI(photoFile) {\r\n    const formData = new FormData();\r\n    formData.append('image', photoFile);\r\n    \r\n    return instance.put(`profile/photo`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    })\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\nexport const authAPI = {\r\n  me() {\r\n    return instance.get(`auth/me`)\r\n  },\r\n  login(email, password, rememberMe = false) {\r\n    return instance.post('/auth/login', { email, password, rememberMe })\r\n  },\r\n  logout() {\r\n    return instance.delete('/auth/login')\r\n  }\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageWall__newPost\":\"Post_pageWall__newPost__3K832\"};","export default __webpack_public_path__ + \"static/media/logo.cebb0f3e.svg\";","import React from 'react';\r\nimport logo from '../../img/icons/logo.svg';\r\nimport s from './Header.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Header = (props) => {\r\n\r\n  return (\r\n    <header className={s.header}>\r\n      <img src={logo} alt='logo' />\r\n      <div className={s.loginBlock}>\r\n        {props.isAuth\r\n          ? <>\r\n            <span className={s.login_name}>{props.login}</span>\r\n            <button className={s.logout} onClick={props.logoutThunk}>Выйти</button>\r\n          </>\r\n          : <NavLink className={s.login_link} to={'/login'}>Login</NavLink>}\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;","import { authAPI } from '../api/api';\r\nimport { stopSubmit } from 'redux-form';\r\n\r\nconst SET_USER_DATA = 'auth/SET-USER-DATA';\r\n\r\nlet initialState = {\r\n  userID: null,\r\n  email: null,\r\n  login: null,\r\n  isAuth: false,\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case SET_USER_DATA: {\r\n      return {\r\n        ...state,\r\n        ...action.payload, // перезатрёт данные в state\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// это action creators\r\nconst setAuthUserData = (userID, email, login, isAuth) => ({\r\n  type: SET_USER_DATA,\r\n  payload: { userID, email, login, isAuth }\r\n});\r\n\r\n// это thunks\r\nexport const getAuthUserData = () => async (dispatch) => {\r\n  // return выкинет промис после then наружу в initializeAppThunk\r\n  let response = await authAPI.me();\r\n  \r\n  if (response.data.resultCode === 0) {\r\n    let { id, email, login } = response.data.data;\r\n    // диспатчим тогда наши авторизационные данные\r\n    dispatch(setAuthUserData(id, email, login, true))\r\n  }\r\n}\r\n\r\n\r\nexport const loginThunk = (email, password, rememberMe) => (dispatch) => {\r\n  authAPI.login(email, password, rememberMe)\r\n    .then(response => {\r\n      if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData())\r\n      } else {\r\n        let message = response.data.messages;\r\n        let action = stopSubmit(\r\n          'loginForm',\r\n          { _error: message.length > 0 ? message[0] : 'Some error' }); // stopSubmit - функция от redux-form, loginForm - имя формы из Login, Some error - на всякий случай, если с сервера придёт путое сообщение при ошибке\r\n        dispatch(action);\r\n      }\r\n    })\r\n}\r\n\r\n\r\nexport const logoutThunk = () => (dispatch) => {\r\n  authAPI.logout()\r\n    .then(response => {\r\n      if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false))\r\n      }\r\n    })\r\n}\r\n\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport Header from './Header';\r\nimport { connect } from 'react-redux';\r\nimport { logoutThunk } from '../../redux/auth-reducer';\r\n\r\nclass HeaderContainer extends React.Component {\r\n  render = () => <Header {...this.props} />\r\n}\r\n\r\n// это то, что придёт в контейнерную компоненту HeaderContainer, она прокинет через пропсы в функциональную компоненту Header, которая достанет их из пропсов и использует как-то\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n  }\r\n};\r\nexport default connect(mapStateToProps, {\r\n  logoutThunk\r\n})(HeaderContainer);","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Navbar.module.css';\r\n\r\nconst Navbar = () => {\r\n  return(\r\n    <nav className={s.nav}>\r\n      <NavLink to=\"/profile\" activeClassName={s.active}>Profile</NavLink>\r\n      <NavLink to=\"/dialogs\" activeClassName={s.active}>Messages</NavLink>\r\n      <NavLink to=\"/users\" activeClassName={s.active}>Find Users</NavLink>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar;","import { usersAPI, profileAPI } from '../api/api';\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst SET_USER = 'SET-USER';\r\nconst SET_STATUS = 'SET-STATUS';\r\nconst DELETE_POST = 'DELETE-POST';\r\nconst SAVE_PHOTO_SUCCESS = 'SAVE_PHOTO_SUCCESS';\r\n\r\n// если state не придёт в reducer, то initialState будет этим начальным state (как параметр по умолчанию у функции func(a=initialState, b))\r\nlet initialState = {\r\n  posts: [\r\n    { id: '1', message: 'Стена Привет!', likesCount: 12 },\r\n    { id: '2', message: 'Стена Как дела?', likesCount: 4 },\r\n  ],\r\n\r\n  profile: null,\r\n  status: '',\r\n};\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n\r\n    case ADD_POST: {\r\n      let newPost = {\r\n        id: 5,\r\n        message: action.newPostText,\r\n        likesCount: 0,\r\n      };\r\n      return {\r\n        ...state,\r\n        posts: [\r\n          ...state.posts,\r\n          newPost\r\n        ],\r\n      }\r\n    }\r\n\r\n    case SET_USER: {\r\n      return {\r\n        ...state,\r\n        profile: action.profile\r\n      }\r\n    }\r\n\r\n    case SET_STATUS: {\r\n      return {\r\n        ...state,\r\n        status: action.status\r\n      }\r\n    }\r\n\r\n    case DELETE_POST: {\r\n      return {\r\n        ...state,\r\n        posts: state.posts.filter(p => p.id !== action.postID)\r\n      }\r\n    } \r\n\r\n    case SAVE_PHOTO_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        profile: {...state.profile, photo: action.photo}\r\n      }\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n\r\n// action creator\r\nexport const addPost = (newPostText) => ({ type: ADD_POST, newPostText });\r\nexport const deletePost = (postID) => ({ type: DELETE_POST, postID });\r\n\r\nconst setUserProfile = (profile) => ({ type: SET_USER, profile });\r\nconst setStatus = (status) => ({ type: SET_STATUS, status });\r\nconst savePhotoSuccessAC = (photos) => ({type: SAVE_PHOTO_SUCCESS, photos});\r\n\r\n// thunk\r\nexport const getUserProfile = (userId) => {\r\n  return (dispatch) => {\r\n    usersAPI.getProfile(userId)\r\n      .then(response => {\r\n        dispatch(setUserProfile(response.data));\r\n      });\r\n  }\r\n};\r\n\r\nexport const getStatus = (id) => { // получить текущий статус\r\n  return (dispatch) => {\r\n    profileAPI.getStatus(id)\r\n      .then(response => {\r\n        dispatch(setStatus(response.data));\r\n      });\r\n  }\r\n};\r\n\r\nexport const updateStatus = (status) => { // обновить статус на новый\r\n  return (dispatch) => {\r\n    profileAPI.updateStatus(status)\r\n      .then(response => {\r\n        if(response.data.resultCode === 0) {\r\n          dispatch(setStatus(status));\r\n        }\r\n      });\r\n  }\r\n};\r\n\r\nexport const savePhotoThunk = (photos) => async (dispatch) => {\r\n  let response = await profileAPI.savePhotoAPI(photos);\r\n  if (response.data.resultCode === 0) {\r\n    dispatch(savePhotoSuccessAC(response.data.data.photos));\r\n  }\r\n};\r\n\r\nexport default profileReducer;","export default __webpack_public_path__ + \"static/media/avatar_2.e0878a2c.jpg\";","import React from 'react';\r\nimport s from './Post.module.css';\r\nimport avatar from '../../../../img/avatar_2.jpg';\r\n\r\nconst Post = (props) => {\r\n  return(\r\n\r\n    <div className={s.pageWall__newPost}>\r\n      <img src={avatar} alt=\"avatar\"/>\r\n      {props.message}\r\n      {props.likesCount} <button>like</button>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport Post from './Post/Post';\r\nimport s from './Wall.module.css';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator } from '../../../utils/validators/validators';\r\nimport { Element } from '../../common/FormsControls/FormsControls';\r\n\r\nconst Wall = (props) => {\r\n\r\n  let postsElements = props.posts.map(p =>\r\n    <Post key={p.id} message={p.message} likesCount={p.likesCount} />);\r\n\r\n  let handleAddPost = (values) => {\r\n    // values - введённые данные в форме (name='newPostText' см. у Field)\r\n    props.addPost(values.newPostText);\r\n  }\r\n\r\n  return (\r\n    <div className={s.pageWall}>\r\n      <span className={s.pageWall__title}>Стена</span>\r\n      <PostReduxForm onSubmit={handleAddPost} />\r\n      {postsElements}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nconst maxLength30 = maxLengthCreator(30);\r\nconst Textarea = Element(\"textarea\");\r\n\r\nconst AddNewPostForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field\r\n        name='newPostText'\r\n        component={Textarea}\r\n        validate={[maxLength30]}\r\n        placeholder='Write post...'\r\n      />\r\n      <button>Добавить пост</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst PostReduxForm = reduxForm({ form: 'profileNewPostForm' })(AddNewPostForm);\r\n\r\nexport default Wall;","import { connect } from 'react-redux';\r\nimport { addPost } from '../../../redux/profile-reducer';\r\nimport Wall from './Wall';\r\n\r\n// class WallContainer extends React.Component {\r\n\r\n  // componentDidMount() {\r\n    // this.props.getUsersThunkCreator(this.props.currentPage, this.props.pageSize);\r\n  // }\r\n\r\n  // пишем через стрелочную функцию, чтобы сохранить контекст вызова, чтобы не использовать bind\r\n  // onPageChanged = (pageNumber) => {\r\n  //   this.props.getUsersThunkCreator(pageNumber, this.props.pageSize);\r\n  //   this.props.setCurrentPage(pageNumber);\r\n  // }\r\n\r\n//   render() {\r\n//     return <>\r\n//       {this.props.isFetching ? <Preloader /> : null}\r\n\r\n//       <Wall\r\n//         totalUsersCount={this.props.totalUsersCount}\r\n//         pageSize={this.props.pageSize}\r\n//         currentPage={this.props.currentPage}\r\n//         onPageChanged={this.onPageChanged}\r\n//         users={this.props.users}\r\n\r\n//         follow={this.props.follow}\r\n//         unfollow={this.props.unfollow}\r\n//         followingInProgress={this.props.followingInProgress}\r\n//       />\r\n//     </>\r\n//   }\r\n// }\r\n\r\n\r\n// эта функция запускается при каждом изменнеии, создается новый объект и затем сравнивается со старым объектом. если бы мы не делали копию объекта в reducer, то ничего бы не перерисовывалось\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n  }\r\n};\r\n\r\n// перерисовка происходит после обнаружения, что появился новый объект. А он создастся после изменений, т.к. мы придерживаемся иммутабельности и старые объекты не меняем\r\nexport default connect(mapStateToProps, {\r\n  addPost\r\n})(Wall);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ProfileStatus extends React.Component {\r\n\r\n  state = {\r\n    // режима редактирования статуса по умолчанию выключен\r\n    editMode: false,\r\n    status: this.props.status\r\n  }\r\n\r\n  activateEditMode = () => {\r\n    this.setState({\r\n      editMode: true // меняем span на input\r\n    })\r\n\r\n    // this.state.editMode = true +\r\n    // this.forceUpdate() - хак, который перерисует UI, но лучше его избегать\r\n  }\r\n\r\n  deactivateEditMode = () => {\r\n    this.setState({\r\n      editMode: false\r\n    })\r\n    this.props.updateStatus(this.state.status); // синхронизация локального состояния с \"глобальным\" (на сервере)\r\n  }\r\n\r\n  handleFocus = (event) => {\r\n    event.target.select(); // выделяем весь текст при входе в \"режим редактирования\"\r\n  }\r\n\r\n  onStatusChange = (e) => {\r\n    this.setState({ status: e.currentTarget.value }) // меняем локальное состояние\r\n    // this.setState({ status: e.target.value })\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.status !== this.props.status) { // если предыдущий статус (локальный, он равен изначально '' из profileReducerr) !== статусу из пропсов\r\n      this.setState({\r\n        status: this.props.status // то обновить его\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {\r\n          this.state.editMode\r\n            ? <input\r\n              autoFocus\r\n              onFocus={this.handleFocus}\r\n\r\n              onChange={this.onStatusChange}\r\n              onBlur={this.deactivateEditMode}\r\n              \r\n              value={this.state.status} />\r\n            : <span\r\n              onClick={this.activateEditMode}>{this.props.status}</span> // в this.props.status увидим после редактирования статуса с задержкой новый статус, когда он обновится на сервере\r\n        }\r\n      </>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nProfileStatus.propTypes = {\r\n  updateStatus: PropTypes.func.isRequired, // isReauired = функция необходима для работы данного компонента; если не будет передан, то выйдет предупреждение\r\n  // test: PropTypes.arrayOf(PropTypes.object) --> массив из объектов (см. все варианты в файле)\r\n}\r\n\r\nexport default ProfileStatus;","import React from 'react';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport ProfileStatusWithHooks from './ProfileStatus';\r\nimport s from './ProfileInfo.module.css';\r\nimport unknown from '../../../img/no_photo.png';\r\n\r\nconst ProfileInfo = (props) => {\r\n  if (!props.profile) {\r\n    return <Preloader />\r\n  }\r\n\r\n  const onMainPhotoSelected = (e) => {\r\n    if(e.target.files.length) {\r\n      props.savePhotoThunk(e.target.files[0])\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={`${s.pageInfo__data} ${s.dataRow}`}>\r\n      <img src={props.profile.photos.large || unknown} alt=\"avatar\" />\r\n      {props.isOwner && <input onChange={onMainPhotoSelected} type='file'/>}\r\n\r\n      <ProfileStatusWithHooks\r\n        status={props.status}\r\n        updateStatus={props.updateStatus} />\r\n\r\n      <div className={s.about}>\r\n        <p>{props.profile.aboutMe}</p>\r\n        <a href={props.profile.contacts.facebook}>facebook</a>\r\n        <a href={props.profile.contacts.website}>website</a>\r\n        <a href={props.profile.contacts.vk}>vk</a>\r\n        <a href={props.profile.contacts.twitter}>twitter</a>\r\n        <a href={props.profile.contacts.instagram}>instagram</a>\r\n        <a href={props.profile.contacts.youtube}>youtube</a>\r\n        <a href={props.profile.contacts.github}>github</a>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport { getUserProfile, getStatus, updateStatus, savePhotoThunk } from '../../redux/profile-reducer';\r\nimport WallContainer from './Wall/WallContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router';\r\n// import withAuthRedirect from '../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\nclass ProfileContainer extends React.Component {\r\n  refreshProfile() {\r\n    // параметр usetId обозначили в App, работает благодаря withRouter\r\n    let userId = this.props.match.params.userId;\r\n    \r\n    if (!userId) {\r\n      userId = this.props.authorizedUserID;\r\n      if (!userId) {\r\n        this.props.history.push('/login')\r\n      }\r\n    }\r\n\r\n    this.props.getUserProfile(userId);\r\n    this.props.getStatus(userId); // (1) получаем статус с сервера при первичной отрисовке, getStatus взят из контекста. Затем перекидываем статус через пропсы (см. (2))\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile()\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    if(this.props.match.params.userId !== prevProps.match.params.userId) {\r\n      this.refreshProfile()\r\n      // т.е. перерисовывать только когда переходишь с одной страницы на другую\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <>\r\n      <ProfileInfo\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus} \r\n        isOwner={!this.props.match.params.userId} // если есть id, значит я на чужой странице и значит я не хозяин\r\n        savePhotoThunk={this.props.savePhotoThunk}\r\n        />\r\n      <WallContainer />\r\n    </>\r\n  }\r\n}\r\n\r\n\r\n// пропсы для Profile\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status, // (2) - берём из контекста данные\r\n    authorizedUserID: state.auth.userID,\r\n    isAuth: state.auth.isAuth,\r\n  }\r\n};\r\n\r\n// это HOC, снабжающий редиректом ProfileContainer, т.е. при отсутсвии регистрации у пользователя его будет кидать на страницу login\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer);\r\n// withRouter работает также как и connact - возвращает компоненту, но withRouter прикрутит еще данные из URL\r\n// export default connect(mapStateToProps, {\r\n//   getUserProfile\r\n// })(withRouter(AuthRedirectComponent));\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, { // (3) - берём из импорта функции thunk-и\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    savePhotoThunk,\r\n  }),\r\n  withRouter,\r\n  // withAuthRedirect\r\n)(ProfileContainer)","import React from 'react';\r\nimport s from './Login.module.css'\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Element } from '../common/FormsControls/FormsControls';\r\nimport { maxLengthCreator, required } from '../../utils/validators/validators';\r\nimport { connect } from 'react-redux';\r\nimport { loginThunk, logoutThunk } from '../../redux/auth-reducer';\r\nimport { Redirect } from 'react-router';\r\n\r\nconst Login = (props) => {\r\n\r\n  const onSubmit = (formData) => {\r\n    props.loginThunk(formData.email, formData.password, formData.rememberMe)\r\n  }\r\n\r\n  if (props.isAuth) {\r\n    return <Redirect to={`/profile/${props.id}`} />\r\n  }\r\n\r\n  return <>\r\n    <h1>Авторизация</h1>\r\n    <LoginReduxForm onSubmit={onSubmit} logoutThunk={logoutThunk}/>\r\n  </>\r\n}\r\n\r\nconst maxLength30 = maxLengthCreator(30);\r\nconst Input = Element(\"input\");\r\n\r\n// Field передаст через пропсы в input атрибуты\r\nconst LoginForm = ({ handleSubmit, error }) => {\r\n  return <>\r\n    <form onSubmit={handleSubmit}>\r\n      <div className=\"form\">\r\n        <div className={s.row}>\r\n          <label for='email'>Логин</label>\r\n          <Field\r\n            id='email'\r\n            type=\"email\"\r\n            name='email'\r\n            component={Input}\r\n            validate={[required, maxLength30]} />\r\n        </div>\r\n        <div className={s.row}>\r\n          <label for='password'>Пароль</label>\r\n          <Field\r\n            id='password'\r\n            type=\"password\"\r\n            name='password'\r\n            component={Input}\r\n            validate={[required, maxLength30]} />\r\n        </div>\r\n        <div className={s.row}>\r\n          <label for='save'>\r\n            <Field\r\n              id='save'\r\n              type=\"checkbox\"\r\n              name='rememberMe'\r\n              component={Input}\r\n              validate={[]} />\r\n            Запомнить меня\r\n          </label>\r\n        </div>\r\n        <div className={s.row}>\r\n          <button>Войти</button>\r\n          {error && <span className={s.formError}>{error}</span>}\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </>\r\n}\r\n\r\n\r\nconst LoginReduxForm = reduxForm({\r\n  form: 'loginForm' // form никак не связан с form в redux-store\r\n})(LoginForm);\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n  id: state.auth.id,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  loginThunk,\r\n  logoutThunk\r\n})(Login);","import { getAuthUserData } from './auth-reducer';\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\r\n\r\nlet initialState = {\r\n  initialized: false\r\n};\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case INITIALIZED_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        initialized: true\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// это action creators\r\nconst initializedSuccess = () => ({ type: INITIALIZED_SUCCESS });\r\n\r\n// это thunks\r\nexport const initializeAppThunk = () => (dispatch) => {\r\n  // когда все асинх запросы выполняться, задиспатчить initializedSuccess\r\n  Promise.all([\r\n    dispatch(getAuthUserData()),\r\n    // ...\r\n  ]).then(() => {\r\n    dispatch(initializedSuccess())\r\n  })\r\n}\r\n\r\n\r\nexport default appReducer;","import {applyMiddleware, combineReducers, createStore, compose} from 'redux';\r\nimport authReducer from './auth-reducer';\r\nimport messagesReducer from './messages-reducer';\r\nimport profileReducer from './profile-reducer';\r\nimport usersReducer from './users-reducer';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport appReducer from './app-reducer';\r\n\r\n// по сути это сейчас наш state, store. getState, dispatch и subscribe встроены в Redux и называются точно также, поэтому переписывать ничего не надо в index.js и далее\r\nlet reducers = combineReducers({\r\n  profilePage: profileReducer,\r\n  messagesPage: messagesReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  app: appReducer,\r\n  form: formReducer,\r\n});\r\n\r\n// создание store и передача в него reducers\r\n// let store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\n// подключение расширения от браузера гугл Redux devtools\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n// window.store = store;\r\n\r\nexport default store;","import React, { Suspense } from 'react';\r\nimport Preloader from '../common/Preloader/Preloader';\r\n\r\nexport const withSuspense = (Component) => {\r\n  return (props) => {\r\n    return <Suspense fallback={<Preloader />}>\r\n      <Component {...props} />\r\n    </Suspense>\r\n  }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport { Route, withRouter, Switch, Redirect } from 'react-router-dom';\r\nimport ProfileContainer from './components/Profile/ProfileContainer';\r\nimport Login from './components/Login/Login';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { initializeAppThunk } from './redux/app-reducer';\r\nimport Preloader from './components/common/Preloader/Preloader';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport store from './redux/redux-store';\r\nimport { withSuspense } from './components/hoc/withSuspense';\r\n\r\n// import DialogsContainer from './components/Dialogs/DialogsContainer';\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer')); // в конечный bundle эта компонента не попадёт, а подгрузится, если будет надо, при переходе на диалоги\r\n// import UsersContainer from './components/Users/UsersContainer';\r\nconst UsersContainer = React.lazy(() => import('./components/Users/UsersContainer'));\r\n// увеличиваем скорость стартовой загрузки и замедляем затем использование\r\n\r\nclass App extends React.Component {\r\n  componentDidMount() {\r\n    this.props.initializeAppThunk();\r\n  }\r\n  // (2)\r\n\r\n  render() {\r\n    // сначала сработает Preloader, даст время проининциализироваться initializeAppThunk (см. componentDidMount), затем пойдем в JSX\r\n    // (1)\r\n    if (!this.props.initialized) {\r\n      return <Preloader />\r\n    }\r\n\r\n    // (3)\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"app-wrapper\">\r\n          <HeaderContainer />\r\n          <Navbar />\r\n          <div className='app-wrapper-content'>\r\n            <Switch>\r\n\r\n              {/* редирект подставляет в урл свою часть (т.е. перенаправялет на нужную страницу), а роут с таким-то адресом отрисовывает ту компоненту, которая указана в render */}\r\n\r\n              {/* <Route path='/' exact\r\n                     render={() => <ProfileContainer />} /> */}\r\n              <Redirect exact from=\"/\" to=\"/profile\" />\r\n\r\n              <Route path='/dialogs'\r\n                render={withSuspense(DialogsContainer)} />\r\n\r\n                  {/* // return <Suspense fallback={<div>Загрузка...</div>}>\r\n                  //   <DialogsContainer />\r\n                  // </Suspense> */}\r\n                \r\n\r\n              {/* userId - параметр, мы можем его достать благодаря import { withRouter } from 'react-router'; в контейнерной компоненте ProfileContainer, ? - значит что параметр необязательный; текущий URL - это второй источник истины после store*/}\r\n\r\n              <Route path='/profile/:userId?'\r\n                render={() => <ProfileContainer />} />\r\n\r\n              <Route path='/users'\r\n                render={withSuspense(UsersContainer)} />\r\n\r\n              {/* <Route path='/users'\r\n                render={() => {\r\n                  return <Suspense fallback={<div>Загрузка...</div>}>\r\n                    <UsersContainer />\r\n                  </Suspense>\r\n                }} /> */}\r\n\r\n              <Route path='/login'\r\n                render={() => <Login login={this.props.login} />} />\r\n\r\n              {/* <Route exact path='/login' render={() => <Login login={this.props.login} />} /> */}\r\n              {/* exact означает что урл должен быть точь в точь такой, как указан. Если после login что-то еще будет, то Route не сработает. Без exact будет срабатывать и при урл login и при login/что-то еще */}\r\n              {/* или можно Route в Switch: <Switch> <Route ... </Switch>. Он как только находит нужный url просто дальше (ниже) не проверяет и выводит первое, что нашёл */}\r\n\r\n              {/* <Route patch='*' \r\n                     render={() => <div> 404 </div>} /> */}\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  initialized: state.app.initialized,\r\n});\r\n\r\n// compose - функция, которая одним за одним выполняет HOC, оборачивая всё больше и больше нашу презентационную компоненту, наделяя её какой-то функциональностью, данными\r\nlet AppContainer = compose(\r\n  withRouter, // берем инфу из урла\r\n  connect(mapStateToProps, {\r\n    initializeAppThunk\r\n  })\r\n)(App)\r\n\r\nlet SamuraiJSApp = (props) => {\r\n  // провайдер создает контекст; компонента может брать инфу из пропсов, своего состояния и контекста\r\n  // HashRouter добавляет # в url перед путём. Сервер отбрасывает всё, что после #. Для данного случая это то, что надо. Но вообще HashRouter при использовании полноценных серверов (не github) не нужен и бесполезен.\r\n  return (\r\n    <HashRouter>\r\n      <Provider store={store}>\r\n        <AppContainer />\r\n      </Provider>\r\n    </HashRouter>\r\n  )\r\n}\r\n\r\nexport default SamuraiJSApp;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom'; // вместо ReactDOM можно использовать React Native и превратить реакт-компоненты и js в java-код для андроида и айфона\r\nimport SamuraiJSApp from './App';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\n// убрали rerenderEntireTree потому что у функции connect усть внутренний свой subscribe\r\n// let rerenderEntireTree = (state) => {\r\n\r\n// Provider - компонента из библиотеки react-redux, использующая context API\r\n// <React.StrictMode> здесь был Provider и App</React.StrictMode> - убрал, т.к. на странице users два раза отрисовывал пользователей (вместо 2х - четыре), сделал на 49-ом уроке\r\nReactDOM.render(<SamuraiJSApp />, document.getElementById('root'));\r\n\r\n// первичная отрисовка страницы\r\n// rerenderEntireTree(store.getState());\r\n\r\n// передали rerenderEntireTree функции в state.js, т.е. создаём callback\r\n// redux при вызове reduсers не передаёт им обновлённый state, поэтому store.subscribe(rerenderEntireTree); заменяем на:\r\n// store.subscribe(() => {\r\n//   let state = store.getState();\r\n//   rerenderEntireTree(state);\r\n// });\r\n\r\nreportWebVitals();","export default __webpack_public_path__ + \"static/media/preloader.4ae1bcf5.svg\";","import React from 'react';\r\nimport preloader from '../../../img/preloader.svg';\r\n\r\nconst Preloader = () => {\r\n  return (\r\n    <img src={preloader} alt='preloader'/>\r\n  )\r\n};\r\n\r\nexport default Preloader;","export const required = value => {\r\n  return value ? undefined : 'Field required'\r\n}\r\n\r\nexport const maxLengthCreator = maxLength => value => {\r\n  return (value && value.length > maxLength) ? `Max length is ${maxLength} symbols` : undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3vTSi\",\"loginBlock\":\"Header_loginBlock__6uxXp\",\"login_name\":\"Header_login_name__wMDmp\",\"logout\":\"Header_logout__1ZICm\",\"login_link\":\"Header_login_link__27bgb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Login_form__2iBfo\",\"row\":\"Login_row__3d41Y\",\"formError\":\"Login_formError__3j1Nj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3R0rh\",\"active\":\"Navbar_active__2b-XZ\"};","import React from 'react';\r\nimport s from './FormsControls.module.css'\r\n\r\nexport const Element = Element => ({ input, meta: { touched, error }, ...props }) => {\r\n  const showError = touched && error;\r\n  return (\r\n    <div className={s.formControl + \" \" + (showError ? s.error : \"\")}>\r\n      <Element {...input} {...props} />\r\n      { showError && <span>{error}</span> }\r\n    </div>\r\n  )\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageInfo__data\":\"ProfileInfo_pageInfo__data__1OoU4\",\"about\":\"ProfileInfo_about__3U-jH\",\"dataRow\":\"ProfileInfo_dataRow__UsqXF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageWall\":\"Wall_pageWall__1-MWp\",\"pageWall__title\":\"Wall_pageWall__title__2QIQW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3IH-n\",\"error\":\"FormsControls_error__3Y1wO\"};"],"sourceRoot":""}