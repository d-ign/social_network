{"version":3,"sources":["components/Chat/Chat.module.css","redux/selectors/chat-selectors.ts","components/Chat/Chat.tsx"],"names":["module","exports","getMessages","state","chat","messages","getChatMembers","filter","value","index","array","findIndex","item","userId","getStatus","status","Members","chatMembers","useSelector","useState","isShowAll","setIsShowAll","isReverseSort","setIsReverseSort","itemsCount","length","isShowMembers","setIsShowMembers","className","cn","s","membersContainer","membersContainerHidden","titleMembersWrap","titleMembersWrapDeployed","buttonSortWrapHiddenNotShowAll","onClick","titleMembers","titleMembersArrow","path","mdiChevronDown","title","size","buttonSortWrap","buttonSortMedia","buttonSortNotShowMembers","buttonSortNotShowAll","Button","startIcon","style","fontSize","marginBottom","padding","chatMembersMedia","chatMembersNotShowMembers","slice","sort","a","b","userName","localeCompare","map","u","member","to","Avatar","photo","name","nameMember","showAllWrap","showAll","Messages","messagesAnchorRef","useRef","isAutoScroll","setIsAutoScroll","useEffect","current","scrollIntoView","behavior","allMessages","allMessagesAbsent","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","m","message","trim","Message","id","noMessages","ref","React","memo","myID","getAuthorizedUserID","messageContainer","myMessageContainer","avatarMedium","avatarSmall","nameAndMessage","AddMessageForm","setMessage","dispatch","useDispatch","wrapForm","form","TextField","placeholder","multiline","fullWidth","rowsMax","variant","inputProps","maxLength","onChange","IconButton","aria-label","color","margin","sendMessage","disabled","Chat","startMessagesListening","stopMessagesListening","membersAndMessages"],"mappings":"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","file":"static/js/5.81b614ef.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"allMessages\":\"Chat_allMessages__3upJk\",\"membersAndMessages\":\"Chat_membersAndMessages__QYSIC\",\"titleMembersWrap\":\"Chat_titleMembersWrap__21BfD\",\"buttonSortWrap\":\"Chat_buttonSortWrap__1eMVl\",\"membersContainer\":\"Chat_membersContainer__1T8z_\",\"titleMembers\":\"Chat_titleMembers__ZXOJR\",\"titleMembersArrow\":\"Chat_titleMembersArrow__8wlKQ\",\"member\":\"Chat_member__19AK-\",\"showAllWrap\":\"Chat_showAllWrap__3_abN\",\"showAll\":\"Chat_showAll__1yp8e\",\"membersContainerHidden\":\"Chat_membersContainerHidden__1kSs4\",\"allMessagesAbsent\":\"Chat_allMessagesAbsent__2u7bW\",\"noMessages\":\"Chat_noMessages__1TXOR\",\"messageContainer\":\"Chat_messageContainer__h8lg9\",\"myMessageContainer\":\"Chat_myMessageContainer__3lNbN\",\"name\":\"Chat_name__3z4wa\",\"nameMember\":\"Chat_nameMember__27PzK\",\"message\":\"Chat_message__1UPOG\",\"avatarSmall\":\"Chat_avatarSmall__1bEVh\",\"nameAndMessage\":\"Chat_nameAndMessage__19MYP\",\"form\":\"Chat_form__2pzA5\",\"buttonSortNotShowMembers\":\"Chat_buttonSortNotShowMembers__32xXM\",\"chatMembersNotShowMembers\":\"Chat_chatMembersNotShowMembers__20aDH\",\"buttonSortMedia\":\"Chat_buttonSortMedia__kmZAn\",\"chatMembersMedia\":\"Chat_chatMembersMedia__2g3AE\",\"titleMembersWrapDeployed\":\"Chat_titleMembersWrapDeployed__2JKFF\",\"buttonSortNotShowAll\":\"Chat_buttonSortNotShowAll__3Qax8\",\"avatarMedium\":\"Chat_avatarMedium__eK_9C\"};","import { AppStateType } from \"../redux-store\";\r\n\r\nexport const getMessages = (state: AppStateType) => {\r\n  return state.chat.messages\r\n}\r\nexport const getChatMembers = (state: AppStateType) => {\r\n  return state.chat.messages.filter((value, index, array) => (\r\n    array.findIndex(item => item.userId === value.userId) === index \r\n    ? value \r\n    : null\r\n  ))\r\n}\r\nexport const getStatus = (state: AppStateType) => {\r\n  return state.chat.status\r\n}","import React, { useEffect, useRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { ChatMessageAPIType } from '../../api/chat-api';\r\nimport { ChatMessageType, sendMessage, startMessagesListening, stopMessagesListening } from '../../redux/reducers/chat-reducer';\r\nimport { getChatMembers, getMessages, getStatus } from '../../redux/selectors/chat-selectors';\r\nimport { getAuthorizedUserID } from '../../redux/selectors/auth-selectors';\r\n\r\nimport Avatar from '../common/Avatar/Avatar';\r\n\r\nimport s from './Chat.module.css';\r\nimport cn from 'classnames';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport ArrowDropUpIcon from '@material-ui/icons/ArrowDropUp';\r\nimport Icon from \"@mdi/react\";\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport { mdiChevronDown } from '@mdi/js';\r\n\r\nconst Chat: React.FC = () => {\r\n\r\n  const status = useSelector(getStatus)\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(startMessagesListening())\r\n    return (() => {\r\n      dispatch(stopMessagesListening())\r\n    })\r\n  }, [dispatch])\r\n\r\n  return <div className={s.chat}>\r\n    {/* error появляется, когда пропадает интернет, на несколько миллисекунд и сменяется другим статусом? */}\r\n    {status === 'error' &&\r\n      <div>Some error occured. Please, refresh the page...</div>\r\n    }\r\n    <div className={s.membersAndMessages} >\r\n      <Messages />\r\n      <Members />\r\n    </div>\r\n    <AddMessageForm />\r\n  </div>\r\n}\r\n\r\nconst Members: React.FC = () => {\r\n\r\n  const chatMembers = useSelector(getChatMembers)\r\n  let [isShowAll, setIsShowAll] = useState(false)\r\n  let [isReverseSort, setIsReverseSort] = useState(false)\r\n  const itemsCount = isShowAll ? chatMembers.length : 5\r\n  let [isShowMembers, setIsShowMembers] = useState(false)\r\n\r\n  return <div className={cn(\r\n    s.membersContainer,\r\n    { [s.membersContainerHidden]: !chatMembers.length }\r\n  )}>\r\n    <div className={cn(\r\n      s.titleMembersWrap,\r\n      { [s.titleMembersWrapDeployed]: isShowMembers },\r\n      { [s.buttonSortWrapHiddenNotShowAll]: !isShowAll }\r\n    )}\r\n      onClick={() => isShowMembers\r\n        ? setIsShowMembers(false)\r\n        : setIsShowMembers(true)\r\n      }>\r\n      <div className={s.titleMembers}>Members</div>\r\n      <Icon className={s.titleMembersArrow} path={mdiChevronDown} title=\"ArrowShowMembers\" size='18px' />\r\n    </div>\r\n\r\n    <div className={cn(\r\n      s.buttonSortWrap,\r\n      { [s.buttonSortMedia]: isShowMembers },\r\n      { [s.buttonSortNotShowMembers]: !isShowMembers },\r\n      { [s.buttonSortNotShowAll]: !isShowAll }\r\n    )}>\r\n      <Button\r\n        onClick={() => isReverseSort\r\n          ? setIsReverseSort(false)\r\n          : setIsReverseSort(true)}\r\n        startIcon={isReverseSort\r\n          ? <ArrowDropUpIcon />\r\n          : <ArrowDropDownIcon />}\r\n        style={{ fontSize: 10, marginBottom: 5, padding: 3 }}\r\n      >sort by name\r\n      </Button>\r\n    </div>\r\n\r\n    <div className={cn(\r\n      { [s.chatMembersMedia]: isShowMembers },\r\n      { [s.chatMembersNotShowMembers]: !isShowMembers },\r\n      { [s.buttonSortNotShowAll]: !isShowAll }\r\n    )}>\r\n      {\r\n        chatMembers && chatMembers\r\n          .slice(0, itemsCount)\r\n          .sort((a: any, b: any): any => isReverseSort\r\n            ? b.userName.localeCompare(a.userName)\r\n            : a.userName.localeCompare(b.userName)\r\n          )\r\n          .map((u: any) => (\r\n            <div className={s.member} key={u.userId}>\r\n              <NavLink to={'/profile/' + u.userId}>\r\n                <Avatar photo={u.photo} size='small' />\r\n              </NavLink>\r\n              <NavLink className={cn(s.name, s.nameMember)} to={'/profile/' + u.userId}>\r\n                {u.userName}\r\n              </NavLink>\r\n            </div>\r\n          ))\r\n      }\r\n\r\n      {\r\n        chatMembers.length > 5 && !isShowAll\r\n          ? <div className={s.showAllWrap}>\r\n            <span className={s.showAll} onClick={() => setIsShowAll(true)}>\r\n              show all...\r\n            </span></div>\r\n          : ''\r\n      }\r\n    </div>\r\n  </div >\r\n}\r\n\r\nconst Messages: React.FC = () => {\r\n\r\n  const messages = useSelector(getMessages)\r\n  const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n  const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n\r\n  const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n    const element = e.currentTarget;\r\n    if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 1) {\r\n      !isAutoScroll && setIsAutoScroll(true)\r\n    } else {\r\n      isAutoScroll && setIsAutoScroll(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isAutoScroll) {\r\n      messagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth' })\r\n    }\r\n  }, [messages, isAutoScroll])\r\n\r\n  return (\r\n    <div className={cn(s.allMessages, { [s.allMessagesAbsent]: !messages.length })} onScroll={scrollHandler}>\r\n      {messages.length\r\n        ? messages\r\n          .filter(m => m.message.trim().length > 0)\r\n          .map((m: ChatMessageType) =>\r\n            <Message key={m.id} message={m} />\r\n          )\r\n        : <div className={s.noMessages}>No messages yet...<br />Write something!</div>\r\n      }\r\n      <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(\r\n  ({ message }) => {\r\n\r\n    const myID = useSelector(getAuthorizedUserID)\r\n\r\n    return (\r\n      <div className={cn(\r\n        s.messageContainer,\r\n        { [s.myMessageContainer]: myID === message.userId }\r\n      )}>\r\n        <NavLink to={'/profile/' + message.userId}>\r\n          <div className={s.avatarMedium}>\r\n            <Avatar photo={message.photo} size='medium' />\r\n          </div>\r\n          <div className={s.avatarSmall}>\r\n            <Avatar photo={message.photo} size='small' />\r\n          </div>\r\n        </NavLink>\r\n        <div className={s.nameAndMessage}>\r\n          <NavLink className={s.name} to={'/profile/' + message.userId}>\r\n            {message.userName}\r\n          </NavLink>\r\n          <div className={s.message}>{message.message}</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n)\r\n\r\nconst AddMessageForm: React.FC = () => {\r\n\r\n  const [message, setMessage] = React.useState('')\r\n  const status = useSelector(getStatus)\r\n  const dispatch = useDispatch()\r\n\r\n  const handleSendMessage = () => {\r\n    if (!message.trim()) {\r\n      return\r\n    }\r\n    dispatch(sendMessage(message))\r\n    setMessage('')\r\n  }\r\n\r\n  return (\r\n    <div className={s.wrapForm}>\r\n      <div className={s.form}>\r\n        <TextField\r\n          name='newMessageText'\r\n          placeholder='Enter your message...'\r\n          multiline={true}\r\n          fullWidth={true}\r\n          rowsMax='3'\r\n          variant=\"outlined\"\r\n          inputProps={{ maxLength: 100 }}\r\n          onChange={(e) => setMessage(e.currentTarget.value)}\r\n          value={message}\r\n        />\r\n        <IconButton\r\n          aria-label=\"sendMessage\"\r\n          color='primary'\r\n          style={{ margin: '5px' }}\r\n          onClick={handleSendMessage}\r\n          disabled={status === 'pending'}\r\n        >\r\n          <SendIcon />\r\n        </IconButton>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Chat;"],"sourceRoot":""}