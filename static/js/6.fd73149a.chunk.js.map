{"version":3,"sources":["hooks/useResizeWindow.tsx","components/Chat/Chat.module.scss","components/Chat/ChatMembers/ChatMembers.module.scss","components/Chat/ChatMembers/ChatButtonSort/ChatButtonSort.module.scss","components/Chat/ChatMessages/ChatMessages.module.scss","components/Chat/ChatMessages/ChatMessage/ChatMessage.module.scss","components/Chat/ChatMembers/ChatButtonSort/ChatBurronSort.tsx","redux/selectors/chat-selectors.ts","components/Chat/ChatMembers/ChatMembers.tsx","components/Chat/ChatMessages/ChatMessage/ChatMessage.tsx","components/Chat/ChatMessages/ChatMessages.tsx","components/Chat/Chat.tsx"],"names":["useResizeWindow","useState","window","innerWidth","widthScreen","setWidthScreen","useEffect","handleResizeWindow","addEventListener","removeEventListener","module","exports","ChatButtonSort","props","theme","isReverseSort","setIsReverseSort","isShowAll","isShowMembers","className","cn","s","buttonSortWrap","buttonSort","buttonSortNotShowMembers","Button","onClick","disabled","startIcon","style","fontSize","marginBottom","padding","color","getMessages","state","chat","messages","getChatMembers","filter","value","index","array","findIndex","item","userId","getStatusWS","statusWS","TitleMembers","setIsShowMembers","handleClickTitle","visuallyHidden","aria-hidden","onChange","inputHiddenBeforeFolding","titleWrap","elementInteractive","titleWrapDeployed","title","titleArrow","path","mdiChevronDown","size","ButtonShowAll","chatMembers","setIsShowAll","length","buttonShowAllWrap","type","buttonShowAll","ChatMembers","useSelector","itemsCount","hidden","container","members","notShowMembers","slice","sort","a","b","userName","localeCompare","map","u","member","Avatar","photo","id","wrapName","Name","name","ChatMessage","message","myID","getAuthorizedUserID","messageContainer","myMessageContainer","avatar_size_medium","avatar_size_small","nameAndMessage","memo","ChatMessages","lastElement","useRef","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","onScroll","e","el","currentTarget","scrollButton","scrollHeight","scrollTop","clientHeight","Math","abs","m","trim","NoElement","elements","writeSomething","ref","AddMessageForm","status","dispatch","useDispatch","setMessage","wrapForm","form","TextField","placeholder","fullWidth","variant","inputProps","maxLength","IconButton","margin","sendMessage","withAuthRedirect","getTheme","startMessagesListening","stopMessagesListening","membersAndMessages"],"mappings":"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","file":"static/js/6.fd73149a.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\n\nconst useResizeWindow = () => {\n  const [widthScreen, setWidthScreen] = useState(window.innerWidth)\n\n  useEffect(() => {\n    const handleResizeWindow = () => setWidthScreen(window.innerWidth)\n\n    window.addEventListener('resize', handleResizeWindow)\n    return () => {\n      window.removeEventListener('resize', handleResizeWindow)\n    }\n  }, [widthScreen, setWidthScreen])\n\n  return widthScreen\n}\n\nexport default useResizeWindow\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat\":\"Chat_chat__18S3w\",\"membersAndMessages\":\"Chat_membersAndMessages__1RTR_\",\"form\":\"Chat_form__3kFu7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ChatMembers_container__2TP-1\",\"visuallyHidden\":\"ChatMembers_visuallyHidden__3fPWw\",\"elementInteractive\":\"ChatMembers_elementInteractive__1ZGlM\",\"inputHiddenBeforeFolding\":\"ChatMembers_inputHiddenBeforeFolding__2RSKX\",\"titleWrap\":\"ChatMembers_titleWrap__2aqvJ\",\"title\":\"ChatMembers_title__2F3c9\",\"titleArrow\":\"ChatMembers_titleArrow__Vct_Z\",\"members\":\"ChatMembers_members__1ERHp\",\"member\":\"ChatMembers_member__2ia4a\",\"wrapName\":\"ChatMembers_wrapName__13EX8\",\"buttonShowAllWrap\":\"ChatMembers_buttonShowAllWrap__3Y0yM\",\"buttonShowAll\":\"ChatMembers_buttonShowAll__3vJDS\",\"notShowMembers\":\"ChatMembers_notShowMembers__2AwPt\",\"titleWrapDeployed\":\"ChatMembers_titleWrapDeployed__1_4of\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonSortWrap\":\"ChatButtonSort_buttonSortWrap__2hZ4X\",\"buttonSortNotShowMembers\":\"ChatButtonSort_buttonSortNotShowMembers__3z0o1\",\"buttonSort\":\"ChatButtonSort_buttonSort___FePg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ChatMessages_container__3dBvO\",\"visuallyHidden\":\"ChatMessages_visuallyHidden__2iYQw\",\"elementInteractive\":\"ChatMessages_elementInteractive__24IBt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageContainer\":\"ChatMessage_messageContainer__3ipmI\",\"myMessageContainer\":\"ChatMessage_myMessageContainer__D-mRN\",\"message\":\"ChatMessage_message__1yqt-\",\"nameAndMessage\":\"ChatMessage_nameAndMessage__1h2CE\",\"avatar_size_medium\":\"ChatMessage_avatar_size_medium__15DRH\",\"avatar_size_small\":\"ChatMessage_avatar_size_small__3py49\"};","import React, { Dispatch, SetStateAction } from 'react'\n\nimport cn from 'classnames'\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown'\nimport ArrowDropUpIcon from '@material-ui/icons/ArrowDropUp'\nimport { Button } from '@material-ui/core'\nimport s from './ChatButtonSort.module.scss'\n\nimport { ThemeType } from '../../../../types/types'\n\ntype PropsType = {\n  theme: ThemeType\n  isShowAll: boolean\n  isShowMembers: boolean\n  isReverseSort: boolean\n  setIsReverseSort: Dispatch<SetStateAction<boolean>>\n}\n\nconst ChatButtonSort: React.FC<PropsType> = (props) => {\n  const { theme, isReverseSort, setIsReverseSort, isShowAll, isShowMembers } =\n    props\n\n  const stylesSortByName: React.CSSProperties = {\n    fontSize: '10px',\n    marginBottom: '5px',\n    padding: '3px 10px 3px 7px',\n  }\n\n  const handleClick = () =>\n    isReverseSort ? setIsReverseSort(false) : setIsReverseSort(true)\n\n  return (\n    <div\n      className={cn(\n        s.buttonSortWrap,\n        { [s.buttonSort]: isShowMembers },\n        { [s.buttonSortNotShowMembers]: !isShowMembers }\n      )}\n    >\n      <Button\n        onClick={handleClick}\n        disabled={!isShowAll}\n        startIcon={isReverseSort ? <ArrowDropUpIcon /> : <ArrowDropDownIcon />}\n        style={stylesSortByName}\n        color={theme === 'theme1' ? 'primary' : 'secondary'}\n      >\n        sort by name\n      </Button>\n    </div>\n  )\n}\n\nexport default ChatButtonSort\n","import { AppStateType } from '../redux-store'\n\nexport const getMessages = (state: AppStateType) => state.chat.messages\n\nexport const getChatMembers = (state: AppStateType) =>\n  state.chat.messages.filter((value, index, array) =>\n    array.findIndex((item) => item.userId === value.userId) === index\n      ? value\n      : null\n  )\n\nexport const getStatusWS = (state: AppStateType) => state.chat.statusWS\n","import React, { Dispatch, SetStateAction, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport cn from 'classnames'\nimport Icon from '@mdi/react'\nimport { mdiChevronDown } from '@mdi/js'\nimport s from './ChatMembers.module.scss'\n\nimport useResizeWindow from '../../../hooks/useResizeWindow'\n\nimport ChatButtonSort from './ChatButtonSort/ChatBurronSort'\nimport Avatar from '../../common/Avatar/Avatar'\nimport Name from '../../common/Name/Name'\n\nimport { getChatMembers } from '../../../redux/selectors/chat-selectors'\nimport {\n  ChatMessageAPIType,\n  ChatMessageType,\n  ThemeType,\n} from '../../../types/types'\n\nconst ChatMembers: React.FC<{ theme: ThemeType }> = ({ theme }) => {\n  const chatMembers = useSelector(getChatMembers)\n\n  const [isShowAll, setIsShowAll] = useState(false)\n  const [isReverseSort, setIsReverseSort] = useState(false)\n  const [isShowMembers, setIsShowMembers] = useState(false)\n\n  const itemsCount = isShowAll ? chatMembers.length : 2\n\n  const sortMembers = (a: ChatMessageType, b: ChatMessageType): number =>\n    isReverseSort\n      ? b.userName.localeCompare(a.userName)\n      : a.userName.localeCompare(b.userName)\n\n  return (\n    <section hidden={!chatMembers.length} className={s.container}>\n      <TitleMembers\n        isShowMembers={isShowMembers}\n        setIsShowMembers={setIsShowMembers}\n      />\n\n      <ChatButtonSort\n        theme={theme}\n        isShowAll={isShowAll}\n        isShowMembers={isShowMembers}\n        isReverseSort={isReverseSort}\n        setIsReverseSort={setIsReverseSort}\n      />\n\n      <div\n        className={cn(\n          { [s.members]: isShowMembers },\n          { [s.notShowMembers]: !isShowMembers }\n        )}\n      >\n        {chatMembers &&\n          [...chatMembers]\n            .slice(0, itemsCount)\n            .sort(sortMembers)\n            .map((u: ChatMessageAPIType) => (\n              <div className={s.member} key={u.userId}>\n                <Avatar photo={u.photo} size='small' id={u.userId} />\n\n                <div className={s.wrapName}>\n                  <Name id={u.userId} name={u.userName} size='small' />\n                </div>\n              </div>\n            ))}\n\n        <ButtonShowAll\n          chatMembers={chatMembers}\n          isShowAll={isShowAll}\n          setIsShowAll={setIsShowAll}\n        />\n      </div>\n    </section>\n  )\n}\n\ntype TitleMembersPropsType = {\n  isShowMembers: boolean\n  setIsShowMembers: Dispatch<SetStateAction<boolean>>\n}\n\nconst TitleMembers: React.FC<TitleMembersPropsType> = ({\n  isShowMembers,\n  setIsShowMembers,\n}) => {\n  const widthScreen = useResizeWindow()\n\n  const handleClickTitle = () => {\n    if (widthScreen <= 760) {\n      if (isShowMembers) {\n        setIsShowMembers(false)\n      } else {\n        setIsShowMembers(true)\n      }\n    }\n  }\n\n  return (\n    <>\n      <h1 className={s.visuallyHidden}>Chat members</h1>\n      {/* outer div and input for keyboard operation */}\n      <div aria-hidden='true' onChange={handleClickTitle}>\n        <input className={cn(s.visuallyHidden, s.inputHiddenBeforeFolding)} />\n        <div\n          aria-hidden='true'\n          className={cn(s.titleWrap, s.elementInteractive, {\n            [s.titleWrapDeployed]: isShowMembers,\n          })}\n          onClick={handleClickTitle}\n        >\n          <h1 className={s.title}>Members</h1>\n          <Icon\n            className={s.titleArrow}\n            path={mdiChevronDown}\n            title='ArrowShowMembers'\n            size='18px'\n          />\n        </div>\n      </div>\n    </>\n  )\n}\n\ntype ButtonShowAllPropsType = {\n  chatMembers: ChatMessageType[]\n  isShowAll: boolean\n  setIsShowAll: Dispatch<SetStateAction<boolean>>\n}\n\nconst ButtonShowAll: React.FC<ButtonShowAllPropsType> = ({\n  chatMembers,\n  isShowAll,\n  setIsShowAll,\n}) => {\n  return (\n    <>\n      {chatMembers.length > 2 && !isShowAll ? (\n        <div className={s.buttonShowAllWrap}>\n          <button\n            type='button'\n            className={s.buttonShowAll}\n            onClick={() => setIsShowAll(true)}\n          >\n            show all {chatMembers.length} ...\n          </button>\n        </div>\n      ) : (\n        ''\n      )}\n    </>\n  )\n}\n\nexport default ChatMembers\n","import React, { memo } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport cn from 'classnames'\nimport s from './ChatMessage.module.scss'\n\nimport Avatar from '../../../common/Avatar/Avatar'\nimport Name from '../../../common/Name/Name'\n\nimport { getAuthorizedUserID } from '../../../../redux/selectors/auth-selectors'\nimport { ChatMessageAPIType } from '../../../../types/types'\n\nconst ChatMessage: React.FC<{ message: ChatMessageAPIType }> = ({\n  message: { userId, photo, userName, message },\n}) => {\n  const myID = useSelector(getAuthorizedUserID)\n\n  return (\n    <article\n      className={cn(s.messageContainer, {\n        [s.myMessageContainer]: myID === userId,\n      })}\n    >\n      <div className={s.avatar_size_medium}>\n        <Avatar photo={photo} size='medium' id={userId} />\n      </div>\n      <div hidden className={s.avatar_size_small}>\n        <Avatar photo={photo} size='small' id={userId} />\n      </div>\n\n      <div className={s.nameAndMessage}>\n        <Name id={userId} name={userName} size='normal' />\n        <div className={s.message}>{message}</div>\n      </div>\n    </article>\n  )\n}\n\nexport default memo(ChatMessage)\n","import React, { useEffect, useRef, useState, memo } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport s from './ChatMessages.module.scss'\n\nimport ChatMessage from './ChatMessage/ChatMessage'\nimport NoElement from '../../common/NoElement/NoElement'\n\nimport { getMessages } from '../../../redux/selectors/chat-selectors'\n\nimport { ChatMessageType } from '../../../types/types'\n\nconst ChatMessages: React.FC = () => {\n  const messages = useSelector(getMessages)\n  const lastElement = useRef<HTMLDivElement>(null)\n  const [isAutoScroll, setIsAutoScroll] = useState(true)\n\n  const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {\n    const el = e.currentTarget\n    const scrollButton = el.scrollHeight - el.scrollTop - el.clientHeight\n\n    if (Math.abs(scrollButton) < 1) {\n      if (!isAutoScroll) setIsAutoScroll(true)\n    } else if (isAutoScroll) setIsAutoScroll(false)\n  }\n\n  useEffect(() => {\n    if (isAutoScroll) {\n      lastElement.current?.scrollIntoView({ behavior: 'smooth' })\n    }\n  }, [messages, isAutoScroll])\n\n  return (\n    <section className={s.container} onScroll={handleScroll}>\n      <h1 className={s.visuallyHidden}>Chat messages</h1>\n      {messages.length ? (\n        messages\n          .filter((m) => m.message.trim().length > 0)\n          .map((m: ChatMessageType) => <ChatMessage key={m.id} message={m} />)\n      ) : (\n        <NoElement elements='messages' writeSomething />\n      )}\n      <div ref={lastElement} />\n    </section>\n  )\n}\n\nexport default memo(ChatMessages)\n","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport IconButton from '@material-ui/core/IconButton'\nimport SendIcon from '@material-ui/icons/Send'\nimport { TextField } from '@material-ui/core'\nimport s from './Chat.module.scss'\n\nimport ChatMembers from './ChatMembers/ChatMembers'\nimport ChatMessages from './ChatMessages/ChatMessages'\nimport withAuthRedirect from '../../hoc/withAuthRedirect'\n\nimport { getTheme } from '../../redux/selectors/app-selectors'\nimport { getStatusWS } from '../../redux/selectors/chat-selectors'\nimport {\n  sendMessage,\n  startMessagesListening,\n  stopMessagesListening,\n} from '../../redux/reducers/chat-reducer'\n\nimport { StatusWSType, ThemeType } from '../../types/types'\n\nconst Chat: React.FC = () => {\n  const status = useSelector(getStatusWS)\n  const theme = useSelector(getTheme)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(startMessagesListening())\n    return () => {\n      dispatch(stopMessagesListening())\n    }\n  }, [dispatch])\n\n  return (\n    <main className={s.chat}>\n      {status === 'error' && (\n        <div>Some error occured. Please, refresh the page...</div>\n      )}\n      <div className={s.membersAndMessages}>\n        <ChatMessages />\n        <ChatMembers theme={theme} />\n      </div>\n      <AddMessageForm theme={theme} status={status} />\n    </main>\n  )\n}\n\ntype FormPropsType = {\n  theme: ThemeType\n  status: StatusWSType\n}\n\nconst AddMessageForm: React.FC<FormPropsType> = ({ theme, status }) => {\n  const dispatch = useDispatch()\n  const [message, setMessage] = useState('')\n\n  const handleSendMessage = () => {\n    if (!message.trim()) {\n      return\n    }\n    dispatch(sendMessage(message))\n    setMessage('')\n  }\n\n  const handleChangeInput = (e: React.ChangeEvent<HTMLInputElement>) =>\n    setMessage(e.currentTarget.value)\n\n  return (\n    <div className={s.wrapForm}>\n      <div className={s.form}>\n        <TextField\n          name='newMessageText'\n          placeholder='Enter your message...'\n          fullWidth\n          variant='outlined'\n          inputProps={{ maxLength: 100 }}\n          color={theme === 'theme1' ? 'primary' : 'secondary'}\n          onChange={handleChangeInput}\n          value={message}\n        />\n        <IconButton\n          title='Send message'\n          color={theme === 'theme1' ? 'primary' : 'secondary'}\n          style={{ margin: '5px' }}\n          onClick={handleSendMessage}\n          disabled={status === 'pending'}\n        >\n          <SendIcon />\n        </IconButton>\n      </div>\n    </div>\n  )\n}\n\nexport default withAuthRedirect(Chat)\n"],"sourceRoot":""}