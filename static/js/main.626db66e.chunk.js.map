{"version":3,"sources":["components/hoc/withAuthRedirect.tsx","components/Profile/Wall/Wall.module.css","components/Users/Search/Search.module.css","redux/reducers/messages-reducer.ts","api/api.ts","components/Users/User/User.tsx","components/common/ElementCustom/InputCustomSearchUsers.jsx","components/Users/Search/Search.tsx","components/Profile/Info/InfoData/InfoData.module.css","components/Profile/Info/InfoDataForm/InfoDataForm.module.css","components/Navbar/Navbar.module.css","api/auth-api.ts","api/security-api.ts","redux/reducers/auth-reducer.ts","api/profile-api.ts","redux/reducers/profile-reducer.ts","redux/reducers/app-reducer.ts","redux/redux-store.ts","components/hoc/withSuspense.tsx","img/icons/logo.svg","img/icons/logout.svg","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Navbar/Navbar.tsx","img/avatar_2.jpg","components/Profile/Wall/Post/Post.tsx","components/Profile/Wall/Wall.tsx","components/Profile/Wall/WallContainer.tsx","components/common/ElementCustom/InputCustomProfileStatus.jsx","components/common/inputCount/inputCount.js","components/Profile/Info/Status/Status.tsx","components/common/ElementCustom/renderCheckbox.js","components/Profile/Info/InfoDataForm/InfoDataForm.tsx","components/Profile/Info/InfoData/InfoData.tsx","img/icons/camera.svg","components/Profile/Info/InfoContainer.tsx","components/Profile/ProfileContainer.tsx","components/Login/Login.tsx","components/Friends/Friends.tsx","components/Error/ErrorBoundary.jsx","App.tsx","index.js","components/Profile/Info/InfoContainer.module.css","components/common/ElementCustom/renderTextField.js","components/Users/User/User.module.css","components/Profile/Info/Status/Status.module.css","components/Login/Login.module.css","img/preloader.svg","components/common/Preloader/Preloader.jsx","components/Header/Header.module.css","components/Profile/Wall/Post/Post.module.css","api/users-api.ts","redux/reducers/users-reducer.ts","img/no_photo.svg","components/Users/Users.module.css","App.module.css"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","module","exports","initialState","dialogs","id","name","messages","message","newMessageText","actions","sendMessage","type","messagesReducer","action","newMessage","ResultCodesEnum","ResultCodeForCaptcha","instance","axios","create","withCredentials","baseURL","headers","User","photo","status","followed","unfollow","follow","followingInProgress","authorizedUserID","style","textDecoration","display","className","s","wrapAvatarNameAndStatus","avatar","src","unknown","alt","nameAndStatus","length","data-tooltip","button","onClick","disabled","some","idUser","justifyContent","alignItems","flexBasis","startIcon","color","useStyles","makeStyles","theme","search","position","borderRadius","shape","backgroundColor","margin","width","maxWidth","breakpoints","up","marginLeft","spacing","searchIcon","padding","height","pointerEvents","inputRoot","inputInput","paddingLeft","Search","classes","InputBase","placeholder","root","input","inputProps","onInput","e","onPageChanged","target","value","searchCount","totalUsersCount","toString","replace","authAPI","get","response","data","email","password","rememberMe","captcha","post","delete","securityAPI","userID","login","captchaURL","payload","getAuthUserDataThunk","dispatch","a","resultCode","Success","authReducer","profileAPI","put","photoFile","formData","FormData","append","profile","posts","likesCount","showSuccessSave","errorProfileContacts","addPost","newPostText","setUserProfile","setStatus","savePhotoSuccess","photos","showSuccessSaveProfile","showErrorProfileContacts","getUserProfile","userId","profileReducer","newPost","initialized","appReducer","rootReducer","combineReducers","profilePage","messagesPage","usersPage","usersReducer","app","form","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","fallback","Preloader","Header","header","logoAndTitle","logo","headerTitle","loginName","buttonDesctop","Button","logoutThunk","variant","buttonMobile","logout","withRouter","profileUrl","nav","exact","activeClassName","active","navLink","fill","location","pathname","navLinkImg","viewBox","d","xmlns","version","Post","container","nameAndPost","wrapLike","IconButton","aria-label","size","like","PostReduxForm","reduxForm","onSubmit","handleSubmit","wrapSendAndButton","Field","component","renderTextField","multiline","fullWidth","maxLength","endIcon","Wall","postsElements","map","p","values","inputProfileStatus","minHeight","maxHeight","lineHeight","handleFocusCount","select","document","getElementById","textContent","elem","fontSize","right","top","handleBlurCount","handleInputCount","num","wrap","count","Status","useState","editMode","setEditMode","useEffect","Input","autoFocus","bind","onFocus","onBlur","onChange","currentTarget","buttons","buttonWrap","updateStatus","isOwner","statusEmpty","statusNotMy","renderCheckbox","label","FormControlLabel","control","Checkbox","checked","labelPlacement","InfoDataForm","initialValues","titleForm","cn","wrapForCount","countStyle","titleAllContacts","Object","keys","contacts","key","titleContact","Contact","contactTitle","contactValue","contact","contactTextWrap","contactText","href","InfoData","containerForm","aboutMe","title","text","job","lookingForAJob","lookingForAJobDescription","el","ScrollToTopOnMount","scrollTo","InfoContainer","editModeProfile","seteditModeProfile","containerMain","columnLeft","avatarWrap","large","camera","htmlFor","wrapImg","editPhotoInput","files","savePhotoThunk","marginTop","buttonsSaveAndCancelProfile","submit","successSave","columnRight","fullName","saveProfileThunk","ProfileContainer","this","match","params","history","push","getStatus","refreshProfile","prevProps","WallContainer","React","PureComponent","file","getState","setTimeout","Error","LoginReduxForm","validate","errors","forEach","field","test","error","row","rowCheckbox","fontWeight","formError","loginThunk","stopSubmit","_error","CaptchaIsRequired","url","body","isFetching","friends","users","pageSize","getFriends","wrapper","pageNumber","term","nothingFound","u","user","small","ErrorBoundary","whiteSpace","children","Component","DialogsContainer","lazy","UsersContainer","SuspendedDialogs","SuspendedUsers","AppContainer","initializeAppThunk","fon","appWrapper","appWrapperContent","from","path","render","Friends","createMuiTheme","palette","primary","main","cyan","secondary","responsiveFontSizes","ReactDOM","ThemeProvider","CssBaseline","meta","touched","warning","custom","left","preloader","usersAPI","getUsers","currentPage","friend","followUser","unfollowUser","foundUsers","followSuccess","unfollowSuccess","setUsers","setFriends","setFoundUsers","setTotalUsersCount","clearUsers","setCurrentPage","toggleIsFetching","toggleFollowingProgress","page","items","totalCount","getFoundUsers","_followUnfollowFlow","apiMethod","actionCreator","filter"],"mappings":"qMAKIA,EAA6B,SAACC,GAChC,MAAO,CACLC,OAAQD,EAAME,KAAKD,SASR,SAASE,EAAsBC,GAQ5C,OAAOC,YAAkDN,EAA4B,GAA9EM,EANqD,SAACC,GAAW,IAC/DL,EAAwBK,EAAxBL,OAAWM,EADmD,YACtCD,EADsC,YAErE,OAAKL,EACE,cAACG,EAAD,eAAsBG,IADT,cAAC,IAAD,CAAUC,GAAI,gB,oBCnBtCC,EAAOC,QAAU,CAAC,UAAY,wBAAwB,kBAAoB,kC,oBCA1ED,EAAOC,QAAU,CAAC,OAAS,uBAAuB,YAAc,8B,sFCE5DC,EAAe,CACjBC,QAAS,CACP,CAAEC,GAAI,EAAGC,KAAM,SACf,CAAED,GAAI,EAAGC,KAAM,UACf,CAAED,GAAI,EAAGC,KAAM,YACf,CAAED,GAAI,EAAGC,KAAM,UAGjBC,SAAU,CACR,CAAEF,GAAI,EAAGG,QAAS,OAClB,CAAEH,GAAI,EAAGG,QAAS,kBAClB,CAAEH,GAAI,EAAGG,QAAS,iBAGpBC,eAAgB,IAsCLC,EAAU,CACrBC,YAAa,SAACF,GAAD,MAA6B,CAAEG,KAAM,eAAgBH,oBAGrDI,IAvCS,WAAmE,IAAlErB,EAAiE,uDAAzDW,EAAcW,EAA2C,uCAKxF,OAAQA,EAAOF,MAOb,IAAK,eACH,IAAIG,EAAa,CACfV,GAAI,EACJG,QAASM,EAAOL,gBAElB,OAAO,2BACFjB,GADL,IAEEe,SAAS,CAAEQ,GAAH,mBAAkBvB,EAAMe,WAChCE,eAAgB,KAGpB,QACE,OAAOjB,K,gCC5Cb,0GAUYwB,EAKAC,EAfZ,SAEaC,EAFb,OAEwBC,EAAMC,OAAO,CACnCC,iBAAiB,EACjBC,QAAS,gDACTC,QAAS,CACP,UAAW,2C,SAIHP,O,qBAAAA,I,kBAAAA,M,cAKAC,O,2CAAAA,M,uCCfZ,8FA6EeO,IAvDmB,SAAC1B,GAAW,IACpCO,EAA+FP,EAA/FO,GAAIoB,EAA2F3B,EAA3F2B,MAAOnB,EAAoFR,EAApFQ,KAAMoB,EAA8E5B,EAA9E4B,OAAQC,EAAsE7B,EAAtE6B,SAAUC,EAA4D9B,EAA5D8B,SAAUC,EAAkD/B,EAAlD+B,OAAQC,EAA0ChC,EAA1CgC,oBAAqBC,EAAqBjC,EAArBiC,iBAElF,OAAO,qCACL,cAAC,IAAD,CAAS/B,GAAI,YAAcK,EACzB2B,MAAO,CAAEC,eAAgB,OAAQC,QAAS,SAD5C,SAEE,sBAAKC,UAAWC,IAAEC,wBAAlB,UACE,8BACE,qBAAKF,UAAWC,IAAEE,OAAlB,SACE,qBAAKC,IAAe,OAAVd,EAAiBA,EAAQe,IAASC,IAAI,eAIpD,sBAAKN,UAAWC,IAAEM,cAAlB,WACO,OAAJpC,QAAI,IAAJA,OAAA,EAAAA,EAAMqC,QAAS,GACZ,qBAAKC,eAActC,EAAnB,SACA,qBAAK6B,UAAWC,IAAE9B,KAAlB,SAAyBA,MAEzB,qBAAK6B,UAAWC,IAAE9B,KAAlB,SAAyBA,KAEtB,OAANoB,QAAM,IAANA,OAAA,EAAAA,EAAQiB,QAAS,GACd,qBAAKC,eAAclB,EAAnB,SACA,qBAAKS,UAAWC,IAAEV,OAAlB,SAA2BA,MAE3B,qBAAKS,UAAWC,IAAEV,OAAlB,SAA2BA,YAMpCC,EACG,qBAAKQ,UAAWC,IAAES,OAAlB,SACA,cAAC,IAAD,CACEC,QAAS,kBAAMlB,EAASvB,IACxB0C,SAAUjB,EAAoBkB,MAAK,SAAAC,GAAM,OAAIA,IAAW5C,KACxD2B,MAAO,CAAEkB,eAAgB,WAAYC,WAAY,aAAcC,UAAW,SAC1EC,UAAW,cAAC,IAAD,IAJb,wBAQChD,IAAO0B,EAAoB,6BAE1B,qBAAKI,UAAWC,IAAES,OAAlB,SACA,cAAC,IAAD,CACEC,QAAS,kBAAMjB,EAAOxB,IACtB0C,SAAUjB,EAAoBkB,MAAK,SAAAC,GAAM,OAAIA,IAAW5C,KACxDiD,MAAM,UACNtB,MAAO,CAAEkB,eAAgB,WAAYC,WAAY,aAAcC,UAAW,SAC1EC,UAAW,cAAC,IAAD,IALb,2B,yGCzBKE,EAtCGC,aAAW,SAACC,GAAD,MAAY,CACvCC,OAAO,aACLC,SAAU,WACVC,aAAcH,EAAMI,MAAMD,aAC1BE,gBAAiB,4BACjB,UAAW,CACTA,gBAAiB,6BAEnBC,OAAQ,gBACRC,MAAO,OACPC,SAAU,QACTR,EAAMS,YAAYC,GAAG,MAAQ,CAC5BC,WAAYX,EAAMY,QAAQ,GAC1BL,MAAO,SAGXM,WAAY,CACVC,QAASd,EAAMY,QAAQ,EAAG,GAC1BG,OAAQ,OACRb,SAAU,WACVc,cAAe,OACfvC,QAAS,OACTiB,WAAY,SACZD,eAAgB,UAElBwB,UAAW,CACTpB,MAAO,WAETqB,WAAY,CACVJ,QAASd,EAAMY,QAAQ,EAAG,EAAG,EAAG,GAEhCO,YAAY,cAAD,OAAgBnB,EAAMY,QAAQ,GAA9B,OAEXL,MAAO,Y,OCKIa,IA3BqB,SAAC/E,GACnC,IAAMgF,EAAUvB,IAEhB,OAAO,sBAAKpB,UAAWC,IAAEsB,OAAlB,UACL,sBAAKvB,UAAW2C,EAAQpB,OAAxB,UACE,qBAAKvB,UAAW2C,EAAQR,WAAxB,SACE,cAAC,IAAD,MAEF,cAACS,EAAA,EAAD,CACEC,YAAY,oBACZF,QAAS,CACPG,KAAMH,EAAQJ,UACdQ,MAAOJ,EAAQH,YAEjBQ,WAAY,CAAE,aAAc,UAC5BC,QAAS,SAACC,GAAD,OACPvF,EAAMwF,cAAc,EAAGD,EAAEE,OAAOC,aAItC,sBAAKrD,UAAWC,IAAEqD,YAAlB,oBACU3F,EAAM4F,gBAAgBC,WAAWC,QAAQ,qBAAsB,e,mBCjC7E3F,EAAOC,QAAU,CAAC,cAAgB,gCAAgC,KAAO,uBAAuB,QAAU,0BAA0B,IAAM,sBAAsB,SAAW,2BAA2B,MAAQ,wBAAwB,KAAO,uBAAuB,QAAU,0BAA0B,aAAe,+BAA+B,gBAAkB,kCAAkC,YAAc,gC,mBCAxZD,EAAOC,QAAU,CAAC,KAAO,2BAA2B,UAAY,gCAAgC,KAAO,2BAA2B,SAAW,+BAA+B,iBAAmB,uCAAuC,aAAe,mCAAmC,WAAa,iCAAiC,aAAe,mCAAmC,qBAAuB,6C,mBCA/YD,EAAOC,QAAU,CAAC,IAAM,oBAAoB,QAAU,wBAAwB,WAAa,2BAA2B,OAAS,yB,8JCOlH2F,EAAU,WACT,OAAD,0HACc3E,IAAS4E,IAAT,WADd,cACHC,EADG,yBAIFA,EAASC,MAJP,8CADAH,EAAU,SAOTI,EAAeC,GAExB,IAAD,wIADAC,EACA,gCADoBC,EACpB,+BAD6C,KAC7C,SACuBlF,IAASmF,KAC9B,cAAe,CACfJ,QAAOC,WAAUC,aAAYC,YAH/B,cACML,EADN,yBAKOA,EAASC,MALhB,8CATSH,EAAU,WAgBL,OAAD,0HACU3E,IAASoF,OAA4B,eAD/C,cACPP,EADO,yBAENA,EAASC,MAFH,8CClBJO,EAAc,WACF,OAAD,0HACGrF,IAAS4E,IAAT,4BADH,cACdC,EADc,yBAEbA,EAASC,MAFI,8C,QCApB7F,EAAe,CACjBqG,OAAQ,KACRP,MAAO,KACPQ,MAAO,KACPhH,QAAQ,EACRiH,WAAY,MAiBRhG,EACa,SAAC8F,EAAuBP,EAAsBQ,EAAsBhH,GAApE,MAAyF,CACxGmB,KAAM,gBACN+F,QAAS,CAAEH,SAAQP,QAAOQ,QAAOhH,YAH/BiB,EAMQ,SAACgG,GAAD,MAAgC,CAC1C9F,KAAM,0BACN+F,QAAS,CAAED,gBAIFE,EAAuB,yDAAiB,WAAOC,GAAP,uBAAAC,EAAA,sEAC9BjB,IAD8B,QAC/CE,EAD+C,QAGtCgB,aAAe/F,IAAgBgG,UAAU,EACzBjB,EAASC,KAA9B3F,EAD6C,EAC7CA,GAAI4F,EADyC,EACzCA,MAAOQ,EADkC,EAClCA,MACjBI,EAASnG,EAAwBL,EAAI4F,EAAOQ,GAAO,KALF,2CAAjB,uDA6CrBQ,EAvEK,WAAmE,IAAlEzH,EAAiE,uDAAzDW,EAAcW,EAA2C,uCACpF,OAAQA,EAAOF,MACb,IAAK,gBACL,IAAK,0BACH,OAAO,2BACFpB,GACAsB,EAAO6F,SAGd,QACE,OAAOnH,I,iBClBA0H,EAAa,SACP7G,GAAoB,OAAD,0HACXa,IAAS4E,IAAT,kBAAqCzF,IAD1B,cAC5B0F,EAD4B,yBAE3BA,EAASC,MAFkB,8CADzBkB,EAAa,SAMR7G,GAAa,OAAD,0HACHa,IAAS4E,IAAT,yBAAuCzF,IADpC,cACpB0F,EADoB,yBAEnBA,EAASC,MAFU,8CANjBkB,EAAa,SAWLxF,GAAiB,OAAD,0HACVR,IAASiG,IAAT,iBAAoDzF,GAD1C,cAC3BqE,EAD2B,yBAE1BA,EAASC,MAFiB,8CAXxBkB,EAAa,SAgBLE,GAAiB,OAAD,mHAC3BC,EAAW,IAAIC,UACZC,OAAO,QAASH,GAFQ,SAGVlG,IAASiG,IAAT,gBAAsEE,EAAU,CACrG9F,QAAS,CACP,eAAgB,yBALa,cAG3BwE,EAH2B,yBAQ1BA,EAASC,MARiB,8CAhBxBkB,EAAa,SA2BHM,GAAuB,OAAD,0HAClBtG,IAASiG,IAAT,UAA6CK,GAD3B,cACnCzB,EADmC,yBAElCA,EAASC,MAFyB,8CCzBzC7F,EAAe,CACjBsH,MAAO,CACL,CAAEpH,GAAI,EAAGG,QAAS,uEAAiBkH,WAAY,IAC/C,CAAErH,GAAI,EAAGG,QAAS,8EAAmBkH,WAAY,IAGnDF,QAAS,KACT9F,OAAQ,GACRiG,gBAAiB,GACjBC,qBAAsB,IAyDXlH,EAAU,CACrBmH,QAAS,SAACC,GAAD,MAA0B,CAAElH,KAAM,WAAYkH,gBAEvDC,eAAgB,SAACP,GAAD,MAA2B,CAAE5G,KAAM,WAAY4G,YAC/DQ,UAAW,SAACtG,GAAD,MAAqB,CAAEd,KAAM,aAAcc,WACtDuG,iBAAkB,SAACC,GAAD,MAAyB,CAAEtH,KAAM,qBAAsBsH,WACzEC,uBAAwB,SAAC3H,GAAD,MAAsB,CAAEI,KAAM,oBAAqBJ,YAC3E4H,yBAA0B,SAAC5H,GAAD,MAAsB,CAAEI,KAAM,8BAA+BJ,aAG5E6H,EAAiB,SAACC,GAAD,8CAAsC,WAAOzB,GAAP,eAAAC,EAAA,sEAC3CI,EAAsBoB,GADqB,OAC5DvC,EAD4D,OAElEc,EAASnG,EAAQqH,eAAehC,IAFkC,2CAAtC,uDA6CfwC,EA7GQ,WAAmE,IAAlE/I,EAAiE,uDAAzDW,EAAcW,EAA2C,uCACvF,OAAQA,EAAOF,MACb,IAAK,WACH,IAAI4H,EAAU,CACZnI,GAAI,EACJG,QAASM,EAAOgH,YAChBJ,WAAY,GAEd,OAAO,2BACFlI,GADL,IAEEiI,MAAM,CAAEe,GAAH,mBAAehJ,EAAMiI,UAG9B,IAAK,WACH,OAAO,2BACFjI,GADL,IAEEgI,QAAS1G,EAAO0G,UAGpB,IAAK,aACH,OAAO,2BACFhI,GADL,IAEEkC,OAAQZ,EAAOY,SASnB,IAAK,qBACH,OAAO,2BACFlC,GADL,IAEEgI,QAAQ,2BAAMhI,EAAMgI,SAAb,IAAsBU,OAAQpH,EAAOoH,WAGhD,IAAK,oBACH,OAAO,2BACF1I,GADL,IAEEmI,gBAAiB7G,EAAON,UAG5B,IAAK,8BACH,OAAO,2BACFhB,GADL,IAEEoI,qBAAsB9G,EAAON,UAGjC,QACE,OAAOhB,I,QCnETW,EAAe,CACjBsI,aAAa,GAgBT/H,EACgB,iBAAO,CAAEE,KAAM,wBAQtB8H,EAtBI,WAAmE,IAAlElJ,EAAiE,uDAAzDW,EAAcW,EAA2C,uCACnF,OAAQA,EAAOF,MACb,IAAK,sBACH,OAAO,2BACFpB,GADL,IAEEiJ,aAAa,IAGjB,QACE,OAAOjJ,ICPTmJ,EAAcC,YAAgB,CAChCC,YAAaN,EACbO,aAAcjI,IACdkI,UAAWC,IACXtJ,KAAMuH,EACNgC,IAAKP,EACLQ,KAAMC,MAcFC,EAAmBC,OAAOC,sCAAwCC,IAIzDC,EAFDC,YAAYd,EAAaS,EAAiBM,YAAgBC,O,+BC7BjE,SAASC,EAAkBhK,GAChC,OAAO,SAACE,GACN,OAAO,cAAC,WAAD,CAAU+J,SAAU,cAACC,EAAA,EAAD,IAApB,SACL,cAAClK,EAAD,eAAsBE,O,sCCNb,OAA0B,iCCA1B,OAA0B,mC,+BCgD1BiK,GArCoD,SAACjK,GAClE,OACE,yBAAQqC,UAAWC,IAAE4H,OAArB,UACE,eAAC,IAAD,CAAS7H,UAAWC,IAAE6H,aAAcjK,GAAI,WAAxC,UACE,qBAAKuC,IAAK2H,GAAMzH,IAAI,SACpB,sBAAMN,UAAWC,IAAE+H,YAAnB,+BAGF,qBAAKhI,UAAWC,IAAEqE,MAAlB,SACG3G,EAAML,OACH,qCACA,sBAAM0C,UAAWC,IAAEgI,UAAnB,SAA+BtK,EAAM2G,QACrC,sBAAMtE,UAAWC,IAAEiI,cAAnB,SACE,cAACC,GAAA,EAAD,CACExH,QAAShD,EAAMyK,YACfC,QAAQ,WACRxI,MAAO,CAAE+B,OAAQ,IACjBV,UAAW,cAAC,KAAD,IAJb,uBAQF,sBAAMlB,UAAWC,IAAEqI,aAAnB,SACE,cAACH,GAAA,EAAD,CACExH,QAAShD,EAAMyK,YACfC,QAAQ,WACRxI,MAAO,CAAE+B,OAAQ,IAHnB,SAIC,qBAAKxB,IAAKmI,GAAQjI,IAAI,kBAIzB,cAAC,IAAD,CAAUzC,GAAG,iBCbVuJ,eACb1J,aARsB,SAACL,GACvB,MAAO,CACLC,OAAQD,EAAME,KAAKD,OACnBgH,MAAOjH,EAAME,KAAK+G,SAMD,CAAE8D,YTgDI,yDAAiB,WAAO1D,GAAP,SAAAC,EAAA,sEACnBjB,IADmB,cAG7BkB,aAAe/F,IAAgBgG,SAC1CH,EAASnG,EAAwB,KAAM,KAAM,MAAM,IAJX,2CAAjB,yDSlDZ6I,EAXb,SAACzJ,GACC,OAAO,cAAC,GAAD,eAAYA,O,oBC+CRyJ,eACb1J,aALsB,SAACL,GAAD,MAA6C,CACnEuC,iBAAkBvC,EAAME,KAAK8G,UAKV,IACnBmE,IAHapB,EArDwE,SAACzJ,GAEtF,IAAM8K,EAAa,YAAc9K,EAAMiC,iBAEvC,OACE,sBAAKI,UAAWC,KAAEyI,IAAKxK,GAAG,SAA1B,UACE,eAAC,IAAD,CAASyK,OAAK,EAAC9K,GAAI4K,EAAYG,gBAAiB3I,KAAE4I,OAAQ7I,UAAWC,KAAE6I,QAAvE,UACE,qBAAKjH,MAAM,KAAKQ,OAAO,KACrB0G,KAAMpL,EAAMqL,SAASC,WAAaR,EAAa,UAAY,QAC3DzI,UAAWC,KAAEiJ,WACbC,QAAQ,YAHV,SAGsB,sBAAMJ,KAAK,eAAeK,EAAE,qIAJpD,aASA,eAAC,IAAD,CAASvL,GAAG,WAAW+K,gBAAiB3I,KAAE4I,OAAQ7I,UAAWC,KAAE6I,QAA/D,UACE,qBAAKO,MAAM,6BAA6BC,QAAQ,MAAMzH,MAAM,KAAKQ,OAAO,KACtE0G,KAAkC,aAA5BpL,EAAMqL,SAASC,SAA0B,UAAY,QAC3DjJ,UAAWC,KAAEiJ,WACbC,QAAQ,YAHV,SAGsB,sBAAMC,EAAE,8EAJhC,cASA,eAAC,IAAD,CAASvL,GAAG,SAAS+K,gBAAiB3I,KAAE4I,OAAQ7I,UAAWC,KAAE6I,QAA7D,UACE,qBAAKjH,MAAM,KAAKQ,OAAO,KAAK8G,QAAQ,YAClCJ,KAAkC,WAA5BpL,EAAMqL,SAASC,SAAwB,UAAY,QACzDjJ,UAAWC,KAAEiJ,WAFf,SAGE,sBAAME,EAAE,odAJZ,gBASA,eAAC,IAAD,CAASvL,GAAG,WAAW+K,gBAAiB3I,KAAE4I,OAAQ7I,UAAWC,KAAE6I,QAA/D,UACE,qBAAKO,MAAM,6BAA6BC,QAAQ,MAAMzH,MAAM,KAAKQ,OAAO,KACtE0G,KAAkC,aAA5BpL,EAAMqL,SAASC,SAA0B,UAAY,QAC3DjJ,UAAWC,KAAEiJ,WACbC,QAAQ,YAHV,SAGsB,sBAAMC,EAAE,ukBAJhC,mB,0FC7CS,OAA0B,qC,wCCoC1BG,GA3BkB,SAAC5L,GAChC,OAAO,sBAAKqC,UAAWC,KAAEuJ,UAAlB,UACL,8BACE,qBAAKxJ,UAAWC,KAAEE,OAAlB,SACE,qBAAKC,IAAgB,OAAXD,GAAkBA,GAASE,KAASC,IAAI,eAItD,sBAAKN,UAAWC,KAAEwJ,YAAlB,UACE,qBAAKzJ,UAAWC,KAAE9B,KAAlB,uBAIA,qBAAK6B,UAAWC,KAAE5B,QAAlB,SACGV,EAAMU,UAGT,sBAAK2B,UAAWC,KAAEyJ,SAAlB,UACE,cAACC,GAAA,EAAD,CAAYC,aAAW,OAAOC,KAAK,QAAnC,SACE,cAAC,KAAD,MAEF,sBAAM7J,UAAWC,KAAE6J,KAAnB,SAA0BnM,EAAM4H,uB,mDC2BlCwE,GAAgBC,aAAkC,CACtDjD,KAAM,sBADciD,EA3BpB,SAACrM,GACC,OAAO,sBAAMsM,SAAUtM,EAAMuM,aAAtB,SACL,sBAAKlK,UAAWC,KAAEkK,kBAAlB,UACE,cAACC,GAAA,EAAD,CACEC,UAAWC,KACXnM,KAAK,cACL0E,YAAY,yBACZ0H,WAAW,EACXC,WAAW,EACXnC,QAAQ,WACRrF,WAAY,CAAEyH,UAAW,OAE3B,cAACtC,GAAA,EAAD,CACE1J,KAAK,SACL4J,QAAQ,YACRlH,MAAM,UACNtB,MAAO,CAAEsB,MAAO,QAASc,WAAY,OAAQJ,MAAO,SACpD6I,QAAS,cAAC,KAAD,IALX,8BAmBOC,GAjDkD,SAAChN,GAEhE,IAAIiN,EAAgBjN,EAAM2H,MAAMuF,KAAI,SAACC,GAAD,OAClC,cAAC,GAAD,CAAiBzM,QAASyM,EAAEzM,QAASkH,WAAYuF,EAAEvF,YAAxCuF,EAAE5M,OAMf,OACE,sBAAK8B,UAAWC,KAAEuJ,UAAlB,UACE,cAACO,GAAD,CAAeE,SANC,SAACc,GACnBpN,EAAM+H,QAAQqF,EAAOpF,gBAMlBiF,MCHQxD,eACb1J,aAPoB,SAACL,GACrB,MAAO,CACLiI,MAAOjI,EAAMqJ,YAAYpB,SAOzB,CACEI,QAASnH,EAAQmH,UAJR0B,CAMVuD,I,2FCdUvJ,GAXGC,cAAW,SAACC,GAAD,MAAY,CACvC0J,mBAAoB,CAClBC,UAAW,OACXC,UAAW,QACXC,WAAY,OACZ/I,QAASd,EAAMY,QAAQ,GACvBP,gBAAiB,UACjBF,aAAc,mBCOL2J,GAAmB,SAAClI,GAC/BA,EAAEE,OAAOiI,SAETC,SAASC,eAAerI,EAAEE,OAAOjF,KAAO,SAASqN,YAActI,EAAEE,OAAOC,MAAM7C,OAE9E,IAAMiL,EAAOH,SAASC,eAAerI,EAAEE,OAAOjF,KAAO,aACrDsN,EAAK5L,MAAME,QAAU,eACrB0L,EAAK5L,MAAM6L,SAAW,OACtBD,EAAK5L,MAAM2B,SAAW,WACtBiK,EAAK5L,MAAM8L,MAAQ,OACnBF,EAAK5L,MAAM+L,IAAM,GAGNC,GAAkB,SAAC3I,GAC9BoI,SAASC,eAAerI,EAAEE,OAAOjF,KAAO,aAAa0B,MAAME,QAAU,QAG1D+L,GAAmB,SAACC,EAAK7I,GACpC,IAAM8I,EAAO9I,EAAEE,OAAOjF,KAAO,YACvB8N,EAAQ/I,EAAEE,OAAOjF,KAAO,QACxBqC,EAAS0C,EAAEE,OAAOC,MAAM7C,OAE1BA,EAASuL,EAAM,KAAIT,SAASC,eAAeS,GAAMnM,MAAMsB,MAAQ,SAC/DX,GAAUuL,EAAM,KAAIT,SAASC,eAAeS,GAAMnM,MAAMsB,MAAQ,UAChEX,IAAWuL,IAAKT,SAASC,eAAeS,GAAMnM,MAAMsB,MAAQ,OAEhEmK,SAASC,eAAeU,GAAOT,YAActI,EAAEE,OAAOC,MAAM7C,QCuD/C0L,GAjFqB,SAACvO,GAEnC,IAAMgF,EAAUvB,KAF6B,EAIf+K,oBAAS,GAJM,oBAIxCC,EAJwC,KAI9BC,EAJ8B,OAKnBF,mBAASxO,EAAM4B,QALI,oBAKxCA,EALwC,KAKhCsG,EALgC,KAO7CyG,qBAAU,WACRzG,EAAUlI,EAAM4B,UACf,CAAC5B,EAAM4B,SAaV,OAAO,sBAAKS,UAAWC,KAAEuJ,UAAlB,UACJ4C,GAAY,sBAAKpM,UAAWC,KAAE+L,KAAlB,UACX,cAACO,GAAA,EAAD,CACEpO,KAAK,SACLkF,MAAO9D,EACPsD,YAAa,iBACb2J,WAAS,EACTxJ,WAAY,CAAEyH,UAAW,KACzBzK,UAAW2C,EAAQqI,mBACnBT,WAAW,EACXC,WAAW,EACXvH,QAAS6I,GAAiBW,KAAK,KAbtB,KAcTC,QAAStB,GACTuB,OAAQd,GACRe,SAxBiB,SAAC1J,GAAD,OAA4C2C,EAAU3C,EAAE2J,cAAcxJ,UA2BzF,sBAAKrD,UAAWC,KAAE6M,QAAlB,UACE,qBAAK9M,UAAWC,KAAE8M,WAAlB,SACE,cAAC5E,GAAA,EAAD,CACExH,QA3BS,WACjBhD,EAAMqP,aAAazN,GACnB8M,GAAY,IA0BJhE,QAAQ,YACRlH,MAAM,UACNtB,MAAO,CAAEsB,MAAO,OAAQS,OAAQ,GAAIC,MAAO,QAC3CX,UAAW,cAAC,KAAD,IALb,oBAQF,qBAAKlB,UAAWC,KAAE8M,WAAlB,SACE,cAAC5E,GAAA,EAAD,CACExH,QAtCa,kBAAM0L,GAAY,IAuC/BhE,QAAQ,WACRxI,MAAO,CAAE+B,OAAQ,GAAIC,MAAO,QAC5BX,UAAW,cAAC,KAAD,IAJb,sBAQF,uBAAMhD,GAAG,kBAAT,UACE,sBAAMA,GAAG,gBADX,mBAOHP,EAAMsP,UAAYb,GAAY,qBAAKpM,UAAWC,KAAEV,OAAQoB,QAtDlC,kBAAM0L,GAAY,IAsDV,SAC5B1O,EAAM4B,QACL,sBAAMS,UAAWC,KAAEiN,YAAnB,qCAOFvP,EAAMsP,SAAWtP,EAAM4B,QAAU,qBAAKS,UAAWC,KAAEkN,YAAlB,SAChCxP,EAAM4B,a,oBC1EE6N,GAfQ,SAAC,GAAsB,IAApBrK,EAAmB,EAAnBA,MAAOsK,EAAY,EAAZA,MAC/B,OAAO,8BACL,cAACC,GAAA,EAAD,CACEC,QACE,cAACC,GAAA,EAAD,CACEC,UAAS1K,EAAMM,MACfuJ,SAAU7J,EAAM6J,WAEpBS,MAAOA,EACPK,eAAe,QACf7N,MAAO,CAAEoC,WAAY,Q,wCCsGZ0L,GAJM3D,aAAqC,CACxDjD,KAAM,eADaiD,EA9FmE,SAACrM,GAAW,IAC1FuM,EAAsDvM,EAAtDuM,aAAc0D,EAAwCjQ,EAAxCiQ,cAAenI,EAAyB9H,EAAzB8H,qBAKrC,OAAO,uBAAMwE,SAAUC,EAAclK,UAAWC,KAAE8G,KAA3C,UAEL,oBAAI/G,UAAWC,KAAE4N,UAAjB,0BAEA,sBAAK7N,UAAW8N,KAAG7N,KAAE+L,KAAM/L,KAAE8N,cAA7B,UACE,cAAC3D,GAAA,EAAD,CACEC,UAAWC,KACXnM,KAAK,WACLkP,MAAM,QACNxK,YAAY,YACZwF,QAAQ,SACRmC,WAAW,EACXxH,WAAY,CAAEyH,UAAW,KACzBxH,QAAS6I,GAAiBW,KAAK,KAhBtB,KAiBTC,QAAStB,GACTuB,OAAQd,KAEV,uBAAM3N,GAAG,oBAAoB8B,UAAWC,KAAE+N,WAA1C,UACE,sBAAM9P,GAAG,kBADX,gBAKF,sBAAK8B,UAAW8N,KAAG7N,KAAE+L,KAAM/L,KAAE8N,cAA7B,UACE,cAAC3D,GAAA,EAAD,CACEC,UAAWC,KACXnM,KAAK,UACLkP,MAAM,YACNxK,YAAY,wBACZ0H,WAAW,EACXC,WAAW,EACXnC,QAAQ,SACRrF,WAAY,CAAEyH,UAAW,KACzBxH,QAAS6I,GAAiBW,KAAK,KAlCrB,KAmCVC,QAAStB,GACTuB,OAAQd,KAEV,uBAAM3N,GAAG,mBAAmB8B,UAAWC,KAAE+N,WAAzC,UACE,sBAAM9P,GAAG,iBADX,iBAKF,qBAAK8B,UAAWC,KAAE+L,KAAlB,SACE,cAAC5B,GAAA,EAAD,CACEC,UAAW+C,GACXjP,KAAK,iBACLkP,MAAM,iCAIV,sBAAKrN,UAAW8N,KAAG7N,KAAE+L,KAAM/L,KAAE8N,cAA7B,UACE,cAAC3D,GAAA,EAAD,CACEC,UAAWC,KACXnM,KAAK,4BACLkP,MAAM,uBACNxK,YAAY,mBACZ0H,WAAW,EACXC,WAAW,EACXnC,QAAQ,SACRrF,WAAY,CAAEyH,UAAW,KACzBxH,QAAS6I,GAAiBW,KAAK,KA7DrB,KA8DVC,QAAStB,GACTuB,OAAQd,KAEV,uBAAM3N,GAAG,qCAAqC8B,UAAWC,KAAE+N,WAA3D,UACE,sBAAM9P,GAAG,mCADX,iBAKF,sBAAK8B,UAAWC,KAAE+L,KAAlB,UACE,qBAAKhM,UAAWC,KAAEgO,iBAAlB,uBAEA,qBAAKjO,UAAWC,KAAEwF,qBAAlB,SACGA,IAGFyI,OAAOC,KAAKP,EAAcQ,UAAUvD,KAAI,SAAAwD,GACvC,OAAO,sBAAKrO,UAAWC,KAAEmO,SAAlB,UACL,sBAAKpO,UAAWC,KAAEqO,aAAlB,UAAiCD,EAAjC,OACA,cAACjE,GAAA,EAAD,CACEC,UAAWC,KACXnM,KAAM,YAAckQ,MAJgBA,e,oBCzC1CE,GAAsC,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aAC3D,OAAQ,mCACLA,GACI,sBAAKzO,UAAWC,KAAEyO,QAAlB,UACD,uBAAM1O,UAAWC,KAAEuO,aAAnB,UAAkCA,EAAlC,OACA,qBAAKxO,UAAWC,KAAE0O,gBAAlB,SACE,mBAAG3O,UAAWC,KAAE2O,YAAaC,KAAMJ,EAAnC,SAAkDA,YAO7CK,GA9DuB,SAAC,GAAiB,IAAfzJ,EAAc,EAAdA,QACvC,OAAO,sBAAKrF,UAAWC,KAAE8O,cAAlB,UAEL,qBAAK/O,UAAWC,KAAE+L,KAAlB,SACG3G,EAAQ2J,SAAW,sBAAKhP,UAAWC,KAAE+O,QAAlB,UAClB,qBAAKhP,UAAWC,KAAEgP,MAAlB,uBACA,qBAAKjP,UAAWC,KAAEiP,KAAlB,SAAyB7J,EAAQ2J,eAKrC,qBAAKhP,UAAWC,KAAE+L,KAAlB,SACE,sBAAKhM,UAAWC,KAAEkP,IAAlB,UACE,qBAAKnP,UAAWC,KAAEgP,MAAlB,yBACC5J,EAAQ+J,eACL,qBAAKpP,UAAWC,KAAEiP,KAAlB,oCACA,qBAAKlP,UAAWC,KAAEiP,KAAlB,4CAIR,qBAAKlP,UAAWC,KAAE+L,KAAlB,SACG3G,EAAQgK,2BAA6B,sBAAKrP,UAAWC,KAAEkP,IAAlB,UACpC,qBAAKnP,UAAWC,KAAEgP,MAAlB,kCACA,qBAAKjP,UAAWC,KAAEiP,KAAlB,SAAyB7J,EAAQgK,iCAKrC,qBAAKrP,UAAWC,KAAE+L,KAAlB,SACGkC,OAAOnD,OAAO1F,EAAQ+I,UAAUvN,MAAK,SAAAyO,GAAE,OAAIA,GAAa,KAAPA,MAC7C,sBAAKtP,UAAWC,KAAEmO,SAAlB,UACD,qBAAKpO,UAAWC,KAAEgP,MAAlB,yBACCf,OAAOC,KAAK9I,EAAQ+I,UAAUvD,KAAI,SAAAwD,GACjC,OAAO,cAAC,GAAD,CAELG,aAAcH,EACdI,aAAcpJ,EAAQ+I,SAASC,IAF1BA,eC1CJ,OAA0B,mC,yCCqBzC,SAASkB,KAIP,OAHAjD,qBAAU,WACRpF,OAAOsI,SAAS,EAAG,KAClB,IACI,KAqBT,IAwGeC,GAFO/R,eAtGiE,SAAC,GAA4B,IAA1BgH,EAAyB,EAAzBA,SAAa/G,EAAY,8BAEnEwO,oBAAS,GAF0D,oBAE1GuD,EAF0G,KAEzFC,EAFyF,KAIjH,IAAKhS,EAAM0H,QACT,OAAO,cAACsC,EAAA,EAAD,IAaT,OACE,sBAAK3H,UAAWC,KAAE2P,cAAlB,UAGE,cAACL,GAAD,IAEA,sBAAKvP,UAAWC,KAAE4P,WAAlB,UACE,qBAAK7P,UAAWC,KAAE6P,WAAlB,SACE,sBAAK9P,UAAWC,KAAEE,OAAlB,UACE,qBAAKC,IAAKzC,EAAM0H,QAAQU,OAAOgK,OAAS1P,KAASC,IAAI,WACpD3C,EAAMsP,UAAYyC,GACjB,sBAAK1P,UAAWC,KAAE+P,OAAlB,UACE,uBAAOC,QAAQ,WAAf,SACE,qBAAKjQ,UAAWC,KAAEiQ,QAAlB,SACE,qBAAK9P,IAAK4P,GAAQ1P,IAAI,aAG1B,uBACEpC,GAAG,WACH8B,UAAWC,KAAEkQ,eACb1R,KAAK,OACLmO,SA3BY,SAAC1J,GAA4C,IAAD,GACtE,UAAIA,EAAEE,OAAOgN,aAAb,aAAI,EAAgB5P,SAClB7C,EAAM0S,eAAenN,EAAEE,OAAOgN,MAAM,eA+BjCzS,EAAMsP,UAAYyC,GACd,cAACvH,GAAA,EAAD,CACDxH,QAAS,kBAAMgP,GAAmB,IAClCtH,QAAQ,WACRxI,MAAO,CAAE6L,SAAU,GAAI4E,UAAW,IAClCpP,UAAW,cAAC,KAAD,CAAUrB,MAAO,CAAE6L,SAAU,MAJvC,0BAQJgE,GAAmB,sBAAK1P,UAAWC,KAAEsQ,4BAAlB,UAClB,cAACpI,GAAA,EAAD,CACExH,QAAS,kBAAM+D,EAAS8L,YAAO,iBAC/BnI,QAAQ,YACRlH,MAAM,UACNqJ,WAAW,EACX3K,MAAO,CAAE6L,SAAU,GAAIvK,MAAO,OAAQS,OAAQ,IAC9CV,UAAW,cAAC,KAAD,IANb,kBAQA,cAACiH,GAAA,EAAD,CACExH,QAAS,kBAAMgP,GAAmB,IAClCtH,QAAQ,WACRmC,WAAW,EACX3K,MAAO,CAAE6L,SAAU,GAAIvK,MAAO,OAAQS,OAAQ,IAC9CV,UAAW,cAAC,KAAD,IALb,uBASDwO,GAAmB/R,EAAM6H,iBACxB,qBAAKxF,UAAWC,KAAEwQ,YAAlB,SACG9S,EAAM6H,qBAMb,sBAAKxF,UAAWC,KAAEyQ,YAAlB,WAEIhB,GAAmB,qBAAK1P,UAAWC,KAAE0Q,SAAlB,SAA6BhT,EAAM0H,QAAQsL,YAE9DjB,GAAmB,cAAC,GAAD,CACnBnQ,OAAQ5B,EAAM4B,OACdyN,aAAcrP,EAAMqP,aACpBC,QAAStP,EAAMsP,UAGhByC,EACG,cAAC,GAAD,CACA9B,cAAejQ,EAAM0H,QACrBI,qBAAsB9H,EAAM8H,qBAC5BwE,SAtFO,SAACc,GAChBpN,EAAMiT,iBAAiB7F,MAuFf,cAAC,GAAD,CAAU1F,QAAS1H,EAAM0H,mBCvG/BwL,G,wKACJ,WAEE,IAAI1K,GAAyB2K,KAAKnT,MAAMoT,MAAMC,OAAO7K,OAEhDA,IACHA,EAAS2K,KAAKnT,MAAMiC,mBAElBkR,KAAKnT,MAAMsT,QAAQC,KAAK,UAI5BJ,KAAKnT,MAAMuI,eAAeC,GAC1B2K,KAAKnT,MAAMwT,UAAUhL,K,+BAGvB,WACE2K,KAAKM,mB,gCAEP,SAAmBC,GAEbP,KAAKnT,MAAMoT,MAAMC,OAAO7K,SAAWkL,EAAUN,MAAMC,OAAO7K,QAC5D2K,KAAKM,mB,oBAIT,WACE,OAAO,qCACL,cAAC,GAAD,CACE/L,QAASyL,KAAKnT,MAAM0H,QACpB9F,OAAQuR,KAAKnT,MAAM4B,OACnBiG,gBAAiBsL,KAAKnT,MAAM6H,gBAC5BC,qBAAsBqL,KAAKnT,MAAM8H,qBAEjCwH,SAAU6D,KAAKnT,MAAMoT,MAAMC,OAAO7K,SAAW2K,KAAKnT,MAAMiC,iBAExDoN,aAAc8D,KAAKnT,MAAMqP,aACzBqD,eAAgBS,KAAKnT,MAAM0S,eAC3BO,iBAAkBE,KAAKnT,MAAMiT,mBAE/B,cAACU,GAAD,W,GAxCyBC,IAAMC,eAuDtBpK,eACb1J,aAXoB,SAACL,GACrB,MAAO,CACLgI,QAAShI,EAAMqJ,YAAYrB,QAC3B9F,OAAQlC,EAAMqJ,YAAYnH,OAC1BK,iBAAkBvC,EAAME,KAAK8G,OAC7BmB,gBAAiBnI,EAAMqJ,YAAYlB,gBACnCC,qBAAsBpI,EAAMqJ,YAAYjB,wBAOxC,CACES,iBACAiL,UrBTmB,SAACjT,GAAD,8CAA2B,WAAOwG,GAAP,eAAAC,EAAA,sEAC3BI,EAAqB7G,GADM,OAC5C0F,EAD4C,OAElDc,EAASnG,EAAQsH,UAAUjC,IAFuB,2CAA3B,uDqBUnBoJ,arBLsB,SAACzN,GAAD,8CAA+B,WAAOmF,GAAP,SAAAC,EAAA,sEAClCI,EAAwBxF,GADU,cAE5CqF,aAAe/F,IAAgBgG,SAC1CH,EAASnG,EAAQsH,UAAUtG,IAH4B,2CAA/B,uDqBMtB8Q,erBCwB,SAACoB,GAAD,8CAA2B,WAAO/M,GAAP,eAAAC,EAAA,sEAChCI,EAAwB0M,GADQ,QACjD7N,EADiD,QAE1CgB,aAAe/F,IAAgBgG,SAC1CH,EAASnG,EAAQuH,iBAAiBlC,EAASC,KAAKkC,SAHK,2CAA3B,uDqBAxB6K,iBrBO0B,SAACvL,GAAD,8CAAqC,WAAOX,EAAUgN,GAAjB,iBAAA/M,EAAA,sEAC5CI,EAA0BM,GADkB,OAC7DzB,EAD6D,OAE7DS,EAASqN,IAAWnU,KAAK8G,OAE3BT,EAASgB,aAAe/F,IAAgBgG,UAC1CH,EAASwB,EAAe7B,IACxBK,EAASnG,EAAQyH,uBAAuB,6BACxC2L,WAAWjN,EAAU,IAAMnG,EAAQyH,uBAAuB,KAC1DtB,EAASnG,EAAQ0H,yBAAyB,MAGxCrC,EAASgB,aAAe/F,IAAgB+S,OAM1ClN,EAASnG,EAAQ0H,yBAAyBrC,EAASxF,SAAS,KAjBK,2CAArC,2DqBJ9BoK,IACAhL,KAZa4J,CAabyJ,I,oBCyCIgB,GAAiB7H,aAA6C,CAClEjD,KAAM,YACN+K,SAvIe,SAAC/G,GAQhB,IAAMgH,EAAqB,GAkB3B,MAjBuB,CACrB,QACA,WACA,WAGaC,SAAQ,SAAAC,GAChBlH,EAAOkH,KACVF,EAAOE,GAA6B,eAIpClH,EAAOjH,QACL,4CAA4CoO,KAAKnH,EAAOjH,SAC5DiO,EAAOjO,MAAQ,yBAGViO,IA2Gc/H,EAvD0E,SAAC,GAAyC,IAAvCE,EAAsC,EAAtCA,aAAciI,EAAwB,EAAxBA,MAAO5N,EAAiB,EAAjBA,WACvH,OAAO,mCACL,uBAAM0F,SAAUC,EAAhB,UACE,qBAAKlK,UAAWC,KAAEmS,IAAlB,SACE,cAAChI,GAAA,EAAD,CACEC,UAAWC,KACXnM,KAAK,QACLkP,MAAM,SACN5O,KAAK,QACL+L,WAAW,MAGf,qBAAKxK,UAAWC,KAAEmS,IAAlB,SACE,cAAChI,GAAA,EAAD,CACEC,UAAWC,KACXnM,KAAK,WACLkP,MAAM,YACN5O,KAAK,WACL+L,WAAW,MAGf,qBAAKxK,UAAW8N,KAAG7N,KAAEmS,IAAKnS,KAAEoS,aAA5B,SACE,cAACjI,GAAA,EAAD,CACEC,UAAW+C,GACXjP,KAAK,aACLkP,MAAM,kBAIT9I,GAAc,qBAAKnE,IAAKmE,EAAYjE,IAAI,YACxCiE,GACC,cAAC6F,GAAA,EAAD,CACEC,UAAWC,KACXE,WAAW,EACXrM,KAAK,YAGT,sBAAK6B,UAAWC,KAAEmS,IAAlB,UACE,cAACjK,GAAA,EAAD,CACE1J,KAAK,SACL4J,QAAQ,YACRlH,MAAM,UACNtB,MAAO,CAAEgC,MAAO,OAAQ6J,SAAU,GAAI4G,WAAY,OAAQnR,MAAO,QAJnE,oBAOCgR,GACC,qBAAKnS,UAAWC,KAAEsS,UAAlB,SACGJ,eAmBE/K,eAA6B1J,aANpB,SAACL,GAAD,MAA6C,CACnEkH,WAAYlH,EAAME,KAAKgH,WACvBjH,OAAQD,EAAME,KAAKD,OACnB+G,OAAQhH,EAAME,KAAK8G,UAIF,CAACmO,WxBxGM,SAAC1O,EAAeC,EAAkBC,EAAqBC,GAAvD,8CAAsF,WAAOS,GAAP,mBAAAC,EAAA,sEACvFjB,EAAcI,EAAOC,EAAUC,EAAYC,GAD4C,QACxGL,EADwG,QAGjGgB,aAAe/F,IAAgBgG,UAC1CH,EAASD,KACTC,EAASnG,EAAmB,QAG1BqF,EAASgB,aAAe/F,IAAgB+S,QACpCvT,EAAUuF,EAASxF,SACnBO,EAAS8T,YAAW,YAAa,CACrCC,OAAQrU,EAAQmC,OAAS,EAAInC,EAAQ,GAAK,eAG5CqG,EAAS/F,IAGPiF,EAASgB,aAAe9F,IAAqB6T,mBAC/CjO,EAxBoB,uCAAiB,WAAOA,GAAP,iBAAAC,EAAA,sEAChBP,IADgB,OACjCR,EADiC,OAEjCK,EAAUL,EAASgP,IACzBlO,EAASnG,EAAmB0F,IAHW,2CAAjB,uDAMwF,2CAAtF,yDwBuGXmD,EAzFmD,SAACzJ,GAOjE,OAAIA,EAAML,OACD,cAAC,IAAD,CAAUO,GAAE,mBAAcF,EAAM0G,UAGlC,qBAAKrE,UAAWC,KAAE+L,KAAlB,SACL,sBAAKhM,UAAWC,KAAE4S,KAAlB,UACE,wCACA,cAAChB,GAAD,CACE5H,SAbW,SAACc,GAChBpN,EAAM6U,WACJzH,EAAOjH,MAAOiH,EAAOhH,SAAUgH,EAAO/G,WAAY+G,EAAO9G,UAYvDM,WAAY5G,EAAM4G,qB,wCCFX6C,eACb1J,aAbyB,SAACL,GAC1B,MAAO,CACLyV,WAAYzV,EAAMuJ,UAAUkM,WAC5BC,QAAS1V,EAAMuJ,UAAUmM,QACzBC,MAAO3V,EAAMuJ,UAAUoM,MACvBzP,gBAAiBlG,EAAMuJ,UAAUrD,gBACjC0P,SAAU5V,EAAMuJ,UAAUqM,SAC1BrT,iBAAkBvC,EAAME,KAAK8G,OAC7B1E,oBAAqBtC,EAAMuJ,UAAUjH,uBAOrC,CACEuT,eACAxT,WACAD,eAGJjC,KATa4J,EApD+B,SAAC,GAAqC,IAAnC4L,EAAkC,EAAlCA,MAAOE,EAA2B,EAA3BA,WAAevV,EAAY,sCACjF4T,IAAMjF,WAAU,kBAAM4G,EAAW,EAAG,IAAK,IAAI,KAAO,CAACA,EAAYF,IAMjE,OAAO,sBAAKhT,UAAWC,KAAEkT,QAAlB,UACJxV,EAAMmV,WAAa,cAACnL,EAAA,EAAD,IAAgB,KAEpC,cAACjF,GAAA,EAAD,CACES,cARkB,SAACiQ,EAAoBC,GACzCH,EAAWE,EAAYzV,EAAMsV,SAAUI,GAAM,IAQ3C9P,gBAAiB5F,EAAM4F,kBAIG,IAA1B5F,EAAM4F,iBACN,qBAAKvD,UAAWC,KAAEqT,aAAlB,2BAGF,qBAAKtT,UAAWC,KAAEuJ,UAAlB,SACG7L,EAAMoV,QAAQlI,KAAI,SAAA0I,GAAC,OAClB,qBAAgBvT,UAAWC,KAAEuT,KAA7B,SACE,cAACnU,GAAA,EAAD,CACEnB,GAAIqV,EAAErV,GACNoB,MAAOiU,EAAExN,OAAO0N,MAChBtV,KAAMoV,EAAEpV,KACRoB,OAAQgU,EAAEhU,OACVC,SAAU+T,EAAE/T,SACZC,SAAU9B,EAAM8B,SAChBC,OAAQ/B,EAAM+B,OACdC,oBAAqBhC,EAAMgC,oBAC3BC,iBAAkBjC,EAAMiC,oBAVlB2T,EAAErV,eC3BLwV,G,oDAxBb,WAAY/V,GAAQ,IAAD,+BACjB,cAAMA,IACDN,MAAQ,CAAE8U,MAAO,MAFL,E,2CASnB,WACyB,IAAD,EAAtB,OAAIrB,KAAKzT,MAAM8U,MAEX,gCACE,sDACA,yBAAStS,MAAO,CAAE8T,WAAY,YAA9B,mBACG7C,KAAKzT,MAAM8U,aADd,aACG,EAAkB3O,gBAKpBsN,KAAKnT,MAAMiW,Y,uCAfpB,SAAgCzB,GAC9B,MAAO,CAAEA,MAAOA,O,GAPQZ,IAAMsC,WCkB5BC,GAAmBvC,IAAMwC,MAC7B,kBAAM,iCACFC,GAAiBzC,IAAMwC,MAC3B,kBAAM,iCAEFE,GAAmBxM,EAAaqM,IAChCI,GAAiBzM,EAAauM,IA+DrBG,GAPM/M,YACnBoB,IACA9K,aAPsB,SAACL,GAAD,MAA0B,CAChDiJ,YAAajJ,EAAMyJ,IAAIR,YACvBjC,OAAQhH,EAAME,KAAK8G,UAKM,CACvB+P,mBxB5D8B,yDAAiB,WAAO1P,GAAP,SAAAC,EAAA,sEAC3CD,EAASD,KADkC,OAEjDC,EAASnG,KAFwC,2CAAjB,yDwByDb6I,EAtD2C,SAAC,GAC3B,IAAnCgN,EAAkC,EAAlCA,mBAAuBzW,EAAW,sCAInC,OAFA4T,IAAMjF,WAAU,kBAAM8H,MAAsB,CAACA,IAExCzW,EAAM2I,YAKT,qBAAKtG,UAAWC,IAAEoU,IAAlB,SACE,qBAAKrU,UAAWC,IAAEuJ,UAAlB,SACE,sBAAKxJ,UAAWC,IAAEqU,WAAlB,UAEE,cAAC,GAAD,IACA,cAAC,GAAD,IAEA,qBAAKtU,UAAWC,IAAEsU,kBAAlB,SACE,cAAC,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAUC,KAAK,qBAAqB3W,GAAG,MAEvC,cAAC,IAAD,CAAO4W,KAAK,WACVC,OAAQ,kBAAM,cAACT,GAAD,OAEhB,cAAC,IAAD,CAAOQ,KAAK,mBACVC,OAAQ,kBAAM,cAAC,GAAD,OAEhB,cAAC,IAAD,CAAOD,KAAK,SACVC,OAAQ,kBAAM,cAACR,GAAD,OAEhB,cAAC,IAAD,CAAOO,KAAK,WACVC,OAAQ,kBAAM,cAACC,GAAD,OAEhB,cAAC,IAAD,CAAOF,KAAK,SACVC,OAAQ,kBAAM,cAAC,GAAD,OAEhB,cAAC,IAAD,CAAU/L,OAAK,EAAC6L,KAAK,IAAI3W,GAAI,YAAcF,EAAM0G,SAEjD,cAAC,IAAD,CAAUmQ,KAAK,IAAI3W,GAAG,oBAjC3B,cAAC8J,EAAA,EAAD,O,6DCrBPrG,GAAQsT,aAAe,CACzBC,QAAS,CACPpW,KAAM,OACNqW,QAAS,CACPC,KAAMC,KAAK,MAGbC,UAAW,CACTF,KAAM,cAYZzT,GAAQ4T,aAAoB5T,IAE5B6T,IAAST,OACP,cAAC,IAAD,UACE,cAACU,GAAA,EAAD,CAAe9T,MAAOA,GAAtB,SACE,eAAC,IAAD,CAAU+F,MAAOA,EAAjB,UACE,cAACgO,GAAA,EAAD,IACA,cAAC,GAAD,WAGS/J,SAASC,eAAe,U,mBC1CzCzN,EAAOC,QAAU,CAAC,OAAS,8BAA8B,WAAa,kCAAkC,OAAS,8BAA8B,QAAU,+BAA+B,eAAiB,sCAAsC,cAAgB,qCAAqC,WAAa,kCAAkC,YAAc,mCAAmC,sBAAwB,6CAA6C,SAAW,gCAAgC,4BAA8B,mDAAmD,YAAc,mCAAmC,KAAO,8B,mEC2B9mBuM,IA1BS,SAAC3M,GAAW,IAC1B0P,EAAyI1P,EAAzI0P,MAAOtK,EAAkIpF,EAAlIoF,MAAOF,EAA2HlF,EAA3HkF,YAAa0H,EAA8G5M,EAA9G4M,UAAWlC,EAAmG1K,EAAnG0K,QAASrF,EAA0FrF,EAA1FqF,WAAYC,EAA8EtF,EAA9EsF,QAASyJ,EAAqE/O,EAArE+O,QAD3C,EACgH/O,EAA5D2X,KAAQC,EAD5D,EAC4DA,QAASpD,EADrE,EACqEA,MAAOqD,EAD5E,EAC4EA,QAAWhL,EAAyB7M,EAAzB6M,UAAciL,EADrG,YACgH9X,EADhH,2GAGjC,OAAO,qCACL,cAAC,IAAD,yBACE0P,MAAOA,EACPxK,YAAaA,EACbG,WAAYA,EACZC,QAASA,EACTyJ,QAASA,EACTrE,QAASA,EACTkC,UAAWA,EACXC,UAAWA,GACPzH,GACA0S,IAGJF,IACGpD,GACC,sBAAMtS,MAAO,CAAEsB,MAAO,OAAtB,SAAgCgR,KAC9BqD,GAAW,+BAAOA,U,mBCrB9B1X,EAAOC,QAAU,CAAC,wBAA0B,sCAAsC,OAAS,qBAAqB,cAAgB,4BAA4B,KAAO,mBAAmB,OAAS,qBAAqB,OAAS,uB,mBCA7ND,EAAOC,QAAU,CAAC,UAAY,0BAA0B,KAAO,qBAAqB,QAAU,wBAAwB,WAAa,2BAA2B,OAAS,uBAAuB,YAAc,4BAA4B,YAAc,4BAA4B,WAAa,2BAA2B,aAAe,+B,mBCAzUD,EAAOC,QAAU,CAAC,KAAO,oBAAoB,KAAO,oBAAoB,IAAM,mBAAmB,YAAc,2BAA2B,UAAY,2B,yCCDvI,MAA0B,sC,OCY1B4J,IATG,WAChB,OAAO,qBAAK9H,MAAO,CAAE2B,SAAU,WAAYkU,KAAM,oBAA1C,SACL,qBAAK7V,MAAO,CAAEE,QAAS,OAAQgB,eAAgB,UAA/C,SACE,qBAAKX,IAAKuV,EAAWrV,IAAI,oB,mBCL/BxC,EAAOC,QAAU,CAAC,OAAS,uBAAuB,aAAe,6BAA6B,YAAc,4BAA4B,MAAQ,sBAAsB,UAAY,0BAA0B,UAAY,0BAA0B,aAAe,6BAA6B,cAAgB,gC,mBCA9SD,EAAOC,QAAU,CAAC,UAAY,wBAAwB,OAAS,qBAAqB,YAAc,0BAA0B,KAAO,mBAAmB,QAAU,sBAAsB,SAAW,uBAAuB,KAAO,qB,+RCQlN6X,EAAW,CAChBC,SADgB,SACPC,EAAqB7C,EAAkBI,EAAe0C,GAAmB,OAAD,0HAC9DhX,IAAS4E,IAAT,qBACPmS,EADO,kBACc7C,EADd,iBAC+BI,EAD/B,mBAC8C0C,IAFgB,cAC/EnS,EAD+E,yBAI9EA,EAASC,MAJqE,8CAMvFmS,WAPsB,SAOX9X,GACT,OAAOa,IAASmF,KAAT,iBAA6ChG,GAAM,KAE5D+X,aAVsB,SAUT/X,GACX,OAAOa,IAASoF,OAAT,iBAA+CjG,MCdtDF,EAAe,CACjBgV,MAAO,GACPD,QAAS,GACTmD,WAAY,GAEZjD,SAAU,GACV1P,gBAAiB,EACjBuS,YAAa,EAEbhD,YAAY,EAEZnT,oBAAqB,IAoFVpB,EAAU,CACrB4X,cAAe,SAAC9R,GAAD,MAAqB,CAAE5F,KAAM,SAAU4F,WACtD+R,gBAAiB,SAAC/R,GAAD,MAAqB,CAAE5F,KAAM,WAAY4F,WAE1DgS,SAAU,SAACrD,GAAD,MAA6B,CAAEvU,KAAM,YAAauU,UAC5DsD,WAAY,SAACvD,GAAD,MAA+B,CAAEtU,KAAM,cAAesU,YAClEwD,cAAe,SAACL,GAAD,MAAkC,CAAEzX,KAAM,kBAAmByX,eAE5EM,mBAAoB,SAACjT,GAAD,MAA8B,CAChD9E,KAAM,wBAAyBwN,MAAO1I,IACxCkT,WAAY,iBAAO,CAAEhY,KAAM,gBAC3BiY,eAAgB,SAACZ,GAAD,MAA0B,CAAErX,KAAM,mBAAoBqX,gBACtEa,iBAAkB,SAAC7D,GAAD,MAA0B,CAAErU,KAAM,qBAAsBqU,eAC1E8D,wBAAyB,SAAC9D,EAAqBzO,GAAtB,MAA0C,CACjE5F,KAAM,+BAAgCqU,aAAYzO,YAGzCwR,EAAW,SAACgB,EAAc5D,EAAkBI,GAAjC,8CACT,WAAO3O,GAAP,eAAAC,EAAA,6DACXD,EAASnG,EAAQoY,kBAAiB,IADvB,SAGYf,EAASC,SAASgB,EAAM5D,EAAUI,GAH9C,OAGLzP,EAHK,OAIXc,EAASnG,EAAQ8X,SAASzS,EAASkT,QACnCpS,EAASnG,EAAQiY,mBAAmB5S,EAASmT,aAE7CrS,EAASnG,EAAQoY,kBAAiB,IAPvB,2CADS,uDAWXK,EAAgB,SAACH,EAAc5D,EAAkBI,GAAjC,8CACd,WAAO3O,GAAP,eAAAC,EAAA,6DACXD,EAASnG,EAAQoY,kBAAiB,IADvB,SAGYf,EAASC,SAASgB,EAAM5D,EAAUI,GAH9C,OAGLzP,EAHK,OAIXc,EAASnG,EAAQkY,cACjB/R,EAASnG,EAAQgY,cAAc3S,EAASkT,QACxCpS,EAASnG,EAAQiY,mBAAmB5S,EAASmT,aAE7CrS,EAASnG,EAAQoY,kBAAiB,IARvB,2CADc,uDAYhBzD,EAAa,SAAC2D,EAAc5D,EAAkBI,GAAjC,IAA+C0C,IAA/C,uGACX,WAAOrR,GAAP,eAAAC,EAAA,6DACXD,EAASnG,EAAQoY,kBAAiB,IADvB,SAGYf,EAASC,SAASgB,EAAM5D,EAAUI,EAAM0C,GAHpD,OAGLnS,EAHK,OAIXc,EAASnG,EAAQ+X,WAAW1S,EAASkT,QACrCpS,EAASnG,EAAQiY,mBAAmB5S,EAASmT,aAE7CrS,EAASnG,EAAQoY,kBAAiB,IAPvB,2CADW,uDAYpBM,EAAmB,uCAAG,WAC1BvS,EACAxG,EACAgZ,EACAC,GAJ0B,SAAAxS,EAAA,6DAM1BD,EAASnG,EAAQqY,yBAAwB,EAAM1Y,IANrB,SAOHgZ,EAAUhZ,GAPP,cASb2F,KAAKe,aAAe/F,IAAgBgG,SAC/CH,EAASyS,EAAcjZ,IAEzBwG,EAASnG,EAAQqY,yBAAwB,EAAO1Y,IAZtB,2CAAH,4DAeZwB,EAAS,SAACxB,GAAD,8CAA2B,WAAOwG,GAAP,SAAAC,EAAA,sDAC/CsS,EAAoBvS,EAAUxG,EAC5B0X,EAASI,WAAWvJ,KAAKmJ,GAAWrX,EAAQ4X,eAFC,2CAA3B,uDAKT1W,EAAW,SAACvB,GAAD,8CAA2B,WAAOwG,GAAP,SAAAC,EAAA,sDACjDsS,EAAoBvS,EAAUxG,EAC5B0X,EAASK,aAAaxJ,KAAKmJ,GAAWrX,EAAQ6X,iBAFC,2CAA3B,uDAKTvP,IA9JM,WAAmE,IAAlExJ,EAAiE,uDAAzDW,EAAcW,EAA2C,uCACrF,OAAQA,EAAOF,MACb,IAAK,SACH,OAAO,2BACFpB,GADL,IAEE2V,MAAO3V,EAAM2V,MAAMnI,KAAI,SAAA0I,GACrB,OAAIA,EAAErV,KAAOS,EAAO0F,OACX,2BAAKkP,GAAZ,IAAe/T,UAAU,IAEpB+T,OAIb,IAAK,WACH,OAAO,2BACFlW,GADL,IAEE2V,MAAO3V,EAAM2V,MAAMnI,KAAI,SAAA0I,GACrB,OAAIA,EAAErV,KAAOS,EAAO0F,OACX,2BAAKkP,GAAZ,IAAe/T,UAAU,IAEpB+T,OAIb,IAAK,YACH,OAAO,2BACFlW,GADL,IAEE2V,MAAM,GAAD,mBAAM3V,EAAM2V,OAAZ,YAAsBrU,EAAOqU,QAClCkD,WAAY,KAGhB,IAAK,cACH,OAAO,2BACF7Y,GADL,IAEE2V,MAAO,KAGX,IAAK,cACH,OAAO,2BACF3V,GADL,IAEE0V,QAASpU,EAAOoU,UAGpB,IAAK,kBACH,OAAO,2BACF1V,GADL,IAEE2V,MAAO,GACPkD,WAAYvX,EAAOuX,aAGvB,IAAK,mBACH,OAAO,2BACF7Y,GADL,IAEEyY,YAAanX,EAAOmX,cAGxB,IAAK,wBACH,OAAO,2BACFzY,GADL,IAEEkG,gBAAiB5E,EAAOsN,QAG5B,IAAK,qBACH,OAAO,2BACF5O,GADL,IAEEyV,WAAYnU,EAAOmU,aAGvB,IAAK,+BACH,OAAO,2BACFzV,GADL,IAEEsC,oBAAqBhB,EAAOmU,WAAP,sBACbzV,EAAMsC,qBADO,CACchB,EAAO0F,SACtChH,EAAMsC,oBAAoByX,QAAO,SAAAlZ,GAAE,OAAIA,IAAOS,EAAO0F,YAG7D,QACE,OAAOhH,K,gCCjGE,QAA0B,sC,mBCCzCS,EAAOC,QAAU,CAAC,QAAU,uBAAuB,aAAe,4BAA4B,UAAY,yBAAyB,KAAO,oBAAoB,eAAiB,gC,mBCA/KD,EAAOC,QAAU,CAAC,IAAM,iBAAiB,UAAY,uBAAuB,WAAa,wBAAwB,kBAAoB,kC","file":"static/js/main.626db66e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Redirect } from 'react-router';\r\nimport { connect } from 'react-redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n  }\r\n}\r\n\r\ntype MapStatePropsType = {\r\n  isAuth: boolean\r\n}\r\n\r\n// WCP - пропсы WrappedComponent\r\nexport default function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n  const RedirectComponent: React.FC<MapStatePropsType & {}> = (props) => {\r\n    const {isAuth, ...restProps} = props;\r\n    if (!isAuth) return <Redirect to={'/login'} />;\r\n    return <WrappedComponent {...restProps as WCP} />\r\n  }\r\n\r\n  return connect<MapStatePropsType, {}, WCP, AppStateType>(mapStateToPropsForRedirect, {})(RedirectComponent)\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Wall_container__1uEMX\",\"wrapSendAndButton\":\"Wall_wrapSendAndButton__2y9qX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"Search_search__2QBqv\",\"searchCount\":\"Search_searchCount__3-oiu\"};","import { DialogType, MessageType } from \"../../types/types\";\r\nimport { InferActionsTypes } from \"../redux-store\";\r\n\r\nlet initialState = {\r\n  dialogs: [\r\n    { id: 1, name: 'Denis' },\r\n    { id: 2, name: 'Andrey' },\r\n    { id: 3, name: 'Alexandr' },\r\n    { id: 4, name: 'Alisa' },\r\n  ] as Array<DialogType>,\r\n\r\n  messages: [\r\n    { id: 1, message: 'Hi!' },\r\n    { id: 2, message: 'lalalalalalala' },\r\n    { id: 3, message: 'How are you?' },\r\n  ] as Array<MessageType>,\r\n\r\n  newMessageText: ''\r\n};\r\n\r\nconst messagesReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n\r\n  // копируем только то, что планируем изменять; внутренние объекты массива (с id которые) мы менять не планируем, поэтому их копию и не делаем\r\n  // stateCopy = 'копия state' или copy of state\r\n\r\n  switch (action.type) {\r\n    // case UPDATE_NEW_MESSAGE_BODY:\r\n    //   return {\r\n    //     ...state,\r\n    //     newMessageText: action.body\r\n    //   };\r\n\r\n    case 'SEND_MESSAGE':\r\n      let newMessage = {\r\n        id: 4,\r\n        message: action.newMessageText\r\n      };\r\n      return {\r\n        ...state,\r\n        messages: [newMessage, ...state.messages],\r\n        newMessageText: ''\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// updateNewMessageBody (читается: обновить ТЕЛО нового сообщения) то же самое, что и \"body of new message\"\r\n// больше его не надо, т.к. за состояние сообщения теперь отвечает библиотека redux-form\r\n// export const updateNewMessageBody = (symbol) => ({\r\n//   type: UPDATE_NEW_MESSAGE_BODY,\r\n//   body: symbol\r\n// });\r\n\r\nexport const actions = {\r\n  sendMessage: (newMessageText: string) => ({ type: 'SEND_MESSAGE', newMessageText } as const),\r\n}\r\n\r\nexport default messagesReducer;\r\n\r\ntype InitialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;","import axios from 'axios';\r\n\r\nexport const instance = axios.create({\r\n  withCredentials: true, // цепляем cookie к запросу\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n  headers: {\r\n    'API-KEY': '9fe42175-1733-4793-9c3f-72022637a8a0'\r\n  }\r\n});\r\n\r\nexport enum ResultCodesEnum {\r\n  Success = 0,\r\n  Error = 1\r\n}\r\n\r\nexport enum ResultCodeForCaptcha {\r\n  CaptchaIsRequired = 10\r\n}\r\n\r\nexport type DefaultResponseType<D = {}, RC = ResultCodesEnum> = {\r\n  data: D\r\n  resultCode: RC\r\n  messages: Array<string> | string\r\n}","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport s from './User.module.css';\r\nimport unknown from './../../../img/no_photo.svg';\r\n\r\nimport { Button } from '@material-ui/core';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\ntype PropsType = {\r\n  id: number\r\n  photo: string | null\r\n  name: string\r\n  status: string\r\n  followed: boolean\r\n  authorizedUserID: number | null\r\n  followingInProgress: Array<number>\r\n  follow: (id: number) => void\r\n  unfollow: (id: number) => void\r\n}\r\n\r\nconst User: React.FC<PropsType> = (props) => {\r\n  const { id, photo, name, status, followed, unfollow, follow, followingInProgress, authorizedUserID } = props;\r\n\r\n  return <>\r\n    <NavLink to={'/profile/' + id}\r\n      style={{ textDecoration: 'none', display: 'block' }}>\r\n      <div className={s.wrapAvatarNameAndStatus}>\r\n        <div>\r\n          <div className={s.avatar}>\r\n            <img src={photo !== null ? photo : unknown} alt=\"avatar\" />\r\n          </div>\r\n        </div>\r\n\r\n        <div className={s.nameAndStatus}>\r\n          {name?.length > 17\r\n            ? <div data-tooltip={name}>\r\n              <div className={s.name}>{name}</div>\r\n            </div>\r\n            : <div className={s.name}>{name}</div>\r\n          }\r\n          {status?.length > 17\r\n            ? <div data-tooltip={status}>\r\n              <div className={s.status}>{status}</div>\r\n            </div>\r\n            : <div className={s.status}>{status}</div>\r\n          }\r\n        </div>\r\n      </div>\r\n    </NavLink>\r\n\r\n    {followed\r\n      ? <div className={s.button}>\r\n        <Button\r\n          onClick={() => unfollow(id)}\r\n          disabled={followingInProgress.some(idUser => idUser === id)}\r\n          style={{ justifyContent: 'flex-end', alignItems: 'flex-start', flexBasis: '200px' }}\r\n          startIcon={<RemoveIcon />}\r\n        >Unfollow</Button>\r\n      </div>\r\n\r\n      : (id === authorizedUserID) ? <></>\r\n\r\n        : <div className={s.button}>\r\n          <Button\r\n            onClick={() => follow(id)}\r\n            disabled={followingInProgress.some(idUser => idUser === id)}\r\n            color=\"primary\"\r\n            style={{ justifyContent: 'flex-end', alignItems: 'flex-start', flexBasis: '200px' }}\r\n            startIcon={<AddIcon />}\r\n          >Follow</Button>\r\n        </div>\r\n    }\r\n  </>\r\n}\r\n\r\nexport default User;","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: 'rgba(255, 255, 255, 0.15)',\r\n    '&:hover': {\r\n      backgroundColor: 'rgba(255, 255, 255, 0.25)',\r\n    },\r\n    margin: '10px 0 10px 0',\r\n    width: '100%',\r\n    maxWidth: '24ch',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(1),\r\n      width: 'auto',\r\n    },\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    // transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    \r\n  },\r\n}));\r\n\r\nexport default useStyles;","import React from 'react';\r\n\r\nimport s from './Search.module.css';\r\n\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport useStyles from '../../common/ElementCustom/InputCustomSearchUsers';\r\n\r\ntype PropsType = {\r\n  onPageChanged: (pageNumber: number, value: string) => void\r\n  totalUsersCount: number\r\n}\r\n\r\nconst Search: React.FC<PropsType> = (props) => {\r\n  const classes = useStyles();\r\n\r\n  return <div className={s.search}>\r\n    <div className={classes.search}>\r\n      <div className={classes.searchIcon}>\r\n        <SearchIcon />\r\n      </div>\r\n      <InputBase\r\n        placeholder=\"Search by name...\"\r\n        classes={{\r\n          root: classes.inputRoot,\r\n          input: classes.inputInput,\r\n        }}\r\n        inputProps={{ 'aria-label': 'search' }}\r\n        onInput={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n          props.onPageChanged(1, e.target.value)\r\n        }\r\n      />\r\n    </div>\r\n    <div className={s.searchCount}>\r\n      Total: {props.totalUsersCount.toString().replace(/(\\d)(?=(\\d{3})+$)/g, '$1 ')}\r\n      {/* добавление пробела между числами: (?=pattern)+ - жадное повторение последнего шаблона один или несколько раз до конца строки $ */}\r\n    </div>\r\n  </div>\r\n}\r\n\r\nexport default Search;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerForm\":\"InfoData_containerForm__1JOGm\",\"wrap\":\"InfoData_wrap__1Sogv\",\"aboutMe\":\"InfoData_aboutMe__2cZYL\",\"job\":\"InfoData_job__3N8Ba\",\"contacts\":\"InfoData_contacts__uL_8Z\",\"title\":\"InfoData_title__3tTLU\",\"text\":\"InfoData_text__3OEXf\",\"contact\":\"InfoData_contact__15i2w\",\"contactTitle\":\"InfoData_contactTitle__2PwVT\",\"contactTextWrap\":\"InfoData_contactTextWrap__DGFoS\",\"contactText\":\"InfoData_contactText__1r_Xy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"InfoDataForm_form__3X5Dg\",\"titleForm\":\"InfoDataForm_titleForm__3o6fa\",\"wrap\":\"InfoDataForm_wrap__7quju\",\"contacts\":\"InfoDataForm_contacts__ETWKA\",\"titleAllContacts\":\"InfoDataForm_titleAllContacts__32-Po\",\"titleContact\":\"InfoDataForm_titleContact__Def8-\",\"countStyle\":\"InfoDataForm_countStyle__3Vxhs\",\"wrapForCount\":\"InfoDataForm_wrapForCount__3uTkw\",\"errorProfileContacts\":\"InfoDataForm_errorProfileContacts__PksGi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3R0rh\",\"navLink\":\"Navbar_navLink__3jqZB\",\"navLinkImg\":\"Navbar_navLinkImg__3kMZG\",\"active\":\"Navbar_active__2b-XZ\"};","import { DefaultResponseType, instance, ResultCodeForCaptcha, ResultCodesEnum } from './api';\r\n\r\ntype MeDataType = {\r\n  id: number\r\n  email: string\r\n  login: string\r\n}\r\n\r\nexport const authAPI = {\r\n  async me() {\r\n    const response = await instance.get<DefaultResponseType<MeDataType>>(`auth/me`);\r\n    // const response = await instance.get(`auth/me`);\r\n    // debugger\r\n    return response.data;\r\n  },\r\n  async login(email: string, password: string,\r\n    rememberMe = false, captcha: null | string = null\r\n  ) {\r\n    const response = await instance.post<DefaultResponseType<{ userId: number }, ResultCodesEnum | ResultCodeForCaptcha>>(\r\n      '/auth/login', {\r\n      email, password, rememberMe, captcha\r\n    });\r\n    return response.data;\r\n  },\r\n  async logout() {\r\n    const response = await instance.delete<DefaultResponseType>('/auth/login');\r\n    return response.data;\r\n  }\r\n}","import { instance } from './api';\r\n\r\ntype GetCaptchaResponseType = {\r\n  url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n  async getCaptchaURL() {\r\n    const response = await instance.get<GetCaptchaResponseType>(`security/get-captcha-url`);\r\n    return response.data;\r\n  },\r\n}","import { ResultCodesEnum, ResultCodeForCaptcha } from '../../api/api';\r\nimport { authAPI } from '../../api/auth-api';\r\nimport { securityAPI } from '../../api/security-api';\r\n\r\nimport { FormAction, stopSubmit } from 'redux-form';\r\nimport { BaseThunkType, InferActionsTypes } from '../redux-store';\r\n\r\nlet initialState = {\r\n  userID: null as number | null,\r\n  email: null as string | null,\r\n  login: null as string | null,\r\n  isAuth: false,\r\n  captchaURL: null as string | null,\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'SET_USER_DATA':\r\n    case 'GET_CAPTCHA_URL_SUCCESS': {\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst actions = {\r\n  setAuthUserData: (userID: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n    type: 'SET_USER_DATA',\r\n    payload: { userID, email, login, isAuth } as const\r\n  }),\r\n\r\n  setCaptcha: (captchaURL: string | null) => ({\r\n    type: 'GET_CAPTCHA_URL_SUCCESS',\r\n    payload: { captchaURL } as const\r\n  }),\r\n}\r\n\r\nexport const getAuthUserDataThunk = (): ThunkType => async (dispatch) => {\r\n  let response = await authAPI.me();\r\n// debugger\r\n  if (response.resultCode === ResultCodesEnum.Success) {\r\n    let { id, email, login } = response.data;\r\n    dispatch(actions.setAuthUserData(id, email, login, true))\r\n  }\r\n}\r\n\r\nconst setCaptchaThunk = (): ThunkType => async (dispatch) => {\r\n  const response = await securityAPI.getCaptchaURL();\r\n  const captcha = response.url;\r\n  dispatch(actions.setCaptcha(captcha))\r\n}\r\n\r\nexport const loginThunk = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n  const response = await authAPI.login(email, password, rememberMe, captcha);\r\n\r\n  if (response.resultCode === ResultCodesEnum.Success) {\r\n    dispatch(getAuthUserDataThunk())\r\n    dispatch(actions.setCaptcha(null))\r\n  }\r\n\r\n  if (response.resultCode === ResultCodesEnum.Error) {\r\n    const message = response.messages;\r\n    const action = stopSubmit('loginForm', {\r\n      _error: message.length > 0 ? message[0] : 'Some error'\r\n    });\r\n    // Some error - на всякий случай, если с сервера придёт пустое сообщение при ошибке\r\n    dispatch(action);\r\n  }\r\n\r\n  if (response.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\r\n    dispatch(setCaptchaThunk())\r\n  }\r\n}\r\n\r\nexport const logoutThunk = (): ThunkType => async (dispatch) => {\r\n  const response = await authAPI.logout();\r\n\r\n  if (response.resultCode === ResultCodesEnum.Success) {\r\n    dispatch(actions.setAuthUserData(null, null, null, false))\r\n  }\r\n}\r\n\r\nexport default authReducer;\r\n\r\ntype InitialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>;","import { PhotosType, ProfileType } from '../types/types';\r\nimport { DefaultResponseType, instance } from './api';\r\n\r\ntype SavePhotoDataType = {\r\n  photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n  async getProfile(id: number | null) {\r\n    const response = await instance.get<ProfileType>(`profile/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  async getStatus(id: number) {\r\n    const response = await instance.get<string>(`profile/status/${id}`)\r\n    return response.data;\r\n  },\r\n\r\n  async updateStatus(status: string) {\r\n    const response = await instance.put<DefaultResponseType>(`profile/status`, status);\r\n    return response.data;\r\n  },\r\n\r\n  async savePhotoAPI(photoFile: any) {\r\n    const formData = new FormData();\r\n    formData.append('image', photoFile);\r\n    const response = await instance.put<DefaultResponseType<SavePhotoDataType>>(`profile/photo`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  async saveProfileAPI(profile: ProfileType) {\r\n    const response = await instance.put<DefaultResponseType>(`profile`, profile);\r\n    return response.data;\r\n  }\r\n}","import { AppStateType, BaseThunkType, InferActionsTypes } from '../redux-store';\r\n\r\nimport { PostType } from '../../types/types';\r\nimport { ProfileType } from '../../types/types';\r\nimport { PhotosType } from '../../types/types';\r\n\r\nimport { ResultCodesEnum } from '../../api/api';\r\nimport { profileAPI } from '../../api/profile-api';\r\n\r\nlet initialState = {\r\n  posts: [\r\n    { id: 1, message: 'Стена Привет!', likesCount: 12 },\r\n    { id: 2, message: 'Стена Как дела?', likesCount: 4 },\r\n  ] as Array<PostType>,\r\n\r\n  profile: null as ProfileType | null,\r\n  status: '',\r\n  showSuccessSave: '',\r\n  errorProfileContacts: '',\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'ADD_POST': {\r\n      let newPost = {\r\n        id: 3,\r\n        message: action.newPostText,\r\n        likesCount: 0,\r\n      };\r\n      return {\r\n        ...state,\r\n        posts: [newPost, ...state.posts],\r\n      }\r\n    }\r\n    case 'SET_USER': {\r\n      return {\r\n        ...state,\r\n        profile: action.profile\r\n      }\r\n    }\r\n    case 'SET_STATUS': {\r\n      return {\r\n        ...state,\r\n        status: action.status\r\n      }\r\n    }\r\n    // case 'DELETE_POST': {\r\n    //   return {\r\n    //     ...state,\r\n    //     posts: state.posts.filter(p => p.id !== action.postID)\r\n    //   }\r\n    // }\r\n    case 'SAVE_PHOTO_SUCCESS': {\r\n      return {\r\n        ...state,\r\n        profile: { ...state.profile, photos: action.photos } as ProfileType\r\n      }\r\n    }\r\n    case 'SHOW_SUCCESS_SAVE': {\r\n      return {\r\n        ...state,\r\n        showSuccessSave: action.message,\r\n      }\r\n    }\r\n    case 'SHOW_ERROR_PROFILE_CONTACTS': {\r\n      return {\r\n        ...state,\r\n        errorProfileContacts: action.message,\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  addPost: (newPostText: string) => ({ type: 'ADD_POST', newPostText } as const),\r\n  // deletePost: (postID: number) => ({ type: 'DELETE_POST', postID } as const),\r\n  setUserProfile: (profile: ProfileType) => ({ type: 'SET_USER', profile } as const),\r\n  setStatus: (status: string) => ({ type: 'SET_STATUS', status } as const),\r\n  savePhotoSuccess: (photos: PhotosType) => ({ type: 'SAVE_PHOTO_SUCCESS', photos } as const),\r\n  showSuccessSaveProfile: (message: string) => ({ type: 'SHOW_SUCCESS_SAVE', message } as const),\r\n  showErrorProfileContacts: (message: string) => ({ type: 'SHOW_ERROR_PROFILE_CONTACTS', message } as const),\r\n}\r\n\r\nexport const getUserProfile = (userId: number | null): ThunkType => async (dispatch) => {\r\n  const response = await profileAPI.getProfile(userId);\r\n  dispatch(actions.setUserProfile(response));\r\n};\r\n\r\nexport const getStatus = (id: number): ThunkType => async (dispatch) => {\r\n  const response = await profileAPI.getStatus(id);\r\n  dispatch(actions.setStatus(response));\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n  const response = await profileAPI.updateStatus(status);\r\n  if (response.resultCode === ResultCodesEnum.Success) {\r\n    dispatch(actions.setStatus(status));\r\n  }\r\n};\r\n\r\nexport const savePhotoThunk = (file: File): ThunkType => async (dispatch) => {\r\n  const response = await profileAPI.savePhotoAPI(file);\r\n  if (response.resultCode === ResultCodesEnum.Success) {\r\n    dispatch(actions.savePhotoSuccess(response.data.photos));\r\n  }\r\n};\r\n\r\nexport const saveProfileThunk = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n  const response = await profileAPI.saveProfileAPI(profile);\r\n  const userID = getState().auth.userID;\r\n\r\n  if (response.resultCode === ResultCodesEnum.Success) {\r\n    dispatch(getUserProfile(userID));\r\n    dispatch(actions.showSuccessSaveProfile('Data saved successfully!'));\r\n    setTimeout(dispatch, 4000, actions.showSuccessSaveProfile(''));\r\n    dispatch(actions.showErrorProfileContacts(''));\r\n  }\r\n\r\n  if (response.resultCode === ResultCodesEnum.Error) {\r\n    // заготовка для показа ошибки конкретного поля\r\n    // let key = response.data.messages[0].match(/Contacts->(\\w+)/)[1].toLowerCase();\r\n    // dispatch(stopSubmit('editProfile', {\r\n    //   contacts: { [key]: response.data.messages[0] },\r\n    // }));\r\n    dispatch(actions.showErrorProfileContacts(response.messages[0]))\r\n  }\r\n};\r\n\r\nexport default profileReducer;\r\n\r\ntype InitialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsTypes>;","import { BaseThunkType, InferActionsTypes } from '../redux-store';\r\n\r\nimport { getAuthUserDataThunk } from './auth-reducer';\r\n\r\nlet initialState = {\r\n  initialized: false,\r\n}\r\n\r\nconst appReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'INITIALIZED_SUCCESS': {\r\n      return {\r\n        ...state,\r\n        initialized: true\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst actions = {\r\n  initializedSuccess: () => ({ type: 'INITIALIZED_SUCCESS' } as const),\r\n}\r\n\r\nexport const initializeAppThunk = (): ThunkType => async (dispatch) => {\r\n  await dispatch(getAuthUserDataThunk())\r\n  dispatch(actions.initializedSuccess())\r\n}\r\n\r\nexport default appReducer;\r\n\r\ntype InitialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsTypes>;","import { applyMiddleware, combineReducers, createStore, compose, Action } from 'redux';\r\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nimport authReducer from './reducers/auth-reducer';\r\nimport messagesReducer from './reducers/messages-reducer';\r\nimport profileReducer from './reducers/profile-reducer';\r\nimport usersReducer from './reducers/users-reducer';\r\nimport appReducer from './reducers/app-reducer';\r\n\r\nlet rootReducer = combineReducers({\r\n  profilePage: profileReducer,\r\n  messagesPage: messagesReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  app: appReducer,\r\n  form: formReducer,\r\n});\r\n\r\n// types state app\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\n\r\n// types actions\r\nexport type InferActionsTypes<T> = T extends { [key: string]: (...args: any[]) => infer U } ? U : never;\r\n\r\n// type thunks\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>;\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n// @ts-ignore\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\nexport default store;\r\n\r\n","import React, { Suspense } from 'react';\r\nimport Preloader from '../common/Preloader/Preloader';\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n  return (props: WCP) => {\r\n    return <Suspense fallback={<Preloader />}>\r\n      <WrappedComponent {...props} />\r\n    </Suspense>\r\n  }\r\n}","export default __webpack_public_path__ + \"static/media/logo.cebb0f3e.svg\";","export default __webpack_public_path__ + \"static/media/logout.8e3cc1f3.svg\";","import React from 'react';\r\nimport { NavLink, Redirect } from 'react-router-dom';\r\n\r\nimport s from './Header.module.css';\r\nimport logo from '../../img/icons/logo.svg';\r\nimport logout from '../../img/icons/logout.svg';\r\nimport Button from '@material-ui/core/Button';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\n\r\nimport { MapDispatchPropsType, MapStatePropsType } from './HeaderContainer';\r\n\r\nconst Header: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n  return (\r\n    <header className={s.header}>\r\n      <NavLink className={s.logoAndTitle} to={'/profile'}>\r\n        <img src={logo} alt='logo' />\r\n        <span className={s.headerTitle}>Social network</span>\r\n      </NavLink>\r\n\r\n      <div className={s.login}>\r\n        {props.isAuth\r\n          ? <>\r\n            <span className={s.loginName}>{props.login}</span>\r\n            <span className={s.buttonDesctop}>\r\n              <Button\r\n                onClick={props.logoutThunk}\r\n                variant=\"outlined\"\r\n                style={{ margin: 16 }}\r\n                startIcon={<ExitToAppIcon />}>\r\n                Log out\r\n              </Button>\r\n            </span>\r\n            <span className={s.buttonMobile}>\r\n              <Button\r\n                onClick={props.logoutThunk}\r\n                variant=\"outlined\"\r\n                style={{ margin: 16 }}\r\n              ><img src={logout} alt=\"logout\" />\r\n              </Button>\r\n            </span>\r\n          </>\r\n          : <Redirect to=\"/login\" />\r\n        }\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from './Header';\r\nimport { connect } from 'react-redux';\r\nimport { logoutThunk } from '../../redux/reducers/auth-reducer';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { compose } from 'redux';\r\n\r\nexport type MapStatePropsType = {\r\n  isAuth: boolean\r\n  login: string | null\r\n}\r\n\r\nexport type MapDispatchPropsType = {\r\n  logoutThunk: () => void\r\n}\r\n\r\nconst HeaderContainer: React.FC<MapStatePropsType & MapDispatchPropsType> =\r\n  (props) => {\r\n    return <Header {...props} />\r\n  }\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n  }\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect<MapStatePropsType, MapDispatchPropsType, null, AppStateType>(\r\n    mapStateToProps, { logoutThunk }\r\n  ))(HeaderContainer);","import React from 'react';\r\nimport { NavLink, RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\nimport s from './Navbar.module.css';\r\n\r\ntype PathParamsType = {\r\n  pathname: string\r\n}\r\n\r\nconst Navbar: React.FC<MapStatePropsType & {} & RouteComponentProps<PathParamsType>> = (props) => {\r\n\r\n  const profileUrl = '/profile/' + props.authorizedUserID;\r\n\r\n  return (\r\n    <nav className={s.nav} id='navbar'>\r\n      <NavLink exact to={profileUrl} activeClassName={s.active} className={s.navLink}>\r\n        <svg width=\"24\" height=\"24\"\r\n          fill={props.location.pathname === profileUrl ? '#00bcd4' : 'white'}\r\n          className={s.navLinkImg}\r\n          viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12,4A4,4 0 0,1 16,8A4,4 0 0,1 12,12A4,4 0 0,1 8,8A4,4 0 0,1 12,4M12,14C16.42,14 20,15.79 20,18V20H4V18C4,15.79 7.58,14 12,14Z\" />\r\n        </svg>\r\n        Profile\r\n      </NavLink>\r\n\r\n      <NavLink to='/dialogs' activeClassName={s.active} className={s.navLink}>\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"24\" height=\"24\"\r\n          fill={props.location.pathname === '/dialogs' ? '#00bcd4' : 'white'}\r\n          className={s.navLinkImg}\r\n          viewBox=\"0 0 24 24\"><path d=\"M20,2H4A2,2 0 0,0 2,4V22L6,18H20A2,2 0 0,0 22,16V4C22,2.89 21.1,2 20,2Z\" />\r\n        </svg>\r\n        Messages\r\n      </NavLink>\r\n\r\n      <NavLink to=\"/users\" activeClassName={s.active} className={s.navLink}>\r\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\r\n          fill={props.location.pathname === '/users' ? '#00bcd4' : 'white'}\r\n          className={s.navLinkImg}>\r\n          <path d=\"M15.5,12C18,12 20,14 20,16.5C20,17.38 19.75,18.21 19.31,18.9L22.39,22L21,23.39L17.88,20.32C17.19,20.75 16.37,21 15.5,21C13,21 11,19 11,16.5C11,14 13,12 15.5,12M15.5,14A2.5,2.5 0 0,0 13,16.5A2.5,2.5 0 0,0 15.5,19A2.5,2.5 0 0,0 18,16.5A2.5,2.5 0 0,0 15.5,14M10,4A4,4 0 0,1 14,8C14,8.91 13.69,9.75 13.18,10.43C12.32,10.75 11.55,11.26 10.91,11.9L10,12A4,4 0 0,1 6,8A4,4 0 0,1 10,4M2,20V18C2,15.88 5.31,14.14 9.5,14C9.18,14.78 9,15.62 9,16.5C9,17.79 9.38,19 10,20H2Z\" />\r\n        </svg>\r\n        Find Users\r\n      </NavLink>\r\n\r\n      <NavLink to='/friends' activeClassName={s.active} className={s.navLink}>\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"24\" height=\"24\"\r\n          fill={props.location.pathname === '/friends' ? '#00bcd4' : 'white'}\r\n          className={s.navLinkImg}\r\n          viewBox=\"0 0 24 24\"><path d=\"M12,5.5A3.5,3.5 0 0,1 15.5,9A3.5,3.5 0 0,1 12,12.5A3.5,3.5 0 0,1 8.5,9A3.5,3.5 0 0,1 12,5.5M5,8C5.56,8 6.08,8.15 6.53,8.42C6.38,9.85 6.8,11.27 7.66,12.38C7.16,13.34 6.16,14 5,14A3,3 0 0,1 2,11A3,3 0 0,1 5,8M19,8A3,3 0 0,1 22,11A3,3 0 0,1 19,14C17.84,14 16.84,13.34 16.34,12.38C17.2,11.27 17.62,9.85 17.47,8.42C17.92,8.15 18.44,8 19,8M5.5,18.25C5.5,16.18 8.41,14.5 12,14.5C15.59,14.5 18.5,16.18 18.5,18.25V20H5.5V18.25M0,20V18.5C0,17.11 1.89,15.94 4.45,15.6C3.86,16.28 3.5,17.22 3.5,18.25V20H0M24,20H20.5V18.25C20.5,17.22 20.14,16.28 19.55,15.6C22.11,15.94 24,17.11 24,18.5V20Z\" />\r\n        </svg>\r\n        Friends\r\n      </NavLink>\r\n    </nav>\r\n  )\r\n}\r\n\r\ntype MapStatePropsType = {\r\n  authorizedUserID: number | null\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n  authorizedUserID: state.auth.userID,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect<MapStatePropsType, {}, RouteComponentProps<PathParamsType>, AppStateType>(\r\n    mapStateToProps, {}),\r\n  withRouter,\r\n)(Navbar)","export default __webpack_public_path__ + \"static/media/avatar_2.e0878a2c.jpg\";","import React from 'react';\r\n\r\nimport s from './Post.module.css';\r\nimport avatar from '../../../../img/avatar_2.jpg';\r\nimport unknown from './../../../../img/no_photo.svg';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt';\r\nimport { PostType } from '../../../../types/types';\r\n\r\nconst Post: React.FC<PostType> = (props) => {\r\n  return <div className={s.container}>\r\n    <div>\r\n      <div className={s.avatar}>\r\n        <img src={avatar !== null ? avatar : unknown} alt=\"avatar\" />\r\n      </div>\r\n    </div>\r\n\r\n    <div className={s.nameAndPost}>\r\n      <div className={s.name}>\r\n        Name user\r\n      </div>\r\n\r\n      <div className={s.message}>\r\n        {props.message}\r\n      </div>\r\n\r\n      <div className={s.wrapLike}>\r\n        <IconButton aria-label=\"like\" size=\"small\">\r\n          <ThumbUpAltIcon/>\r\n        </IconButton>\r\n        <span className={s.like}>{props.likesCount}</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\n\r\nimport Post from './Post/Post';\r\n\r\nimport s from './Wall.module.css';\r\nimport renderTextField from '../../common/ElementCustom/renderTextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport PostAddIcon from '@material-ui/icons/PostAdd';\r\nimport { MapDispatchPropsType, MapStatePropsType } from './WallContainer';\r\nimport { PostType } from '../../../types/types';\r\n\r\nconst Wall: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n\r\n  let postsElements = props.posts.map((p: PostType) =>\r\n    <Post key={p.id} message={p.message} likesCount={p.likesCount} />);\r\n\r\n  let handleAddPost = (values: WallValuesFormType) => {\r\n    props.addPost(values.newPostText);\r\n  }\r\n\r\n  return (\r\n    <div className={s.container}>\r\n      <PostReduxForm onSubmit={handleAddPost} />\r\n      {postsElements}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<WallValuesFormType, {}> & {}> =\r\n  (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n      <div className={s.wrapSendAndButton}>\r\n        <Field\r\n          component={renderTextField}\r\n          name='newPostText'\r\n          placeholder='Enter the post text...'\r\n          multiline={true}\r\n          fullWidth={true}\r\n          variant=\"outlined\"\r\n          inputProps={{ maxLength: 1000 }}\r\n        />\r\n        <Button\r\n          type='submit'\r\n          variant=\"contained\"\r\n          color='primary'\r\n          style={{ color: 'white', marginLeft: '10px', width: '160px' }}\r\n          endIcon={<PostAddIcon />}\r\n        >Add post</Button>\r\n      </div>\r\n    </form>\r\n  }\r\n\r\ntype WallValuesFormType = {\r\n  newPostText: string\r\n}\r\n\r\nconst PostReduxForm = reduxForm<WallValuesFormType, {}>({\r\n  form: 'profileNewPostForm'\r\n})(AddNewPostForm);\r\n\r\nexport default Wall;","import { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { actions } from '../../../redux/reducers/profile-reducer';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { PostType } from '../../../types/types';\r\nimport Wall from './Wall';\r\n\r\nexport type MapStatePropsType = {\r\n  posts: Array<PostType>\r\n}\r\n\r\nexport type MapDispatchPropsType = {\r\n  addPost: (newPostText: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n  }\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(\r\n    mapStateToProps,\r\n    {\r\n      addPost: actions.addPost\r\n    }\r\n  ))(Wall);","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  inputProfileStatus: {\r\n    minHeight: '30px',\r\n    maxHeight: '180px',\r\n    lineHeight: '25px',\r\n    padding: theme.spacing(1),\r\n    backgroundColor: '#4F4F4F', \r\n    borderRadius: '5px 5px 0 0',\r\n  },\r\n}));\r\n\r\nexport default useStyles;","// Памятка:\r\n//1. import { handleInputCount, handleFocusCount, handleBlurCount} from '../../../common/inputCount/inputCount';\r\n//2. Передать в input: \r\n      // name='...'\r\n      // onInput={handleInputCount.bind(null, num100)}\r\n      // onFocus={handleFocusCount}\r\n      // onBlur={handleBlurCount}\r\n//3. Добавить в компоненту: \r\n      //const num100 = 100;\r\n//4. Добавить в компоненту: \r\n      // <span id='statusWrapCount' className={s.countStyle}><span id='statusCount'></span> of 100</span>\r\n//5. Задать родителю span-a: \r\n      // position: relative;\r\n//6. Если нужно, чтобы не был виден счётчик при первом отображении input, применить:\r\n      // .countStyle {display: none;}\r\n\r\nexport const handleFocusCount = (e) => {\r\n  e.target.select();\r\n\r\n  document.getElementById(e.target.name + 'Count').textContent = e.target.value.length;\r\n\r\n  const elem = document.getElementById(e.target.name + 'WrapCount');\r\n  elem.style.display = 'inline-block';\r\n  elem.style.fontSize = '10px';\r\n  elem.style.position = 'absolute';\r\n  elem.style.right = '10px';\r\n  elem.style.top = 0;\r\n}\r\n\r\nexport const handleBlurCount = (e) => {\r\n  document.getElementById(e.target.name + 'WrapCount').style.display = 'none';\r\n}\r\n\r\nexport const handleInputCount = (num, e) => {\r\n  const wrap = e.target.name + 'WrapCount';\r\n  const count = e.target.name + 'Count';\r\n  const length = e.target.value.length;\r\n\r\n  if (length < num - 10) document.getElementById(wrap).style.color = 'white';\r\n  if (length >= num - 10) document.getElementById(wrap).style.color = 'yellow';\r\n  if (length === num) document.getElementById(wrap).style.color = 'red';\r\n\r\n  document.getElementById(count).textContent = e.target.value.length\r\n}","import React, { useEffect, useState } from 'react';\r\nimport s from './Status.module.css';\r\n\r\nimport { Input, Button } from '@material-ui/core';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport useStyles from '../../../common/ElementCustom/InputCustomProfileStatus';\r\nimport { handleInputCount, handleFocusCount, handleBlurCount } from '../../../common/inputCount/inputCount';\r\n\r\ntype PropsType = {\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n  isOwner: boolean\r\n}\r\n\r\nconst Status: React.FC<PropsType> = (props) => {\r\n\r\n  const classes = useStyles();\r\n\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status)\r\n  }, [props.status]);\r\n\r\n  const activateEditMode = () => setEditMode(true);\r\n  const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => setStatus(e.currentTarget.value);\r\n  const cancelEditMode = () => setEditMode(false);\r\n\r\n  const saveStatus = () => {\r\n    props.updateStatus(status);\r\n    setEditMode(false);\r\n  }\r\n\r\n  const num300 = 300;\r\n\r\n  return <div className={s.container}>\r\n    {editMode && <div className={s.wrap}>\r\n      <Input\r\n        name='status'\r\n        value={status}\r\n        placeholder={'Your status...'}\r\n        autoFocus\r\n        inputProps={{ maxLength: 300 }}\r\n        className={classes.inputProfileStatus}\r\n        multiline={true}\r\n        fullWidth={true}\r\n        onInput={handleInputCount.bind(null, num300)}\r\n        onFocus={handleFocusCount}\r\n        onBlur={handleBlurCount}\r\n        onChange={onStatusChange}\r\n      />\r\n\r\n      <div className={s.buttons}>\r\n        <div className={s.buttonWrap}>\r\n          <Button\r\n            onClick={saveStatus}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ color: '#fff', margin: 10, width: '100%' }}\r\n            startIcon={<SaveIcon />}\r\n          >Save</Button>\r\n        </div>\r\n        <div className={s.buttonWrap}>\r\n          <Button\r\n            onClick={cancelEditMode}\r\n            variant=\"outlined\"\r\n            style={{ margin: 10, width: '100%' }}\r\n            startIcon={<CloseIcon />}\r\n          >Cancel</Button>\r\n        </div>\r\n\r\n        <span id='statusWrapCount'>\r\n          <span id='statusCount'></span> of 300\r\n        </span>\r\n      </div>\r\n    </div>\r\n    }\r\n\r\n    {props.isOwner && !editMode && <div className={s.status} onClick={activateEditMode}>\r\n      {props.status ||\r\n        <span className={s.statusEmpty}>\r\n          Your status is empty\r\n        </span>\r\n      }\r\n    </div>\r\n    }\r\n\r\n    {!props.isOwner && props.status && <div className={s.statusNotMy}>\r\n      {props.status}\r\n    </div>\r\n    }\r\n  </div>\r\n}\r\n\r\nexport default Status;","import { FormControlLabel, Checkbox } from '@material-ui/core';\r\n\r\nconst renderCheckbox = ({ input, label }) => {\r\n  return <div>\r\n    <FormControlLabel\r\n      control={\r\n        <Checkbox\r\n          checked={input.value ? true : false}\r\n          onChange={input.onChange}\r\n        />}\r\n      label={label}\r\n      labelPlacement=\"start\"\r\n      style={{ marginLeft: 0 }}\r\n    />\r\n  </div>\r\n}\r\n\r\nexport default renderCheckbox;","import React from 'react';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\n\r\nimport renderTextField from '../../../common/ElementCustom/renderTextField';\r\nimport renderCheckbox from '../../../common/ElementCustom/renderCheckbox';\r\nimport { handleInputCount, handleFocusCount, handleBlurCount } from '../../../common/inputCount/inputCount';\r\nimport s from './InfoDataForm.module.css';\r\nimport cn from 'classnames';\r\n\r\nimport { ProfileType } from '../../../../types/types';\r\n\r\ntype OwnPropsType = {\r\n  errorProfileContacts: string\r\n  initialValues: ProfileType\r\n}\r\n\r\nconst DataForm: React.FC<InjectedFormProps<ProfileType, OwnPropsType> & OwnPropsType> = (props) => {\r\n  const { handleSubmit, initialValues, errorProfileContacts } = props;\r\n\r\n  const num100 = 100;\r\n  const num1000 = 1000;\r\n\r\n  return <form onSubmit={handleSubmit} className={s.form}>\r\n\r\n    <h1 className={s.titleForm}>Edit profile</h1>\r\n\r\n    <div className={cn(s.wrap, s.wrapForCount)}>\r\n      <Field\r\n        component={renderTextField}\r\n        name='fullName'\r\n        label='Name:'\r\n        placeholder='Your name'\r\n        variant=\"filled\"\r\n        fullWidth={true}\r\n        inputProps={{ maxLength: 100 }}\r\n        onInput={handleInputCount.bind(null, num100)}\r\n        onFocus={handleFocusCount}\r\n        onBlur={handleBlurCount}\r\n      />\r\n      <span id='fullNameWrapCount' className={s.countStyle}>\r\n        <span id='fullNameCount'></span> of 100\r\n      </span>\r\n    </div>\r\n\r\n    <div className={cn(s.wrap, s.wrapForCount)}>\r\n      <Field\r\n        component={renderTextField}\r\n        name='aboutMe'\r\n        label='About me:'\r\n        placeholder='Write about yourself!'\r\n        multiline={true}\r\n        fullWidth={true}\r\n        variant=\"filled\"\r\n        inputProps={{ maxLength: 1000 }}\r\n        onInput={handleInputCount.bind(null, num1000)}\r\n        onFocus={handleFocusCount}\r\n        onBlur={handleBlurCount}\r\n      />\r\n      <span id='aboutMeWrapCount' className={s.countStyle}>\r\n        <span id='aboutMeCount'></span> of 1000\r\n      </span>\r\n    </div>\r\n\r\n    <div className={s.wrap}>\r\n      <Field\r\n        component={renderCheckbox}\r\n        name='lookingForAJob'\r\n        label='Are you looking for a job?'\r\n      />\r\n    </div>\r\n\r\n    <div className={cn(s.wrap, s.wrapForCount)}>\r\n      <Field\r\n        component={renderTextField}\r\n        name='lookingForAJobDescription'\r\n        label='Professional skills:'\r\n        placeholder='What you can do?'\r\n        multiline={true}\r\n        fullWidth={true}\r\n        variant=\"filled\"\r\n        inputProps={{ maxLength: 1000 }}\r\n        onInput={handleInputCount.bind(null, num1000)}\r\n        onFocus={handleFocusCount}\r\n        onBlur={handleBlurCount}\r\n      />\r\n      <span id='lookingForAJobDescriptionWrapCount' className={s.countStyle}>\r\n        <span id='lookingForAJobDescriptionCount'></span> of 1000\r\n      </span>\r\n    </div>\r\n\r\n    <div className={s.wrap}>\r\n      <div className={s.titleAllContacts}>Contacts:</div>\r\n\r\n      <div className={s.errorProfileContacts}>\r\n        {errorProfileContacts}\r\n      </div>\r\n\r\n      {Object.keys(initialValues.contacts).map(key => {\r\n        return <div className={s.contacts} key={key}>\r\n          <div className={s.titleContact}>{key}:</div>\r\n          <Field\r\n            component={renderTextField}\r\n            name={'contacts.' + key}\r\n          />\r\n        </div>\r\n      })}\r\n    </div>\r\n  </form>\r\n}\r\n\r\nconst InfoDataForm = reduxForm<ProfileType, OwnPropsType>({\r\n  form: 'editProfile',\r\n})(DataForm);\r\n\r\nexport default InfoDataForm;","import React from 'react';\r\nimport { ProfileType, СontactsType } from '../../../../types/types';\r\nimport s from './InfoData.module.css';\r\n\r\ntype PropsType = {\r\n  profile: ProfileType\r\n}\r\n\r\nconst InfoData: React.FC<PropsType> = ({ profile }) => {\r\n  return <div className={s.containerForm}>\r\n\r\n    <div className={s.wrap}>\r\n      {profile.aboutMe && <div className={s.aboutMe}>\r\n        <div className={s.title}>About me:</div>\r\n        <div className={s.text}>{profile.aboutMe}</div>\r\n      </div>\r\n      }\r\n    </div>\r\n\r\n    <div className={s.wrap}>\r\n      <div className={s.job}>\r\n        <div className={s.title}>Job search:</div>\r\n        {profile.lookingForAJob\r\n          ? <div className={s.text}>Now looking for a job!</div>\r\n          : <div className={s.text}>I'm not looking for a job</div>}\r\n      </div>\r\n    </div>\r\n\r\n    <div className={s.wrap}>\r\n      {profile.lookingForAJobDescription && <div className={s.job}>\r\n        <div className={s.title}>Professional skills:</div>\r\n        <div className={s.text}>{profile.lookingForAJobDescription}</div>\r\n      </div>\r\n      }\r\n    </div>\r\n\r\n    <div className={s.wrap}>\r\n      {Object.values(profile.contacts).some(el => el && el !== '')\r\n        && <div className={s.contacts}>\r\n          <div className={s.title}>My contacts</div>\r\n          {Object.keys(profile.contacts).map(key => {\r\n            return <Contact\r\n              key={key}\r\n              contactTitle={key}\r\n              contactValue={profile.contacts[key as keyof СontactsType]} />\r\n          })}\r\n        </div>\r\n      }\r\n    </div>\r\n  </div >\r\n}\r\n\r\ntype ContactPropsType = {\r\n  contactTitle: string\r\n  contactValue: string\r\n}\r\n\r\nconst Contact: React.FC<ContactPropsType> = ({ contactTitle, contactValue }) => {\r\n  return (<>\r\n    {contactValue\r\n      && <div className={s.contact}>\r\n        <span className={s.contactTitle}>{contactTitle}:</span>\r\n        <div className={s.contactTextWrap}>\r\n          <a className={s.contactText} href={contactValue}>{contactValue}</a>\r\n        </div>\r\n      </div>}\r\n  </>\r\n  )\r\n}\r\n\r\nexport default InfoData;","export default __webpack_public_path__ + \"static/media/camera.12909c41.svg\";","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { submit } from 'redux-form';\r\n\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport Status from './Status/Status';\r\nimport InfoDataForm from './InfoDataForm/InfoDataForm';\r\nimport InfoData from './InfoData/InfoData';\r\n\r\nimport camera from '../../../img/icons/camera.svg';\r\nimport unknown from '../../../img/no_photo.svg';\r\nimport s from './InfoContainer.module.css';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { ProfileType } from '../../../types/types';\r\n\r\n// при переходе на старницу профиля скрол обнулится\r\nfunction ScrollToTopOnMount() {\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n  return null;\r\n}\r\n\r\ntype MapStatePropsType = {\r\n  profile: ProfileType | null\r\n  status: string\r\n  showSuccessSave: string\r\n  errorProfileContacts: string\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n  dispatch: any\r\n  updateStatus: (status: string) => void\r\n  savePhotoThunk: (file: File) => void\r\n  saveProfileThunk: (profile: ProfileType) => void\r\n}\r\n\r\ntype OwnPropsType = {\r\n  isOwner: boolean\r\n}\r\n\r\nconst ProfileInfo: React.FC<MapStatePropsType & MapDispatchPropsType & OwnPropsType> = ({ dispatch, ...props }) => {\r\n\r\n  const [editModeProfile, seteditModeProfile] = useState(false);\r\n\r\n  if (!props.profile) {\r\n    return <Preloader />\r\n  }\r\n\r\n  const onSubmit = (values: ProfileType) => {\r\n    props.saveProfileThunk(values)\r\n  }\r\n\r\n  const onMainPhotoSelected = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files?.length) {\r\n      props.savePhotoThunk(e.target.files[0])\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={s.containerMain}>\r\n\r\n      {/* при переходе на старницу профиля скрол обнулится */}\r\n      <ScrollToTopOnMount />\r\n\r\n      <div className={s.columnLeft}>\r\n        <div className={s.avatarWrap}>\r\n          <div className={s.avatar}>\r\n            <img src={props.profile.photos.large || unknown} alt=\"avatar\" />\r\n            {props.isOwner && !editModeProfile &&\r\n              <div className={s.camera}>\r\n                <label htmlFor=\"file_out\">\r\n                  <div className={s.wrapImg}>\r\n                    <img src={camera} alt=\"icon\" />\r\n                  </div>\r\n                </label>\r\n                <input\r\n                  id=\"file_out\"\r\n                  className={s.editPhotoInput}\r\n                  type=\"file\"\r\n                  onChange={onMainPhotoSelected} />\r\n              </div>\r\n            }\r\n          </div>\r\n        </div>\r\n\r\n        {props.isOwner && !editModeProfile\r\n          && <Button\r\n            onClick={() => seteditModeProfile(true)}\r\n            variant=\"outlined\"\r\n            style={{ fontSize: 12, marginTop: 10 }}\r\n            startIcon={<EditIcon style={{ fontSize: 16 }} />}\r\n          >Edit profile</Button>\r\n        }\r\n\r\n        {editModeProfile && <div className={s.buttonsSaveAndCancelProfile}>\r\n          <Button\r\n            onClick={() => dispatch(submit('editProfile'))}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            fullWidth={true}\r\n            style={{ fontSize: 12, color: '#fff', margin: 10 }}\r\n            startIcon={<SaveIcon />}\r\n          >Save</Button>\r\n          <Button\r\n            onClick={() => seteditModeProfile(false)}\r\n            variant=\"outlined\"\r\n            fullWidth={true}\r\n            style={{ fontSize: 12, color: '#fff', margin: 10 }}\r\n            startIcon={<CloseIcon />}\r\n          >Cancel</Button>\r\n        </div>}\r\n\r\n        {editModeProfile && props.showSuccessSave &&\r\n          <div className={s.successSave}>\r\n            {props.showSuccessSave}\r\n          </div>\r\n        }\r\n      </div>\r\n\r\n\r\n      <div className={s.columnRight}>\r\n\r\n        {!editModeProfile && <div className={s.fullName}>{props.profile.fullName}</div>}\r\n\r\n        {!editModeProfile && <Status\r\n          status={props.status}\r\n          updateStatus={props.updateStatus}\r\n          isOwner={props.isOwner} />\r\n        }\r\n\r\n        {editModeProfile\r\n          ? <InfoDataForm\r\n            initialValues={props.profile}\r\n            errorProfileContacts={props.errorProfileContacts}\r\n            onSubmit={onSubmit}\r\n          />\r\n          : <InfoData profile={props.profile} />}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst InfoContainer = connect()(ProfileInfo);\r\n\r\nexport default InfoContainer;\r\n\r\n// MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType","import React from 'react';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router';\r\n\r\nimport withAuthRedirect from '../hoc/withAuthRedirect';\r\n\r\nimport { getUserProfile, getStatus, updateStatus, savePhotoThunk, saveProfileThunk } from '../../redux/reducers/profile-reducer';\r\n\r\nimport WallContainer from './Wall/WallContainer';\r\nimport InfoContainer from './Info/InfoContainer';\r\nimport { ProfileType } from '../../types/types';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\n\r\ntype MapStatePropsType = {\r\n  authorizedUserID: number | null\r\n\r\n  profile: ProfileType | null\r\n  status: string\r\n  showSuccessSave: string\r\n  errorProfileContacts: string\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n  getUserProfile: (userId: number) => void\r\n  getStatus: (userId: number) => void\r\n\r\n  updateStatus: (status: string) => void\r\n  savePhotoThunk: (file: File) => void\r\n  saveProfileThunk: (profile: ProfileType) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n  userId: string\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends React.PureComponent<PropsType> {\r\n  refreshProfile() {\r\n\r\n    let userId: number | null = +this.props.match.params.userId;\r\n\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserID;\r\n      if (!userId) {\r\n        this.props.history.push('/login')\r\n      }\r\n    }\r\n\r\n    this.props.getUserProfile(userId as number);\r\n    this.props.getStatus(userId as number);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile()\r\n  }\r\n  componentDidUpdate(prevProps: PropsType) {\r\n    // рендер при переходе с одной страницы на другую\r\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n      this.refreshProfile()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <>\r\n      <InfoContainer\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        showSuccessSave={this.props.showSuccessSave}\r\n        errorProfileContacts={this.props.errorProfileContacts}\r\n\r\n        isOwner={+this.props.match.params.userId === this.props.authorizedUserID}\r\n\r\n        updateStatus={this.props.updateStatus}\r\n        savePhotoThunk={this.props.savePhotoThunk}\r\n        saveProfileThunk={this.props.saveProfileThunk}\r\n      />\r\n      <WallContainer />\r\n    </>\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserID: state.auth.userID,\r\n    showSuccessSave: state.profilePage.showSuccessSave,\r\n    errorProfileContacts: state.profilePage.errorProfileContacts,\r\n  }\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect<MapStatePropsType, MapDispatchPropsType, RouteComponentProps<PathParamsType>, AppStateType>(\r\n    mapStateToProps,\r\n    {\r\n      getUserProfile,\r\n      getStatus,\r\n      updateStatus,\r\n      savePhotoThunk,\r\n      saveProfileThunk,\r\n    }\r\n  ),\r\n  withRouter,\r\n  withAuthRedirect\r\n)(ProfileContainer)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\n\r\nimport { loginThunk } from '../../redux/reducers/auth-reducer';\r\nimport s from './Login.module.css';\r\nimport cn from 'classnames';\r\n\r\nimport renderTextField from '../common/ElementCustom/renderTextField';\r\nimport renderCheckbox from '../common/ElementCustom/renderCheckbox';\r\nimport Button from '@material-ui/core/Button';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { compose } from 'redux';\r\n\r\nconst validate = (values: LoginFormValuesType) => {\r\n\r\n  type ErrorsType = {\r\n    email?: string\r\n    password?: string\r\n    captcha?: string\r\n  }\r\n\r\n  const errors: ErrorsType = {}\r\n  const requiredFields = [\r\n    'email',\r\n    'password',\r\n    'captcha'\r\n  ]\r\n\r\n  requiredFields.forEach(field => {\r\n    if (!values[field as keyof LoginFormValuesType]) {\r\n      errors[field as keyof ErrorsType] = 'Required'\r\n    }\r\n  })\r\n\r\n  if (values.email\r\n    && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n    errors.email = 'Invalid email address'\r\n  }\r\n\r\n  return errors\r\n}\r\n\r\n\r\n\r\n\r\ntype MapStatePropsType = {\r\n  captchaURL: string | null\r\n  isAuth: boolean\r\n  userID: number | null\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n  loginThunk: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\ntype OwnPropsType = {\r\n  captchaURL: string | null\r\n}\r\n\r\ntype LoginFormValuesType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n  captcha: string\r\n}\r\n\r\n\r\n\r\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n\r\n  const onSubmit = (values: LoginFormValuesType) => {\r\n    props.loginThunk(\r\n      values.email, values.password, values.rememberMe, values.captcha)\r\n  }\r\n\r\n  if (props.isAuth) {\r\n    return <Redirect to={`/profile/${props.userID}`} />\r\n  }\r\n\r\n  return <div className={s.wrap}>\r\n    <div className={s.body}>\r\n      <h1>Log in</h1>\r\n      <LoginReduxForm\r\n        onSubmit={onSubmit}\r\n        captchaURL={props.captchaURL} />\r\n    </div>\r\n  </div>\r\n}\r\n\r\n\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, OwnPropsType> & OwnPropsType> = ({ handleSubmit, error, captchaURL }) => {\r\n  return <>\r\n    <form onSubmit={handleSubmit}>\r\n      <div className={s.row}>\r\n        <Field\r\n          component={renderTextField}\r\n          name='email'\r\n          label='Email:'\r\n          type=\"email\"\r\n          fullWidth={true}\r\n        />\r\n      </div>\r\n      <div className={s.row}>\r\n        <Field\r\n          component={renderTextField}\r\n          name='password'\r\n          label='Password:'\r\n          type=\"password\"\r\n          fullWidth={true}\r\n        />\r\n      </div>\r\n      <div className={cn(s.row, s.rowCheckbox)}>\r\n        <Field\r\n          component={renderCheckbox}\r\n          name='rememberMe'\r\n          label='Remember me'\r\n        />\r\n      </div>\r\n\r\n      {captchaURL && <img src={captchaURL} alt='captcha' />}\r\n      {captchaURL &&\r\n        <Field\r\n          component={renderTextField}\r\n          fullWidth={true}\r\n          name='captcha' />\r\n      }\r\n\r\n      <div className={s.row}>\r\n        <Button\r\n          type='submit'\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          style={{ width: '100%', fontSize: 16, fontWeight: 'bold', color: '#fff' }}\r\n        >Log in</Button>\r\n\r\n        {error &&\r\n          <div className={s.formError}>\r\n            {error}\r\n          </div>\r\n        }\r\n      </div>\r\n    </form>\r\n  </>\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, OwnPropsType>({\r\n  form: 'loginForm',\r\n  validate,\r\n})(LoginForm);\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n  captchaURL: state.auth.captchaURL,\r\n  isAuth: state.auth.isAuth,\r\n  userID: state.auth.userID,\r\n});\r\n\r\nexport default compose<React.ComponentType>(connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(\r\n  mapStateToProps, {loginThunk}\r\n), )(Login);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\n\r\nimport { getFriends, follow, unfollow } from '../../redux/reducers/users-reducer';\r\n\r\nimport s from '../Users/Users.module.css';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport User from '../Users/User/User';\r\nimport Search from '../Users/Search/Search';\r\n\r\nimport { UserType } from '../../types/types';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport withAuthRedirect from '../hoc/withAuthRedirect';\r\n\r\ntype MapStatePropsType = {\r\n  isFetching: boolean\r\n  pageSize: number\r\n  totalUsersCount: number\r\n  authorizedUserID: number | null\r\n  followingInProgress: Array<number>\r\n  friends: Array<UserType>\r\n  users: Array<UserType>\r\n}\r\ntype MapDispatchPropsType = {\r\n  getFriends: (pageNumber: number, pageSize: number, term: string, friend: boolean) => void\r\n  unfollow: (id: number) => void\r\n  follow: (id: number) => void\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nconst FriendsContainer: React.FC<PropsType> = ({ users, getFriends, ...props }) => {\r\n  React.useEffect(() => getFriends(1, 100, '', true), [getFriends, users])\r\n\r\n  const searchFriends = (pageNumber: number, term: string) => {\r\n    getFriends(pageNumber, props.pageSize, term, true);\r\n  }\r\n\r\n  return <div className={s.wrapper}>\r\n    {props.isFetching ? <Preloader /> : null}\r\n\r\n    <Search\r\n      onPageChanged={searchFriends}\r\n      totalUsersCount={props.totalUsersCount}\r\n    />\r\n\r\n    {\r\n      props.totalUsersCount === 0 &&\r\n      <div className={s.nothingFound}>Nothing found</div>\r\n    }\r\n\r\n    <div className={s.container}>\r\n      {props.friends.map(u =>\r\n        <div key={u.id} className={s.user}>\r\n          <User\r\n            id={u.id}\r\n            photo={u.photos.small}\r\n            name={u.name}\r\n            status={u.status}\r\n            followed={u.followed}\r\n            unfollow={props.unfollow}\r\n            follow={props.follow}\r\n            followingInProgress={props.followingInProgress}\r\n            authorizedUserID={props.authorizedUserID}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  </div>\r\n}\r\n\r\nconst mapDispatchToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    isFetching: state.usersPage.isFetching,\r\n    friends: state.usersPage.friends,\r\n    users: state.usersPage.users,\r\n    totalUsersCount: state.usersPage.totalUsersCount,\r\n    pageSize: state.usersPage.pageSize,\r\n    authorizedUserID: state.auth.userID,\r\n    followingInProgress: state.usersPage.followingInProgress,\r\n  }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect<MapStatePropsType, MapDispatchPropsType, null, AppStateType>(\r\n    mapDispatchToProps,\r\n    {\r\n      getFriends,\r\n      follow,\r\n      unfollow,\r\n    }\r\n  ),\r\n  withAuthRedirect\r\n)(FriendsContainer)\r\n","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { error: null };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    return { error: error };\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return (\r\n        <div>\r\n          <h2>Something went wrong</h2>\r\n          <details style={{ whiteSpace: 'pre-wrap' }}>\r\n            {this.state.error?.toString()}\r\n          </details>\r\n        </div>\r\n      );\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport { Route, withRouter, Switch, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\n\r\nimport { AppStateType } from './redux/redux-store';\r\nimport { initializeAppThunk } from './redux/reducers/app-reducer';\r\n\r\nimport Preloader from './components/common/Preloader/Preloader';\r\nimport { withSuspense } from './components/hoc/withSuspense';\r\n\r\nimport s from './App.module.css';\r\n\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport ProfileContainer from './components/Profile/ProfileContainer';\r\nimport Login from './components/Login/Login';\r\nimport FriendsContainer from './components/Friends/Friends';\r\nimport ErrorBoundary from './components/Error/ErrorBoundary';\r\n\r\nconst DialogsContainer = React.lazy(\r\n  () => import('./components/Dialogs/DialogsContainer'));\r\nconst UsersContainer = React.lazy(\r\n  () => import('./components/Users/UsersContainer'));\r\n\r\nconst SuspendedDialogs = withSuspense(DialogsContainer);\r\nconst SuspendedUsers = withSuspense(UsersContainer);\r\n\r\nconst App: React.FC<MapStatePropsType & MapDispatchPropsType> = (\r\n  {initializeAppThunk, ...props}) => {\r\n\r\n  React.useEffect(() => initializeAppThunk(), [initializeAppThunk]);\r\n\r\n  if (!props.initialized) {\r\n    return <Preloader />\r\n  }\r\n\r\n  return (\r\n    <div className={s.fon}>\r\n      <div className={s.container}>\r\n        <div className={s.appWrapper}>\r\n\r\n          <HeaderContainer />\r\n          <Navbar />\r\n\r\n          <div className={s.appWrapperContent}>\r\n            <ErrorBoundary>\r\n              <Switch>\r\n                <Redirect from='/profile/undefined' to=\"/\" />\r\n\r\n                <Route path='/dialogs'\r\n                  render={() => <SuspendedDialogs />} />\r\n\r\n                <Route path='/profile/:userId'\r\n                  render={() => <ProfileContainer />} />\r\n\r\n                <Route path='/users'\r\n                  render={() => <SuspendedUsers />} />\r\n\r\n                <Route path='/friends'\r\n                  render={() => <FriendsContainer />} />\r\n\r\n                <Route path='/login'\r\n                  render={() => <Login />} />\r\n\r\n                <Redirect exact from=\"/\" to={'/profile/' + props.userID} />\r\n\r\n                <Redirect from='*' to=\"/\" />\r\n              </Switch>\r\n            </ErrorBoundary>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  initialized: state.app.initialized,\r\n  userID: state.auth.userID,\r\n});\r\n\r\nconst AppContainer = compose(\r\n  withRouter,\r\n  connect(mapStateToProps, {\r\n    initializeAppThunk,\r\n  })\r\n)(App)\r\n\r\nexport default AppContainer;\r\n \r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>;\r\ntype MapDispatchPropsType = { initializeAppThunk: () => void }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport store from './redux/redux-store';\r\n\r\nimport AppContainer from './App';\r\n\r\nimport { createMuiTheme, ThemeProvider, responsiveFontSizes } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport cyan from '@material-ui/core/colors/cyan';\r\n\r\nlet theme = createMuiTheme({\r\n  palette: {\r\n    type: 'dark', // светлый текст\r\n    primary: {\r\n      main: cyan[600], // #00bcd4\r\n      // синий цвет (кнопки, активные ссылки в навигации, декоративные линии)\r\n    },\r\n    secondary: {\r\n      main: '#919191',\r\n      // фон светлее общего (hover и текст в profileForm)\r\n\r\n      // #4F4F4F\r\n      // общий фон\r\n\r\n      // #5E5E5E\r\n      // средний серый (фон статуса при редактировании)\r\n    },\r\n  },\r\n});\r\n\r\ntheme = responsiveFontSizes(theme);\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <ThemeProvider theme={theme}>\r\n      <Provider store={store}>\r\n        <CssBaseline />\r\n        <AppContainer />\r\n      </Provider>\r\n    </ThemeProvider>\r\n  </HashRouter>, document.getElementById('root')\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"InfoContainer_avatar__CcdyI\",\"avatarWrap\":\"InfoContainer_avatarWrap__1SEZU\",\"camera\":\"InfoContainer_camera__IpD6r\",\"wrapImg\":\"InfoContainer_wrapImg__10vd-\",\"editPhotoInput\":\"InfoContainer_editPhotoInput__XccDx\",\"containerMain\":\"InfoContainer_containerMain__3Xio4\",\"columnLeft\":\"InfoContainer_columnLeft__1_kJ8\",\"columnRight\":\"InfoContainer_columnRight__2qyh0\",\"iconButtonEditProfile\":\"InfoContainer_iconButtonEditProfile__26Jz-\",\"fullName\":\"InfoContainer_fullName__7Hk3o\",\"buttonsSaveAndCancelProfile\":\"InfoContainer_buttonsSaveAndCancelProfile__1uVyp\",\"successSave\":\"InfoContainer_successSave__23-f5\",\"anim\":\"InfoContainer_anim__QEFY8\"};","import { TextField } from '@material-ui/core';\r\n\r\nconst renderTextField = (props) => {\r\n  const { label, input, placeholder, multiline, variant, inputProps, onInput, onFocus, meta: { touched, error, warning }, fullWidth, ...custom } = props;\r\n\r\n  return <>\r\n    <TextField\r\n      label={label}\r\n      placeholder={placeholder}\r\n      inputProps={inputProps}\r\n      onInput={onInput}\r\n      onFocus={onFocus}\r\n      variant={variant}\r\n      multiline={multiline}\r\n      fullWidth={fullWidth}\r\n      {...input}\r\n      {...custom}\r\n    />\r\n    {\r\n      touched && (\r\n        (error &&\r\n          <span style={{ color: 'red' }}>{error}</span>)\r\n        || (warning && <span>{warning}</span>)\r\n      )\r\n    }\r\n  </>\r\n}\r\n\r\nexport default renderTextField;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapAvatarNameAndStatus\":\"User_wrapAvatarNameAndStatus__8Hk7D\",\"avatar\":\"User_avatar__2oDgd\",\"nameAndStatus\":\"User_nameAndStatus__3sPsM\",\"name\":\"User_name__lmqfs\",\"status\":\"User_status__2tKNY\",\"button\":\"User_button__2Jj9r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Status_container__BDZoe\",\"wrap\":\"Status_wrap__1mMIC\",\"buttons\":\"Status_buttons__KMxYA\",\"buttonWrap\":\"Status_buttonWrap__3yn6L\",\"status\":\"Status_status__27mFj\",\"statusNotMy\":\"Status_statusNotMy__3afoa\",\"statusEmpty\":\"Status_statusEmpty__1-cAn\",\"buttonSave\":\"Status_buttonSave__2MrEy\",\"buttonCancel\":\"Status_buttonCancel__10fUe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Login_wrap__18LVK\",\"body\":\"Login_body__2Hhs9\",\"row\":\"Login_row__3d41Y\",\"rowCheckbox\":\"Login_rowCheckbox__4sYwU\",\"formError\":\"Login_formError__3j1Nj\"};","export default __webpack_public_path__ + \"static/media/preloader.a2993579.svg\";","import React from 'react';\r\nimport preloader from '../../../img/preloader.svg';\r\n\r\nconst Preloader = () => {\r\n  return <div style={{ position: 'absolute', left: 'calc(50% - 85px)' }}>\r\n    <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n      <img src={preloader} alt='preloader' />\r\n    </div>\r\n  </div>\r\n\r\n};\r\n\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3vTSi\",\"logoAndTitle\":\"Header_logoAndTitle__1mTjG\",\"headerTitle\":\"Header_headerTitle__2wZ_g\",\"login\":\"Header_login__1LiSF\",\"loginName\":\"Header_loginName__3CaV_\",\"logoutImg\":\"Header_logoutImg__1QW2c\",\"buttonMobile\":\"Header_buttonMobile__3V8e5\",\"buttonDesctop\":\"Header_buttonDesctop__38OBn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Post_container__3VKFd\",\"avatar\":\"Post_avatar__Z9tVC\",\"nameAndPost\":\"Post_nameAndPost__14k_q\",\"name\":\"Post_name__UCrHi\",\"message\":\"Post_message__1vD2I\",\"wrapLike\":\"Post_wrapLike__1qVOH\",\"like\":\"Post_like__30Txn\"};","import { UserType } from '../types/types';\r\nimport { DefaultResponseType, instance } from './api';\r\n\r\ntype GetUsersType = {\r\n  items: Array<UserType>\r\n  totalCount: number\r\n  error: string\r\n}\r\n\r\nexport const usersAPI = {\r\n  async getUsers(currentPage: number, pageSize: number, term?: string, friend?: boolean) {\r\n    const response = await instance.get<GetUsersType>(\r\n      `users?page=${currentPage}&count=${pageSize}&term=${term}&friend=${friend}`\r\n    );\r\n    return response.data;\r\n  },\r\n  followUser(id: number) {\r\n    return instance.post<DefaultResponseType>(`follow/${id}`, {})\r\n  },\r\n  unfollowUser(id: number) {\r\n    return instance.delete<DefaultResponseType>(`follow/${id}`)\r\n  },\r\n}","import { Dispatch } from 'redux';\r\nimport { ResultCodesEnum } from '../../api/api';\r\nimport { usersAPI } from '../../api/users-api';\r\nimport { UserType } from '../../types/types';\r\nimport { BaseThunkType, InferActionsTypes } from '../redux-store';\r\n\r\nlet initialState = {\r\n  users: [] as Array<UserType>,\r\n  friends: [] as Array<UserType>,\r\n  foundUsers: [] as Array<UserType>,\r\n\r\n  pageSize: 50,\r\n  totalUsersCount: 0,\r\n  currentPage: 1,\r\n\r\n  isFetching: true,\r\n  // disabling the button after pressing\r\n  followingInProgress: [] as Array<number>, // array of users ID\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'FOLLOW': {\r\n      return {\r\n        ...state,\r\n        users: state.users.map(u => {\r\n          if (u.id === action.userID) {\r\n            return { ...u, followed: true }\r\n          }\r\n          return u\r\n        })\r\n      }\r\n    }\r\n    case 'UNFOLLOW': {\r\n      return {\r\n        ...state,\r\n        users: state.users.map(u => {\r\n          if (u.id === action.userID) {\r\n            return { ...u, followed: false }\r\n          }\r\n          return u\r\n        })\r\n      }\r\n    }\r\n    case 'SET_USERS': {\r\n      return {\r\n        ...state,\r\n        users: [...state.users, ...action.users],\r\n        foundUsers: []\r\n      }\r\n    }\r\n    case 'CLEAR_USERS': {\r\n      return {\r\n        ...state,\r\n        users: []\r\n      }\r\n    }\r\n    case 'SET_FRIENDS': {\r\n      return {\r\n        ...state,\r\n        friends: action.friends\r\n      }\r\n    }\r\n    case 'SET_FOUND_USERS': {\r\n      return {\r\n        ...state,\r\n        users: [],\r\n        foundUsers: action.foundUsers\r\n      }\r\n    }\r\n    case 'SET_CURRENT_PAGE': {\r\n      return {\r\n        ...state,\r\n        currentPage: action.currentPage,\r\n      }\r\n    }\r\n    case 'SET_TOTAL_USERS_COUNT': {\r\n      return {\r\n        ...state,\r\n        totalUsersCount: action.count,\r\n      }\r\n    }\r\n    case 'TOGGLE_IS_FETCHING': {\r\n      return {\r\n        ...state,\r\n        isFetching: action.isFetching,\r\n      }\r\n    }\r\n    case 'TOGGLE_IS_FOLLOWING_PROGRESS': {\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.isFetching\r\n          ? [...state.followingInProgress, action.userID]\r\n          : state.followingInProgress.filter(id => id !== action.userID),\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  followSuccess: (userID: number) => ({ type: 'FOLLOW', userID } as const),\r\n  unfollowSuccess: (userID: number) => ({ type: 'UNFOLLOW', userID } as const),\r\n\r\n  setUsers: (users: Array<UserType>) => ({ type: 'SET_USERS', users } as const),\r\n  setFriends: (friends: Array<UserType>) => ({ type: 'SET_FRIENDS', friends } as const),\r\n  setFoundUsers: (foundUsers: Array<UserType>) => ({ type: 'SET_FOUND_USERS', foundUsers } as const),\r\n\r\n  setTotalUsersCount: (totalUsersCount: number) => ({ \r\n    type: 'SET_TOTAL_USERS_COUNT', count: totalUsersCount } as const),\r\n  clearUsers: () => ({ type: 'CLEAR_USERS' } as const),\r\n  setCurrentPage: (currentPage: number) => ({ type: 'SET_CURRENT_PAGE', currentPage } as const),\r\n  toggleIsFetching: (isFetching: boolean) => ({ type: 'TOGGLE_IS_FETCHING', isFetching } as const),\r\n  toggleFollowingProgress: (isFetching: boolean, userID: number) => ({ \r\n    type: 'TOGGLE_IS_FOLLOWING_PROGRESS', isFetching, userID } as const),\r\n}\r\n\r\nexport const getUsers = (page: number, pageSize: number, term: string):\r\n  ThunkType => async (dispatch) => {\r\n    dispatch(actions.toggleIsFetching(true));\r\n\r\n    const response = await usersAPI.getUsers(page, pageSize, term);\r\n    dispatch(actions.setUsers(response.items));\r\n    dispatch(actions.setTotalUsersCount(response.totalCount));\r\n\r\n    dispatch(actions.toggleIsFetching(false));\r\n  }\r\n\r\nexport const getFoundUsers = (page: number, pageSize: number, term: string):\r\n  ThunkType => async (dispatch) => {\r\n    dispatch(actions.toggleIsFetching(true));\r\n\r\n    const response = await usersAPI.getUsers(page, pageSize, term);\r\n    dispatch(actions.clearUsers());\r\n    dispatch(actions.setFoundUsers(response.items));\r\n    dispatch(actions.setTotalUsersCount(response.totalCount));\r\n\r\n    dispatch(actions.toggleIsFetching(false));\r\n  }\r\n\r\nexport const getFriends = (page: number, pageSize: number, term: string, friend = true):\r\n  ThunkType => async (dispatch) => {\r\n    dispatch(actions.toggleIsFetching(true));\r\n\r\n    const response = await usersAPI.getUsers(page, pageSize, term, friend);\r\n    dispatch(actions.setFriends(response.items));\r\n    dispatch(actions.setTotalUsersCount(response.totalCount));\r\n\r\n    dispatch(actions.toggleIsFetching(false));\r\n  }\r\n\r\ntype DispatchType = Dispatch<ActionsTypes>;\r\nconst _followUnfollowFlow = async (\r\n  dispatch: DispatchType,\r\n  id: number,\r\n  apiMethod: any,\r\n  actionCreator: (id: number) => ActionsTypes) => {\r\n    \r\n  dispatch(actions.toggleFollowingProgress(true, id));\r\n  const response = await apiMethod(id);\r\n\r\n  if (response.data.resultCode === ResultCodesEnum.Success) {\r\n    dispatch(actionCreator(id))\r\n  }\r\n  dispatch(actions.toggleFollowingProgress(false, id));\r\n}\r\n\r\nexport const follow = (id: number): ThunkType => async (dispatch: any) => {\r\n  _followUnfollowFlow(dispatch, id,\r\n    usersAPI.followUser.bind(usersAPI), actions.followSuccess)\r\n}\r\n\r\nexport const unfollow = (id: number): ThunkType => async (dispatch: any) => {\r\n  _followUnfollowFlow(dispatch, id,\r\n    usersAPI.unfollowUser.bind(usersAPI), actions.unfollowSuccess)\r\n}\r\n\r\nexport default usersReducer;\r\n\r\ntype InitialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsTypes>;","export default __webpack_public_path__ + \"static/media/no_photo.8bf0768a.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Users_wrapper__3Yevw\",\"nothingFound\":\"Users_nothingFound__2cse7\",\"container\":\"Users_container__gMpcS\",\"user\":\"Users_user__AVhKe\",\"buttonLoadMore\":\"Users_buttonLoadMore__1kZ2C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fon\":\"App_fon__Rn3Sm\",\"container\":\"App_container__2T05O\",\"appWrapper\":\"App_appWrapper__1hlCE\",\"appWrapperContent\":\"App_appWrapperContent__1C2YH\"};"],"sourceRoot":""}