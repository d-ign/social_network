{"version":3,"sources":["components/Dialogs/Dialogs.module.css","../node_modules/@material-ui/icons/Send.js","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","value","default","React","_default","createElement","d","DialogItem","props","path","id","className","s","active","to","style","color","name","Message","message","overflowWrap","width","marginBottom","text","DialogsReduxForm","reduxForm","form","handleSubmit","onSubmit","wrapSendAndButton","Field","component","renderTextField","placeholder","multiline","fullWidth","variant","inputProps","maxLength","Button","type","marginLeft","endIcon","Dialogs","dialogsElements","dialogs","map","messagesElements","messages","m","containerMain","container","items","values","sendMessage","newMessageText","compose","connect","state","messagesPage","actions","withAuthRedirect"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,UAAY,2BAA2B,MAAQ,uBAAuB,QAAU,yBAAyB,QAAU,yBAAyB,kBAAoB,qC,iCCClL,IAAIC,EAAyBC,EAAQ,IAEjCC,EAA0BD,EAAQ,IAEtCE,OAAOC,eAAeL,EAAS,aAAc,CAC3CM,OAAO,IAETN,EAAQO,aAAU,EAElB,IAAIC,EAAQL,EAAwBD,EAAQ,IAIxCO,GAAW,EAFMR,EAAuBC,EAAQ,KAElBK,SAAuBC,EAAME,cAAc,OAAQ,CACnFC,EAAG,0CACD,QAEJX,EAAQO,QAAUE,G,wICDHG,EATyB,SAACC,GACvC,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACE,cAAC,IAAD,CAASC,UAAWC,IAAEC,OAAQC,GAAIL,EAAMM,MAAO,CAACC,MAAO,SAAvD,SACCR,EAAMS,QCCIC,EAPsB,SAACV,GACpC,OAAO,qBAAKG,UAAWC,IAAEO,QACvBJ,MAAO,CAAEK,aAAc,aAAcC,MAAO,QAASC,aAAc,IAD9D,SAEJd,EAAMe,Q,mCCyDLC,EAAmBC,YAAgC,CACvDC,KAAM,wBADiBD,EA5BkD,SAAC,GACpD,IAApBE,EAAmB,EAAnBA,aACF,OAAO,sBAAMC,SAAUD,EAAhB,SACL,sBAAKhB,UAAWC,IAAEiB,kBAAlB,UACE,cAACC,EAAA,EAAD,CACEC,UAAWC,IACXf,KAAK,iBACLgB,YAAY,wBACZC,WAAW,EACXC,WAAW,EACXC,QAAQ,WACRC,WAAY,CAAEC,UAAW,OAE3B,cAACC,EAAA,EAAD,CACEC,KAAK,SACLJ,QAAQ,YACRpB,MAAM,UACND,MAAO,CAAEC,MAAO,QAASyB,WAAY,QACrCC,QAAS,cAAC,IAAD,IALX,0BAmBSC,EA1DqD,SAACnC,GAEnE,IAAIoC,EAAkBpC,EAAMqC,QAAQC,KAAI,SAAAxC,GAAC,OACvC,cAAC,EAAD,CAAuBW,KAAMX,EAAEW,KAAMP,GAAIJ,EAAEI,IAA1BJ,EAAEI,OACjBqC,EAAmBvC,EAAMwC,SAASF,KAAI,SAAAG,GAAC,OACzC,cAAC,EAAD,CAAoB1B,KAAM0B,EAAE9B,SAAd8B,EAAEvC,OAMlB,OAAO,qBAAKC,UAAWC,IAAEsC,cAAlB,SAEL,sBAAKvC,UAAWC,IAAEuC,UAAlB,UACE,qBAAKxC,UAAWC,IAAEwC,MAAlB,SACGR,IAGH,sBAAKjC,UAAWC,IAAEiC,QAAlB,UACGE,EACD,cAACvB,EAAD,CAAkBI,SAbF,SAACyB,GACrB7C,EAAM8C,YAAYD,EAAOE,4BCHdC,sBACbC,aARoB,SAACC,GACrB,MAAO,CACLb,QAASa,EAAMC,aAAad,QAC5BG,SAAUU,EAAMC,aAAaX,YAO7B,CACEM,YAAaM,IAAQN,cAGzBO,IAPaL,CAQbb","file":"static/js/3.e5d3b6ef.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Dialogs_container__KlA9W\",\"items\":\"Dialogs_items__ynFSW\",\"dialogs\":\"Dialogs_dialogs__1YIzW\",\"message\":\"Dialogs_message__D3bS7\",\"wrapSendAndButton\":\"Dialogs_wrapSendAndButton__23pJv\"};","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z\"\n}), 'Send');\n\nexports.default = _default;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from '../Dialogs.module.css';\r\n\r\ntype PropsType = {\r\n  id: number\r\n  name: string\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n  let path = '/dialogs/' + props.id;\r\n  return (\r\n    <NavLink className={s.active} to={path} style={{color: 'white'}}>\r\n    {props.name}\r\n    </NavLink>\r\n  )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from '../Dialogs.module.css';\r\n\r\ntype PropsType = {\r\n  text: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n  return <div className={s.message}\r\n    style={{ overflowWrap: 'break-word', width: '400px', marginBottom: 20 }}>\r\n    {props.text}\r\n  </div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\n\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\n\r\nimport s from './Dialogs.module.css';\r\nimport renderTextField from '../common/ElementCustom/renderTextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport SendIcon from '@material-ui/icons/Send';\r\n\r\nimport { MapDispatchPropsType, MapStatePropsType } from './DialogsContainer';\r\n\r\nconst Dialogs: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n\r\n  let dialogsElements = props.dialogs.map(d =>\r\n    <DialogItem key={d.id} name={d.name} id={d.id} />);\r\n  let messagesElements = props.messages.map(m =>\r\n    <Message key={m.id} text={m.message} />);\r\n\r\n  const addNewMessage = (values: NewMessageValuesType) => {\r\n    props.sendMessage(values.newMessageText) // newMessageText - name Ñƒ Field\r\n  }\r\n\r\n  return <div className={s.containerMain}>\r\n\r\n    <div className={s.container}>\r\n      <div className={s.items}>\r\n        {dialogsElements}\r\n      </div>\r\n\r\n      <div className={s.dialogs}>\r\n        {messagesElements}\r\n        <DialogsReduxForm onSubmit={addNewMessage} />\r\n      </div>\r\n    </div>\r\n  </div>\r\n}\r\n\r\nconst SendMessageForm: React.FC<InjectedFormProps<NewMessageValuesType>> = (\r\n  { handleSubmit }) => {\r\n  return <form onSubmit={handleSubmit}>\r\n    <div className={s.wrapSendAndButton}>\r\n      <Field\r\n        component={renderTextField}\r\n        name='newMessageText'\r\n        placeholder='Enter your message...'\r\n        multiline={true}\r\n        fullWidth={true}\r\n        variant=\"outlined\"\r\n        inputProps={{ maxLength: 1000 }}\r\n      />\r\n      <Button\r\n        type='submit'\r\n        variant=\"contained\"\r\n        color='primary'\r\n        style={{ color: 'white', marginLeft: '10px' }}\r\n        endIcon={<SendIcon />}\r\n      >Send</Button>\r\n    </div>\r\n  </form>\r\n}\r\n\r\ntype NewMessageValuesType = {\r\n  newMessageText: string\r\n}\r\n\r\nconst DialogsReduxForm = reduxForm<NewMessageValuesType>({\r\n  form: 'dialogAddMessageForm'\r\n})(SendMessageForm);\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { actions } from '../../redux/reducers/messages-reducer';\r\nimport withAuthRedirect from '../hoc/withAuthRedirect';\r\n\r\nimport Dialogs from './Dialogs';\r\n\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { DialogType, MessageType } from '../../types/types';\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    dialogs: state.messagesPage.dialogs,\r\n    messages: state.messagesPage.messages,\r\n  }\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect<MapStatePropsType, MapDispatchPropsType, null, AppStateType>(\r\n    mapStateToProps,\r\n    {\r\n      sendMessage: actions.sendMessage,\r\n    }\r\n  ),\r\n  withAuthRedirect\r\n)(Dialogs)\r\n\r\n\r\nexport type MapStatePropsType = {\r\n  messages: Array<MessageType>\r\n  dialogs: Array<DialogType>\r\n}\r\n\r\nexport type MapDispatchPropsType = {\r\n  sendMessage: (newMessageText: string) => void\r\n}"],"sourceRoot":""}