{"version":3,"sources":["img/no_photo.svg","components/hoc/withAuthRedirect.tsx","api/api.ts","api/users-api.ts","redux/reducers/users-reducer.ts","api/chat-api.ts","redux/reducers/chat-reducer.ts","components/Profile/Info/InfoData/InfoData.module.css","components/Profile/Info/InfoDataForm/InfoDataForm.module.css","redux/selectors/auth-selectors.ts","components/Navbar/Navbar.module.css","components/Profile/Wall/Post/Post.module.css","api/auth-api.ts","api/security-api.ts","api/profile-api.ts","redux/reducers/auth-reducer.ts","redux/reducers/app-reducer.ts","components/hoc/withSuspense.tsx","img/icons/logo.svg","img/icons/logout.svg","components/Header/Header.tsx","components/Navbar/Navbar.tsx","redux/reducers/profile-reducer.ts","redux/selectors/profile-selectors.ts","components/Profile/Wall/Post/Post.tsx","components/common/ElementCustom/renderTextField.jsx","components/Profile/Wall/Wall.tsx","components/common/inputCount/inputCount.js","components/common/ElementCustom/InputCustomProfileStatus.jsx","components/Profile/Info/Status/Status.tsx","components/common/ElementCustom/renderCheckbox.jsx","components/Profile/Info/InfoDataForm/InfoDataForm.tsx","components/Profile/Info/InfoData/InfoData.tsx","img/icons/camera.svg","components/Profile/Info/InfoContainer.tsx","components/Profile/ProfileContainer.tsx","components/Login/Login.tsx","App.tsx","redux/redux-store.ts","index.tsx","components/Login/Login.module.css","components/Profile/Info/InfoContainer.module.css","components/Header/Header.module.css","components/Profile/Info/Status/Status.module.css","components/Profile/Wall/Wall.module.css","components/common/Avatar/Avatar.tsx","img/preloader.svg","components/common/Preloader/Preloader.jsx","components/common/Avatar/Avatar.module.css","App.module.css"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","ResultCodesEnum","ResultCodeForCaptcha","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","term","friend","get","response","data","followUser","id","post","unfollowUser","delete","initialState","users","totalUsersCount","isFetching","followingInProgress","actions","followSuccess","userID","type","unfollowSuccess","setUsers","addUsers","setTotalUsersCount","count","clearUsers","toggleIsFetching","toggleFollowingProgress","page","dispatch","getState","a","usersPage","length","items","totalCount","_followUnfollowFlow","apiMethod","actionCreator","resultCode","Success","follow","bind","unfollow","usersReducer","action","map","u","followed","filter","ws","subscribers","notifySubscribersAboutStatus","status","forEach","s","reconnect","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","openHandler","errorHandler","console","error","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","message","send","messages","payload","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","stopMessagesListening","sendMessage","chatReducer","m","v1","item","index","array","module","exports","getLogin","login","getIsAuth","getAuthorizedUserID","getCaptchaURL","captchaURL","getMyPhoto","myPhoto","authAPI","me","email","password","rememberMe","captcha","logout","securityAPI","profileAPI","getProfile","getStatus","updateStatus","put","savePhotoAPI","photoFile","formData","FormData","append","saveProfileAPI","profile","photo","getAuthUserDataThunk","Error","stopSubmit","_error","Object","keys","myProfile","photos","large","loginThunk","CaptchaIsRequired","url","logoutThunk","authReducer","initialized","appReducer","withSuspense","fallback","Preloader","Header","stylesLogoutButton","margin","useSelector","myID","useDispatch","className","header","logoAndTitle","src","logo","alt","headerTitle","rightPart","loginAndPhoto","Avatar","size","loginName","buttonDesctop","Button","onClick","variant","style","startIcon","buttonMobile","withRouter","pathname","location","authorizedUserID","profileUrl","nav","exact","activeClassName","active","navLink","replace","width","height","fill","navLinkImg","viewBox","d","xmlns","version","posts","author","idPost","likesCount","isLikeClick","postsForDelete","isSelectedPost","isClickDeleteSelectedPosts","showSuccessSave","errorProfileContacts","newPostText","bool","getUserProfile","userId","profileReducer","newPost","fullName","p","profilePage","getStatusSelector","getShowSuccessSave","getErrorProfileContacts","getPosts","getPostsForDelete","getToggleClickDeleteSelectedPosts","getIsSelectedPost","Post","handleDeleteOnePost","addIdPostBeforeDeleting","deleteIdPostBeforeDeleting","useState","isClickDeletePost","setIsClickDeletePost","isSelectedPostLocal","setIsSelectedPostLocal","cn","postContainer","postDelete","includes","columnLeft","aria-hidden","avatar","postSelected","unknown","columnCenter","name","columnRight","hidden","IconButton","aria-label","wrapLike","like","color","renderTextField","label","input","placeholder","multiline","inputProps","onInput","onFocus","meta","touched","warning","fullWidth","custom","TextField","PostReduxForm","reduxForm","form","handleSubmit","onSubmit","Field","component","maxLength","buttonBig","endIcon","buttonIcon","Wall","React","useEffect","arr","localStorage","getItem","setItem","stringify","postsElements","container","basket","values","reset","noPosts","handleFocusCount","target","select","document","getElementById","textContent","value","elem","display","fontSize","position","right","top","handleBlurCount","handleInputCount","num","wrap","useStyles","makeStyles","theme","inputProfileStatus","minHeight","maxHeight","lineHeight","padding","spacing","backgroundColor","borderRadius","Status","isOwner","classes","stylesSaveAndButton","editMode","setEditMode","statusLocal","setStatusLocal","Input","autoFocus","onBlur","onChange","currentTarget","buttons","buttonWrap","statusEmpty","statusNotMy","renderCheckbox","FormControlLabel","control","Checkbox","checked","labelPlacement","marginLeft","InfoDataForm","initialValues","titleForm","wrapForCount","countStyle","titleAllContacts","contacts","key","contact","titleContact","Contact","memo","contactTitle","contactValue","contactTextWrap","contactText","href","InfoData","containerForm","aboutMe","title","text","job","lookingForAJob","lookingForAJobDescription","some","el","ScrollToTopOnMount","window","scrollTo","InfoContainer","stylesSaveAndCancelButton","editModeProfile","setEditModeProfile","containerMain","camera","htmlFor","wrapImg","editPhotoInput","file","files","marginTop","buttonsSaveAndCancelProfile","submit","successSave","saveProfileThunk","ProfileContainer","this","refreshProfile","prevProps","match","params","history","PureComponent","compose","LoginReduxForm","validate","errors","test","stylesLoginButton","fontWeight","loginBlockSubstrate","loginBlock","row","rowCheckbox","formError","marginBottom","Login","body","ChatContainer","lazy","UsersContainer","SuspendedChat","SuspendedUsers","AppContainer","app","fon","appWrapper","appWrapperContent","from","path","render","rootReducer","combineReducers","formReducer","chat","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","createMuiTheme","palette","primary","main","cyan","secondary","responsiveFontSizes","ReactDOM","ThemeProvider","CssBaseline","children","avatarWrap","medium","small","stylesContainer","left","stylesWrap","justifyContent","preloader"],"mappings":"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","file":"static/js/main.507956f6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/no_photo.8bf0768a.svg\";","import React from 'react'\nimport { Redirect } from 'react-router'\nimport { connect } from 'react-redux'\nimport { AppStateType } from '../../redux/redux-store'\n\nconst mapStateToPropsForRedirect = (state: AppStateType) => ({\n  isAuth: state.auth.isAuth,\n})\n\ntype MapStatePropsType = {\n  isAuth: boolean\n}\n\n// WCP - пропсы WrappedComponent\nexport default function withAuthRedirect<WCP>(\n  WrappedComponent: React.ComponentType<WCP>\n) {\n  const RedirectComponent: React.FC<MapStatePropsType & unknown> = (props) => {\n    const { isAuth, ...restProps } = props\n    if (!isAuth) return <Redirect to='/login' />\n    return <WrappedComponent {...(restProps as WCP)} />\n  }\n\n  return connect<MapStatePropsType, never, WCP, AppStateType>(\n    mapStateToPropsForRedirect\n  )(RedirectComponent)\n}\n","import axios from 'axios'\n\nexport const instance = axios.create({\n  withCredentials: true, // цепляем cookie к запросу\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n  headers: {\n    'API-KEY': 'ddfbc45b-6923-498e-99d5-3a4897cbb31f',\n  },\n})\n\nexport enum ResultCodesEnum {\n  Success = 0,\n  Error = 1,\n}\n\nexport enum ResultCodeForCaptcha {\n  CaptchaIsRequired = 10,\n}\n\nexport type DefaultResponseType<D = never, RC = ResultCodesEnum> = {\n  data: D\n  resultCode: RC\n  messages: Array<string> | string\n}\n","import { UserType } from '../types/types'\nimport { DefaultResponseType, instance } from './api'\n\ntype GetUsersType = {\n  items: Array<UserType>\n  totalCount: number\n  error: string\n}\n\nconst usersAPI = {\n  async getUsers(\n    currentPage = 1,\n    pageSize: number,\n    term?: string,\n    friend?: boolean\n  ) {\n    const response = await instance.get<GetUsersType>(\n      `users?page=${currentPage}&count=${pageSize}&term=${term}&friend=${friend}`\n    )\n    return response.data\n  },\n  async followUser(id: number) {\n    const response = await instance.post<DefaultResponseType>(\n      `follow/${id}`,\n      {}\n    )\n    return response.data\n  },\n  async unfollowUser(id: number) {\n    const response = await instance.delete<DefaultResponseType>(`follow/${id}`)\n    return response.data\n  },\n}\n\nexport default usersAPI\n","import { Dispatch } from 'redux'\nimport { DefaultResponseType, ResultCodesEnum } from '../../api/api'\nimport usersAPI from '../../api/users-api'\nimport { UserType } from '../../types/types'\nimport { BaseThunkType, InferActionsTypes } from '../redux-store'\n\nconst initialState = {\n  users: [] as Array<UserType>,\n\n  pageSize: 10,\n  totalUsersCount: 0,\n\n  isFetching: true,\n  // disabling the button after pressing\n  followingInProgress: [] as Array<number>, // array of users ID\n}\n\nconst usersReducer = (\n  state = initialState,\n  action: ActionsTypes\n): InitialStateType => {\n  switch (action.type) {\n    case 'FOLLOW': {\n      return {\n        ...state,\n        users: state.users.map((u) => {\n          if (u.id === action.userID) {\n            return { ...u, followed: true }\n          }\n          return u\n        }),\n      }\n    }\n    case 'UNFOLLOW': {\n      return {\n        ...state,\n        users: state.users.map((u) => {\n          if (u.id === action.userID) {\n            return { ...u, followed: false }\n          }\n          return u\n        }),\n      }\n    }\n    case 'SET_USERS': {\n      return {\n        ...state,\n        users: [...action.users],\n      }\n    }\n    case 'ADD_USERS': {\n      return {\n        ...state,\n        users: [...state.users, ...action.users],\n      }\n    }\n    case 'CLEAR_USERS': {\n      return {\n        ...state,\n        users: [],\n      }\n    }\n    case 'SET_TOTAL_USERS_COUNT': {\n      return {\n        ...state,\n        totalUsersCount: action.count,\n      }\n    }\n    case 'TOGGLE_IS_FETCHING': {\n      return {\n        ...state,\n        isFetching: action.isFetching,\n      }\n    }\n    case 'TOGGLE_IS_FOLLOWING_PROGRESS': {\n      return {\n        ...state,\n        followingInProgress: action.isFetching\n          ? [...state.followingInProgress, action.userID]\n          : state.followingInProgress.filter((id) => id !== action.userID),\n      }\n    }\n    default:\n      return state\n  }\n}\n\nexport const actions = {\n  followSuccess: (userID: number) => ({ type: 'FOLLOW', userID } as const),\n  unfollowSuccess: (userID: number) => ({ type: 'UNFOLLOW', userID } as const),\n\n  setUsers: (users: Array<UserType>) => ({ type: 'SET_USERS', users } as const),\n  addUsers: (users: Array<UserType>) => ({ type: 'ADD_USERS', users } as const),\n  setTotalUsersCount: (totalUsersCount: number) =>\n    ({\n      type: 'SET_TOTAL_USERS_COUNT',\n      count: totalUsersCount,\n    } as const),\n  clearUsers: () => ({ type: 'CLEAR_USERS' } as const),\n\n  toggleIsFetching: (isFetching: boolean) =>\n    ({ type: 'TOGGLE_IS_FETCHING', isFetching } as const),\n  toggleFollowingProgress: (isFetching: boolean, userID: number) =>\n    ({\n      type: 'TOGGLE_IS_FOLLOWING_PROGRESS',\n      isFetching,\n      userID,\n    } as const),\n}\n\nexport const getUsers =\n  (page: number, term: string, friend?: boolean): ThunkType =>\n  async (dispatch, getState) => {\n    dispatch(actions.toggleIsFetching(true))\n\n    const response = await usersAPI.getUsers(\n      page,\n      getState().usersPage.pageSize,\n      term,\n      friend\n    )\n\n    // первичная загрузка\n    if (term.length === 0 && page === 1) {\n      dispatch(actions.setUsers(response.items))\n    }\n    // получение больше пользователей\n    if (page > 1) {\n      dispatch(actions.addUsers(response.items))\n    }\n    // первичный поиск\n    if (term.length > 0 && page === 1) {\n      dispatch(actions.clearUsers())\n      dispatch(actions.setUsers(response.items))\n    }\n\n    dispatch(actions.setTotalUsersCount(response.totalCount))\n    dispatch(actions.toggleIsFetching(false))\n  }\n\ntype DispatchType = Dispatch<ActionsTypes>\nconst _followUnfollowFlow = async (\n  dispatch: DispatchType,\n  id: number,\n  apiMethod: (id: number) => Promise<DefaultResponseType>,\n  actionCreator: (id: number) => ActionsTypes\n) => {\n  dispatch(actions.toggleFollowingProgress(true, id))\n  const response = await apiMethod(id)\n\n  if (response.resultCode === ResultCodesEnum.Success) {\n    dispatch(actionCreator(id))\n  }\n  dispatch(actions.toggleFollowingProgress(false, id))\n}\n\nexport const follow =\n  (id: number): ThunkType =>\n  async (dispatch) => {\n    await _followUnfollowFlow(\n      dispatch,\n      id,\n      usersAPI.followUser.bind(usersAPI),\n      actions.followSuccess\n    )\n  }\n\nexport const unfollow =\n  (id: number): ThunkType =>\n  async (dispatch) => {\n    await _followUnfollowFlow(\n      dispatch,\n      id,\n      usersAPI.unfollowUser.bind(usersAPI),\n      actions.unfollowSuccess\n    )\n  }\n\nexport default usersReducer\n\nexport type InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>\n","let ws: WebSocket | null = null\n\nlet subscribers = {\n  'messages-received': [] as Array<MessagesReceivedSubscriberType>,\n  'status-changed': [] as Array<StatusChangedSubscriberType>,\n}\n\ntype EventsCustomNamesType = 'messages-received' | 'status-changed'\n\nconst notifySubscribersAboutStatus = (status: StatusType) => {\n  if (subscribers) {\n    subscribers['status-changed'].forEach((s) => s(status))\n  }\n}\n\nconst reconnect = () => {\n  notifySubscribersAboutStatus('pending')\n  setTimeout(createChannel, 3000)\n}\n\nconst messageHandler = (e: MessageEvent) => {\n  const newMessages = JSON.parse(e.data)\n  if (subscribers) {\n    subscribers['messages-received'].forEach((s) => s(newMessages))\n  }\n}\n\nconst openHandler = () => {\n  notifySubscribersAboutStatus('ready')\n}\n\nconst errorHandler = () => {\n  notifySubscribersAboutStatus('error')\n  // eslint-disable-next-line no-console\n  console.error('REFRESH PAGE')\n}\n\nconst cleanUp = () => {\n  ws?.removeEventListener('close', reconnect)\n  ws?.removeEventListener('message', messageHandler)\n  ws?.removeEventListener('open', openHandler)\n  ws?.removeEventListener('error', errorHandler)\n}\n\nfunction createChannel() {\n  cleanUp()\n  ws?.close()\n\n  ws = new WebSocket(\n    'wss://social-network.samuraijs.com/handlers/ChatHandler.ashx'\n  )\n\n  notifySubscribersAboutStatus('pending')\n\n  ws.addEventListener('close', reconnect)\n  ws.addEventListener('message', messageHandler)\n  ws.addEventListener('open', openHandler)\n  ws.addEventListener('error', errorHandler)\n}\n\nexport const chatAPI = {\n  start() {\n    createChannel()\n  },\n  stop() {\n    if (subscribers) {\n      subscribers['messages-received'] = []\n      subscribers['status-changed'] = []\n    }\n    cleanUp()\n    ws?.close()\n  },\n  subscribe(\n    eventName: EventsCustomNamesType,\n    callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType\n  ) {\n    if (subscribers) {\n      // @ts-ignore\n      subscribers[eventName].push(callback)\n    }\n  },\n\n  // отписка (забираем возможность api уведомлять store)\n  unsubscribe(\n    eventName: EventsCustomNamesType,\n    callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType\n  ) {\n    if (subscribers) {\n      // @ts-ignore\n      subscribers = subscribers[eventName]?.filter((s) => s !== callback)\n      // оставляем всех, кроме callback\n    }\n  },\n\n  sendMessage(message: string) {\n    ws?.send(message)\n  },\n}\n\nexport type ChatMessageAPIType = {\n  message: string\n  photo: string\n  userId: number\n  userName: string\n}\n\nexport type StatusType = 'pending' | 'ready' | 'error'\n\ntype MessagesReceivedSubscriberType = (\n  messages: Array<ChatMessageAPIType>\n) => void\n\ntype StatusChangedSubscriberType = (status: StatusType) => void\n","import { FormAction } from 'redux-form'\nimport { Dispatch } from 'redux'\nimport { v1 } from 'uuid'\nimport { BaseThunkType, InferActionsTypes } from '../redux-store'\nimport { chatAPI, ChatMessageAPIType, StatusType } from '../../api/chat-api'\n\nexport type ChatMessageType = ChatMessageAPIType & { id: string }\n\nconst initialState = {\n  messages: [] as ChatMessageType[],\n  status: 'pending' as StatusType,\n}\n\nconst chatReducer = (\n  state = initialState,\n  action: ActionsTypes\n): InitialStateType => {\n  switch (action.type) {\n    case 'MESSAGES_RECEIVED': {\n      return {\n        ...state,\n        messages: [\n          ...state.messages,\n          ...action.payload.messages.map((m) => ({ ...m, id: v1() })),\n        ].filter((item, index, array) => index >= array.length - 100),\n      }\n    }\n    case 'STATUS_CHANGED': {\n      return {\n        ...state,\n        status: action.payload.status,\n      }\n    }\n    default:\n      return state\n  }\n}\n\nconst actions = {\n  messagesReceived: (messages: ChatMessageAPIType[]) =>\n    ({\n      type: 'MESSAGES_RECEIVED',\n      payload: { messages },\n    } as const),\n  statusChanged: (status: StatusType) =>\n    ({\n      type: 'STATUS_CHANGED',\n      payload: { status },\n    } as const),\n}\n\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\n  // чтобы два раза не вызывалась одна и та же функция,\n  // сначала при подписке, потом при отписке\n  if (_newMessageHandler === null) {\n    _newMessageHandler = (messages) => {\n      dispatch(actions.messagesReceived(messages))\n    }\n  }\n  return _newMessageHandler\n}\n\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\n  // чтобы два раза не вызывалась одна и та же функция,\n  // сначала при подписке, потом при отписке\n  if (_statusChangedHandler === null) {\n    _statusChangedHandler = (status) => {\n      dispatch(actions.statusChanged(status))\n    }\n  }\n  return _statusChangedHandler\n}\n\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\n  chatAPI.start()\n\n  chatAPI.subscribe('messages-received', newMessageHandlerCreator(dispatch))\n  chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\n}\n\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\n  chatAPI.unsubscribe('messages-received', newMessageHandlerCreator(dispatch))\n  chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch))\n\n  chatAPI.stop()\n}\n\nexport const sendMessage =\n  (message: string): ThunkType =>\n  async () => {\n    chatAPI.sendMessage(message)\n  }\n\nexport default chatReducer\n\ntype InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerForm\":\"InfoData_containerForm__1JOGm\",\"wrap\":\"InfoData_wrap__1Sogv\",\"aboutMe\":\"InfoData_aboutMe__2cZYL\",\"job\":\"InfoData_job__3N8Ba\",\"contacts\":\"InfoData_contacts__uL_8Z\",\"title\":\"InfoData_title__3tTLU\",\"text\":\"InfoData_text__3OEXf\",\"contact\":\"InfoData_contact__15i2w\",\"contactTitle\":\"InfoData_contactTitle__2PwVT\",\"contactTextWrap\":\"InfoData_contactTextWrap__DGFoS\",\"contactText\":\"InfoData_contactText__1r_Xy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"InfoDataForm_form__3X5Dg\",\"titleForm\":\"InfoDataForm_titleForm__3o6fa\",\"wrap\":\"InfoDataForm_wrap__7quju\",\"contact\":\"InfoDataForm_contact__3sIjS\",\"titleAllContacts\":\"InfoDataForm_titleAllContacts__32-Po\",\"titleContact\":\"InfoDataForm_titleContact__Def8-\",\"countStyle\":\"InfoDataForm_countStyle__3Vxhs\",\"wrapForCount\":\"InfoDataForm_wrapForCount__3uTkw\",\"errorProfileContacts\":\"InfoDataForm_errorProfileContacts__PksGi\"};","import { AppStateType } from '../redux-store'\n\nexport const getLogin = (state: AppStateType) => state.auth.login\n\nexport const getIsAuth = (state: AppStateType) => state.auth.isAuth\n\nexport const getAuthorizedUserID = (state: AppStateType) => state.auth.userID\n\nexport const getCaptchaURL = (state: AppStateType) => state.auth.captchaURL\n\nexport const getMyPhoto = (state: AppStateType) => state.auth.myPhoto\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3R0rh\",\"navLink\":\"Navbar_navLink__3jqZB\",\"navLinkImg\":\"Navbar_navLinkImg__3kMZG\",\"active\":\"Navbar_active__2b-XZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postContainer\":\"Post_postContainer__2U4n8\",\"post\":\"Post_post__2IBVl\",\"postDelete\":\"Post_postDelete__1lZaR\",\"holeOut\":\"Post_holeOut__1Ljm8\",\"columnLeft\":\"Post_columnLeft__2rHjy\",\"avatar\":\"Post_avatar__Z9tVC\",\"postSelected\":\"Post_postSelected__2FGVR\",\"columnCenter\":\"Post_columnCenter__xB3oO\",\"name\":\"Post_name__UCrHi\",\"message\":\"Post_message__1vD2I\",\"columnRight\":\"Post_columnRight__3EFx8\",\"wrapLike\":\"Post_wrapLike__1qVOH\",\"like\":\"Post_like__30Txn\"};","import {\n  DefaultResponseType,\n  instance,\n  ResultCodeForCaptcha,\n  ResultCodesEnum,\n} from './api'\n\ntype MeDataType = {\n  id: number\n  email: string\n  login: string\n}\n\nconst authAPI = {\n  async me() {\n    const response = await instance.get<DefaultResponseType<MeDataType>>(\n      'auth/me'\n    )\n    return response.data\n  },\n  async login(\n    email: string,\n    password: string,\n    rememberMe = false,\n    captcha: null | string = null\n  ) {\n    const response = await instance.post<\n      DefaultResponseType<\n        { userId: number },\n        ResultCodesEnum | ResultCodeForCaptcha\n      >\n    >('/auth/login', {\n      email,\n      password,\n      rememberMe,\n      captcha,\n    })\n    return response.data\n  },\n  async logout() {\n    const response = await instance.delete<DefaultResponseType>('/auth/login')\n    return response.data\n  },\n}\n\nexport default authAPI\n","import { instance } from './api'\n\ntype GetCaptchaResponseType = {\n  url: string\n}\n\nconst securityAPI = {\n  async getCaptchaURL() {\n    const response = await instance.get<GetCaptchaResponseType>(\n      'security/get-captcha-url'\n    )\n    return response.data\n  },\n}\n\nexport default securityAPI\n","import { PhotosType, ProfileType } from '../types/types'\nimport { DefaultResponseType, instance } from './api'\n\ntype SavePhotoDataType = {\n  photos: PhotosType\n}\n\nconst profileAPI = {\n  async getProfile(id: number | null) {\n    const response = await instance.get<ProfileType>(`profile/${id}`)\n    return response.data\n  },\n\n  async getStatus(id: number) {\n    const response = await instance.get<string>(`profile/status/${id}`)\n    return response.data\n  },\n\n  async updateStatus(status: string) {\n    const response = await instance.put<DefaultResponseType>('profile/status', {\n      status,\n    })\n    return response.data\n  },\n\n  async savePhotoAPI(photoFile: File) {\n    const formData = new FormData()\n    formData.append('image', photoFile)\n    const response = await instance.put<DefaultResponseType<SavePhotoDataType>>(\n      'profile/photo',\n      formData,\n      {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      }\n    )\n    return response.data\n  },\n\n  async saveProfileAPI(profile: ProfileType) {\n    const response = await instance.put<DefaultResponseType>('profile', profile)\n    return response.data\n  },\n}\n\nexport default profileAPI\n","import { FormAction, stopSubmit } from 'redux-form'\nimport { ResultCodesEnum, ResultCodeForCaptcha } from '../../api/api'\nimport authAPI from '../../api/auth-api'\nimport securityAPI from '../../api/security-api'\n\nimport { BaseThunkType, InferActionsTypes } from '../redux-store'\nimport profileAPI from '../../api/profile-api'\n\nconst initialState = {\n  userID: null as number | null,\n  email: null as string | null,\n  login: null as string | null,\n  isAuth: false,\n  captchaURL: null as string | null,\n  myPhoto: null as string | null,\n}\n\nconst authReducer = (\n  state = initialState,\n  action: ActionsTypes\n): InitialStateType => {\n  switch (action.type) {\n    case 'SET_USER_DATA':\n    case 'GET_CAPTCHA_URL_SUCCESS': {\n      return {\n        ...state,\n        ...action.payload,\n      }\n    }\n    case 'SET_MY_PHOTO': {\n      return {\n        ...state,\n        // @ts-ignore\n        myPhoto: action.payload.photo,\n      }\n    }\n    default:\n      return state\n  }\n}\n\nconst actions = {\n  setAuthUserData: (\n    userID: number | null,\n    email: string | null,\n    login: string | null,\n    isAuth: boolean\n  ) => ({\n    type: 'SET_USER_DATA',\n    payload: {\n      userID,\n      email,\n      login,\n      isAuth,\n    } as const,\n  }),\n\n  setCaptcha: (captchaURL: string | null) => ({\n    type: 'GET_CAPTCHA_URL_SUCCESS',\n    payload: { captchaURL } as const,\n  }),\n\n  setMyPhoto: (photo: string | null) => ({\n    type: 'SET_MY_PHOTO',\n    payload: { photo } as const,\n  }),\n}\n\nexport const getAuthUserDataThunk = (): ThunkType => async (dispatch) => {\n  const response = await authAPI.me()\n\n  if (response.resultCode === ResultCodesEnum.Success) {\n    const { id, email, login } = response.data\n    dispatch(actions.setAuthUserData(id, email, login, true))\n  }\n\n  if (response.resultCode === ResultCodesEnum.Error) {\n    const message = response.messages\n    const action = stopSubmit('loginForm', {\n      _error: message.length > 0 ? message[0] : 'Some error',\n    })\n    // Some error - на всякий случай, если с сервера придёт пустое сообщение\n    // при ошибке\n    dispatch(action)\n  }\n\n  if (Object.keys(response.data).length !== 0) {\n    const myProfile = await profileAPI.getProfile(response.data.id)\n    dispatch(actions.setMyPhoto(myProfile.photos.large))\n  }\n}\n\nconst setCaptchaThunk = (): ThunkType => async (dispatch) => {\n  const response = await securityAPI.getCaptchaURL()\n  const captcha = response.url\n  dispatch(actions.setCaptcha(captcha))\n}\n\nexport const loginThunk =\n  (\n    email: string,\n    password: string,\n    rememberMe: boolean,\n    captcha: string | null\n  ): ThunkType =>\n  async (dispatch) => {\n    const response = await authAPI.login(email, password, rememberMe, captcha)\n\n    if (response.resultCode === ResultCodesEnum.Success) {\n      dispatch(getAuthUserDataThunk())\n      dispatch(actions.setCaptcha(null))\n    }\n\n    if (response.resultCode === ResultCodesEnum.Error) {\n      const message = response.messages\n      const action = stopSubmit('loginForm', {\n        _error: message.length > 0 ? message[0] : 'Some error',\n      })\n      // Some error - на всякий случай, если с сервера придёт пустое сообщение\n      // при ошибке\n      dispatch(action)\n    }\n\n    if (response.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\n      dispatch(setCaptchaThunk())\n    }\n  }\n\nexport const logoutThunk = (): ThunkType => async (dispatch) => {\n  const response = await authAPI.logout()\n\n  if (response.resultCode === ResultCodesEnum.Success) {\n    dispatch(actions.setAuthUserData(null, null, null, false))\n    dispatch(actions.setMyPhoto(null))\n  }\n}\n\nexport default authReducer\n\ntype InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>\n","import { BaseThunkType, InferActionsTypes } from '../redux-store'\nimport { getAuthUserDataThunk } from './auth-reducer'\n\nconst initialState = {\n  initialized: false,\n}\n\nconst appReducer = (\n  state = initialState,\n  action: ActionsTypes\n): InitialStateType => {\n  switch (action.type) {\n    case 'INITIALIZED_SUCCESS': {\n      return {\n        ...state,\n        initialized: true,\n      }\n    }\n    default:\n      return state\n  }\n}\n\nconst actions = {\n  initializedSuccess: () => ({ type: 'INITIALIZED_SUCCESS' } as const),\n}\n\nexport const initializeAppThunk = (): ThunkType => async (dispatch) => {\n  await dispatch(getAuthUserDataThunk())\n  dispatch(actions.initializedSuccess())\n}\n\nexport default appReducer\n\ntype InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>\n","import React, { Suspense } from 'react'\nimport Preloader from '../common/Preloader/Preloader.jsx'\n\nfunction withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\n  return (props: WCP) => (\n    <Suspense fallback={<Preloader />}>\n      <WrappedComponent {...props} />\n    </Suspense>\n  )\n}\nexport default withSuspense\n","export default __webpack_public_path__ + \"static/media/logo.cebb0f3e.svg\";","export default __webpack_public_path__ + \"static/media/logout.8e3cc1f3.svg\";","import React from 'react'\nimport { NavLink, Redirect } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Button from '@material-ui/core/Button'\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp'\nimport { logoutThunk } from '../../redux/reducers/auth-reducer'\nimport {\n  getAuthorizedUserID,\n  getIsAuth,\n  getLogin,\n  getMyPhoto,\n} from '../../redux/selectors/auth-selectors'\n\nimport s from './Header.module.css'\nimport logo from '../../img/icons/logo.svg'\nimport logout from '../../img/icons/logout.svg'\nimport Avatar from '../common/Avatar/Avatar'\n\nconst Header: React.FC = () => {\n  const stylesLogoutButton = {\n    margin: 16,\n  }\n\n  const isAuth = useSelector(getIsAuth)\n  const login = useSelector(getLogin)\n  const myID = useSelector(getAuthorizedUserID)\n  const myPhoto = useSelector(getMyPhoto)\n  const dispatch = useDispatch()\n\n  return (\n    <header className={s.header}>\n      <NavLink className={s.logoAndTitle} to='/profile'>\n        <img src={logo} alt='logo' />\n        <span className={s.headerTitle}>Social network</span>\n      </NavLink>\n\n      <div className={s.rightPart}>\n        {isAuth ? (\n          <>\n            <NavLink className={s.loginAndPhoto} to={`/profile/${myID}`}>\n              <Avatar photo={myPhoto} size='small' />\n              <span className={s.loginName}>{login}</span>\n            </NavLink>\n\n            <span className={s.buttonDesctop}>\n              <Button\n                onClick={() => dispatch(logoutThunk())}\n                variant='outlined'\n                style={stylesLogoutButton}\n                startIcon={<ExitToAppIcon />}\n              >\n                Log out\n              </Button>\n            </span>\n            <span className={s.buttonMobile}>\n              <Button\n                onClick={() => dispatch(logoutThunk())}\n                variant='outlined'\n                style={stylesLogoutButton}\n              >\n                <img src={logout} alt='logout' />\n              </Button>\n            </span>\n          </>\n        ) : (\n          <Redirect to='/login' />\n        )}\n      </div>\n    </header>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport { NavLink, RouteComponentProps, withRouter } from 'react-router-dom'\nimport { useSelector } from 'react-redux'\nimport s from './Navbar.module.css'\nimport { getAuthorizedUserID } from '../../redux/selectors/auth-selectors'\n\ntype PathParamsType = {\n  pathname: string\n}\n\nconst Navbar: React.FC<RouteComponentProps<PathParamsType>> = ({\n  location: { pathname },\n}) => {\n  const authorizedUserID = useSelector(getAuthorizedUserID)\n  const profileUrl = `/profile/${authorizedUserID}`\n\n  return (\n    <nav className={s.nav} id='navbar'>\n      <NavLink\n        exact\n        to={profileUrl}\n        activeClassName={s.active}\n        className={s.navLink}\n        replace\n      >\n        <svg\n          width='24'\n          height='24'\n          fill={pathname === profileUrl ? '#00bcd4' : 'white'}\n          className={s.navLinkImg}\n          viewBox='0 0 24 24'\n        >\n          {/* eslint-disable-next-line max-len */}\n          <path d='M12,4A4,4 0 0,1 16,8A4,4 0 0,1 12,12A4,4 0 0,1 8,8A4,4 0 0,1 12,4M12,14C16.42,14 20,15.79 20,18V20H4V18C4,15.79 7.58,14 12,14Z' />\n        </svg>\n        Profile\n      </NavLink>\n\n      <NavLink\n        to='/chat'\n        activeClassName={s.active}\n        className={s.navLink}\n        replace\n      >\n        <svg\n          xmlns='http://www.w3.org/2000/svg'\n          version='1.1'\n          width='24'\n          height='24'\n          fill={pathname === '/chat' ? '#00bcd4' : 'white'}\n          className={s.navLinkImg}\n          viewBox='0 0 24 24'\n        >\n          {/* eslint-disable-next-line max-len */}\n          <path d='M20,2H4A2,2 0 0,0 2,4V22L6,18H20A2,2 0 0,0 22,16V4C22,2.89 21.1,2 20,2Z' />\n        </svg>\n        Chat\n      </NavLink>\n\n      <NavLink\n        to='/friends'\n        activeClassName={s.active}\n        className={s.navLink}\n        replace\n      >\n        <svg\n          xmlns='http://www.w3.org/2000/svg'\n          version='1.1'\n          width='24'\n          height='24'\n          fill={pathname === '/friends' ? '#00bcd4' : 'white'}\n          className={s.navLinkImg}\n          viewBox='0 0 24 24'\n        >\n          {/* eslint-disable-next-line max-len */}\n          <path d='M12,5.5A3.5,3.5 0 0,1 15.5,9A3.5,3.5 0 0,1 12,12.5A3.5,3.5 0 0,1 8.5,9A3.5,3.5 0 0,1 12,5.5M5,8C5.56,8 6.08,8.15 6.53,8.42C6.38,9.85 6.8,11.27 7.66,12.38C7.16,13.34 6.16,14 5,14A3,3 0 0,1 2,11A3,3 0 0,1 5,8M19,8A3,3 0 0,1 22,11A3,3 0 0,1 19,14C17.84,14 16.84,13.34 16.34,12.38C17.2,11.27 17.62,9.85 17.47,8.42C17.92,8.15 18.44,8 19,8M5.5,18.25C5.5,16.18 8.41,14.5 12,14.5C15.59,14.5 18.5,16.18 18.5,18.25V20H5.5V18.25M0,20V18.5C0,17.11 1.89,15.94 4.45,15.6C3.86,16.28 3.5,17.22 3.5,18.25V20H0M24,20H20.5V18.25C20.5,17.22 20.14,16.28 19.55,15.6C22.11,15.94 24,17.11 24,18.5V20Z' />\n        </svg>\n        Friends\n      </NavLink>\n\n      <NavLink\n        to='/users'\n        activeClassName={s.active}\n        className={s.navLink}\n        replace\n      >\n        <svg\n          width='24'\n          height='24'\n          viewBox='0 0 24 24'\n          fill={pathname === '/users' ? '#00bcd4' : 'white'}\n          className={s.navLinkImg}\n        >\n          {/* eslint-disable-next-line max-len */}\n          <path d='M15.5,12C18,12 20,14 20,16.5C20,17.38 19.75,18.21 19.31,18.9L22.39,22L21,23.39L17.88,20.32C17.19,20.75 16.37,21 15.5,21C13,21 11,19 11,16.5C11,14 13,12 15.5,12M15.5,14A2.5,2.5 0 0,0 13,16.5A2.5,2.5 0 0,0 15.5,19A2.5,2.5 0 0,0 18,16.5A2.5,2.5 0 0,0 15.5,14M10,4A4,4 0 0,1 14,8C14,8.91 13.69,9.75 13.18,10.43C12.32,10.75 11.55,11.26 10.91,11.9L10,12A4,4 0 0,1 6,8A4,4 0 0,1 10,4M2,20V18C2,15.88 5.31,14.14 9.5,14C9.18,14.78 9,15.62 9,16.5C9,17.79 9.38,19 10,20H2Z' />\n        </svg>\n        Find Users\n      </NavLink>\n    </nav>\n  )\n}\n\nexport default withRouter(Navbar)\n","import { v1 } from 'uuid'\nimport { BaseThunkType, InferActionsTypes } from '../redux-store'\n\nimport { PostType, ProfileType, PhotosType } from '../../types/types'\n\nimport { ResultCodesEnum } from '../../api/api'\nimport profileAPI from '../../api/profile-api'\n\nconst initialState = {\n  posts: [\n    {\n      author: 'Denis Ignatov',\n      idPost: '1',\n      message: `Lorem ipsum dolor sit amet consectetur adipisicing elit. \n        Facilis ut quo maiores neque laboriosam. Ratione adipisci \n        reiciendis autem placeat alias necessitatibus pariatur saepe \n        ipsum, temporibus animi, facilis minus doloribus ducimus.`,\n      likesCount: 0,\n      isLikeClick: false,\n    },\n    {\n      author: 'Denis Ignatov',\n      idPost: '2',\n      message: 'Lorem ipsum dolor sit amet consectetur adipisicing elit.',\n      likesCount: 0,\n      isLikeClick: false,\n    },\n    {\n      author: 'Denis Ignatov',\n      idPost: '3',\n      message: `Lorem ipsum dolor sit amet consectetur adipisicing elit. \n        Facilis ut quo maiores neque laboriosam. Ratione adipisci \n        reiciendis autem placeat alias necessitatibus...`,\n      likesCount: 0,\n      isLikeClick: false,\n    },\n  ] as Array<PostType>,\n  postsForDelete: [] as Array<string>,\n  isSelectedPost: false,\n  isClickDeleteSelectedPosts: false, // для анимации поста при удалении\n\n  profile: null as ProfileType | null,\n  status: '',\n  showSuccessSave: '',\n  errorProfileContacts: '',\n}\n\nconst profileReducer = (\n  state = initialState,\n  action: ActionsTypes\n): InitialStateType => {\n  switch (action.type) {\n    case 'SET_USER': {\n      return {\n        ...state,\n        profile: action.profile,\n      }\n    }\n    case 'SET_STATUS': {\n      return {\n        ...state,\n        status: action.status,\n      }\n    }\n    case 'INITIALIZE_POSTS': {\n      return {\n        ...state,\n        posts: action.posts,\n      }\n    }\n    case 'ADD_POST': {\n      const newPost = {\n        author: state.profile?.fullName,\n        idPost: v1(),\n        message: action.newPostText,\n        likesCount: 0,\n        isLikeClick: false,\n      }\n      return {\n        ...state,\n        posts: [newPost, ...state.posts],\n      }\n    }\n    case 'IS_SELECTED_POST': {\n      return {\n        ...state,\n        isSelectedPost: action.bool,\n      }\n    }\n    case 'SET_POST_FOR_DELETE': {\n      return {\n        ...state,\n        postsForDelete: [...state.postsForDelete, action.idPost],\n      }\n    }\n    case 'DELETE_POST_FOR_DELETE': {\n      return {\n        ...state,\n        postsForDelete: [\n          ...state.postsForDelete.filter((id) => id !== action.idPost),\n        ],\n      }\n    }\n    case 'CLEAR_POSTS_FOR_DELETE': {\n      return {\n        ...state,\n        postsForDelete: [],\n      }\n    }\n    case 'TOGGLE_CLICK_DELETE_SELECTED_POST': {\n      return {\n        ...state,\n        isClickDeleteSelectedPosts: action.bool,\n      }\n    }\n    case 'DELETE_POST': {\n      return {\n        ...state,\n        posts: state.posts.filter((p) => p.idPost !== action.idPost),\n      }\n    }\n    case 'SET_LIKE_ON_POST': {\n      return {\n        ...state,\n        posts: [\n          ...state.posts.map((p) => {\n            if (p.idPost === action.idPost) {\n              return {\n                ...p,\n                likesCount: ++p.likesCount,\n                isLikeClick: true,\n              }\n            }\n            return p\n          }),\n        ],\n      }\n    }\n    case 'DELETE_LIKE_ON_POST': {\n      return {\n        ...state,\n        posts: [\n          ...state.posts.map((p) => {\n            if (p.idPost === action.idPost) {\n              return {\n                ...p,\n                likesCount: --p.likesCount,\n                isLikeClick: false,\n              }\n            }\n            return p\n          }),\n        ],\n      }\n    }\n    case 'SAVE_PHOTO_SUCCESS': {\n      return {\n        ...state,\n        profile: { ...state.profile, photos: action.photos } as ProfileType,\n      }\n    }\n    case 'SHOW_SUCCESS_SAVE': {\n      return {\n        ...state,\n        showSuccessSave: action.message,\n      }\n    }\n    case 'SHOW_ERROR_PROFILE_CONTACTS': {\n      return {\n        ...state,\n        errorProfileContacts: action.message,\n      }\n    }\n    default:\n      return state\n  }\n}\n\nexport const actions = {\n  initializePosts: (posts: Array<PostType>) =>\n    ({ type: 'INITIALIZE_POSTS', posts } as const),\n  addPost: (newPostText: string) =>\n    ({ type: 'ADD_POST', newPostText } as const),\n  deletePost: (idPost: string) => ({ type: 'DELETE_POST', idPost } as const),\n  // лайки-лайки-лайки\n  setLikeOnPost: (idPost: string) =>\n    ({ type: 'SET_LIKE_ON_POST', idPost } as const),\n  deletetLikeOnPost: (idPost: string) =>\n    ({ type: 'DELETE_LIKE_ON_POST', idPost } as const),\n  // удаление нескольких постов\n  setPostForDeleting: (idPost: string) =>\n    ({ type: 'SET_POST_FOR_DELETE', idPost } as const),\n  deletePostForDeleting: (idPost: string) =>\n    ({ type: 'DELETE_POST_FOR_DELETE', idPost } as const),\n  clearPostsForDelete: () => ({ type: 'CLEAR_POSTS_FOR_DELETE' } as const),\n  // для убирания иконок-крестиков у всех постов при выборе нескольких постов\n  toggleIsSelectedPost: (bool: boolean) =>\n    ({ type: 'IS_SELECTED_POST', bool } as const),\n  // для анимации удаления постов\n  toggleIsClickDeleteSelectedPosts: (bool: boolean) =>\n    ({ type: 'TOGGLE_CLICK_DELETE_SELECTED_POST', bool } as const),\n\n  setUserProfile: (profile: ProfileType) =>\n    ({ type: 'SET_USER', profile } as const),\n  setStatus: (status: string) => ({ type: 'SET_STATUS', status } as const),\n  savePhotoSuccess: (photos: PhotosType) =>\n    ({ type: 'SAVE_PHOTO_SUCCESS', photos } as const),\n  showSuccessSaveProfile: (message: string) =>\n    ({ type: 'SHOW_SUCCESS_SAVE', message } as const),\n  showErrorProfileContacts: (message: string) =>\n    ({ type: 'SHOW_ERROR_PROFILE_CONTACTS', message } as const),\n}\n\nexport const getUserProfile =\n  (userId: number | null): ThunkType =>\n  async (dispatch) => {\n    const response = await profileAPI.getProfile(userId)\n    // eslint-disable-next-line no-debugger\n    debugger\n    dispatch(actions.setUserProfile(response))\n  }\n\nexport const getStatus =\n  (id: number): ThunkType =>\n  async (dispatch) => {\n    const response = await profileAPI.getStatus(id)\n    dispatch(actions.setStatus(response))\n  }\n\nexport const updateStatus =\n  (status: string): ThunkType =>\n  async (dispatch) => {\n    const response = await profileAPI.updateStatus(status)\n    if (response.resultCode === ResultCodesEnum.Success) {\n      dispatch(actions.setStatus(status))\n    }\n  }\n\nexport const savePhotoThunk =\n  (file: File): ThunkType =>\n  async (dispatch) => {\n    const response = await profileAPI.savePhotoAPI(file)\n    if (response.resultCode === ResultCodesEnum.Success) {\n      dispatch(actions.savePhotoSuccess(response.data.photos))\n    }\n  }\n\nexport const saveProfileThunk =\n  (profile: ProfileType): ThunkType =>\n  async (dispatch, getState) => {\n    const response = await profileAPI.saveProfileAPI(profile)\n    const { userID } = getState().auth\n\n    if (response.resultCode === ResultCodesEnum.Success) {\n      dispatch(getUserProfile(userID))\n      dispatch(actions.showSuccessSaveProfile('Data saved successfully!'))\n      setTimeout(dispatch, 4000, actions.showSuccessSaveProfile(''))\n      dispatch(actions.showErrorProfileContacts(''))\n    }\n\n    if (response.resultCode === ResultCodesEnum.Error) {\n      // заготовка для показа ошибки конкретного поля\n      // const key = response.data.messages[0]\n      // .match(/Contacts->(\\w+)/)[1].toLowerCase()\n      // dispatch(stopSubmit('editProfile', {\n      //   contacts: { [key]: response.data.messages[0] },\n      // }));\n      dispatch(actions.showErrorProfileContacts(response.messages[0]))\n    }\n  }\n\nexport default profileReducer\n\nexport type InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>\n","import { AppStateType } from '../redux-store'\n\nexport const getProfile = (state: AppStateType) => state.profilePage.profile\n\nexport const getStatusSelector = (state: AppStateType) =>\n  state.profilePage.status\n\nexport const getShowSuccessSave = (state: AppStateType) =>\n  state.profilePage.showSuccessSave\n\nexport const getErrorProfileContacts = (state: AppStateType) =>\n  state.profilePage.errorProfileContacts\n\nexport const getPosts = (state: AppStateType) => state.profilePage.posts\n\nexport const getPostsForDelete = (state: AppStateType) =>\n  state.profilePage.postsForDelete\n\nexport const getToggleClickDeleteSelectedPosts = (state: AppStateType) =>\n  state.profilePage.isClickDeleteSelectedPosts\n\nexport const getIsSelectedPost = (state: AppStateType) =>\n  state.profilePage.isSelectedPost\n","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport cn from 'classnames'\nimport IconButton from '@material-ui/core/IconButton'\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt'\nimport CloseIcon from '@material-ui/icons/Close'\nimport unknown from '../../../../img/no_photo.svg'\nimport s from './Post.module.css'\nimport {\n  getIsSelectedPost,\n  getPostsForDelete,\n  getToggleClickDeleteSelectedPosts,\n} from '../../../../redux/selectors/profile-selectors'\nimport { actions } from '../../../../redux/reducers/profile-reducer'\nimport Avatar from '../../../common/Avatar/Avatar'\n\nimport { PostType } from '../../../../types/types'\n\ntype OwnPropsType = {\n  photo: string | null\n  handleDeleteOnePost: (idPost: string) => void\n  addIdPostBeforeDeleting: (idPost: string) => void\n  deleteIdPostBeforeDeleting: (idPost: string) => void\n}\n\nconst Post: React.FC<PostType & OwnPropsType> = (props) => {\n  const {\n    idPost,\n    author,\n    message,\n    likesCount,\n    isLikeClick,\n    photo,\n    handleDeleteOnePost,\n    addIdPostBeforeDeleting,\n    deleteIdPostBeforeDeleting,\n  } = props\n\n  const [isClickDeletePost, setIsClickDeletePost] = useState(false)\n  const [isSelectedPostLocal, setIsSelectedPostLocal] = useState(false)\n\n  const isSelectedPost = useSelector(getIsSelectedPost)\n  const isClickDeleteSelectedPosts = useSelector(\n    getToggleClickDeleteSelectedPosts\n  )\n  const postsForDelete = useSelector(getPostsForDelete)\n  const dispatch = useDispatch()\n\n  const handleDeletePost = () => {\n    setIsClickDeletePost(true)\n    setTimeout(() => handleDeleteOnePost(idPost), 300)\n  }\n\n  const handleSetLike = () => {\n    if (!isLikeClick) {\n      dispatch(actions.setLikeOnPost(idPost))\n    } else {\n      dispatch(actions.deletetLikeOnPost(idPost))\n    }\n  }\n\n  return (\n    <div\n      className={cn(s.postContainer, {\n        [s.postDelete]:\n          isClickDeletePost ||\n          (isClickDeleteSelectedPosts && postsForDelete.includes(idPost)),\n        // добавление анимации\n      })}\n    >\n      <div className={s.post}>\n        <div className={s.columnLeft}>\n          <div\n            aria-hidden='true'\n            className={cn(\n              { [s.avatar]: !isSelectedPostLocal },\n              { [s.postSelected]: isSelectedPostLocal }\n            )}\n            onClick={() => {\n              if (!isSelectedPostLocal) {\n                // для убирания иконок-крестиков у всех постов\n                dispatch(actions.toggleIsSelectedPost(true))\n                setIsSelectedPostLocal(true)\n                // предварительное добавление поста в список на удаление\n                addIdPostBeforeDeleting(idPost)\n              } else {\n                dispatch(actions.toggleIsSelectedPost(false))\n                setIsSelectedPostLocal(false)\n                deleteIdPostBeforeDeleting(idPost)\n              }\n            }}\n          >\n            <Avatar photo={photo || unknown} size='medium' />\n          </div>\n        </div>\n\n        <div className={s.columnCenter}>\n          <div className={s.name}>{author}</div>\n          <div className={s.message}>{message}</div>\n        </div>\n\n        <div className={s.columnRight}>\n          <div hidden={isSelectedPost}>\n            <IconButton\n              aria-label='deletePost'\n              size='small'\n              onClick={handleDeletePost}\n            >\n              <CloseIcon />\n            </IconButton>\n          </div>\n          <div className={s.wrapLike}>\n            <span className={s.like}>\n              {likesCount > 0 ? `+${likesCount}` : ''}\n            </span>\n            <IconButton aria-label='like' size='small' onClick={handleSetLike}>\n              <ThumbUpAltIcon\n                style={\n                  isLikeClick ? { color: '#00bcd4' } : { color: '#b2ebf2' }\n                }\n              />\n            </IconButton>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Post\n","import { TextField } from '@material-ui/core'\n\nconst renderTextField = (props) => {\n  const {\n    label,\n    input,\n    placeholder,\n    multiline,\n    variant,\n    inputProps,\n    onInput,\n    onFocus,\n    meta: { touched, error, warning },\n    fullWidth,\n    ...custom\n  } = props\n\n  return (\n    <>\n      <TextField\n        label={label}\n        placeholder={placeholder}\n        inputProps={inputProps}\n        onInput={onInput}\n        onFocus={onFocus}\n        variant={variant}\n        multiline={multiline}\n        fullWidth={fullWidth}\n        {...input}\n        {...custom}\n      />\n      {touched &&\n        ((error && <span style={{ color: '#f44336' }}>{error}</span>) ||\n          (warning && <span>{warning}</span>))}\n    </>\n  )\n}\n\nexport default renderTextField\n","import React from 'react'\nimport { Field, InjectedFormProps, reduxForm, reset } from 'redux-form'\nimport { useDispatch, useSelector } from 'react-redux'\nimport cn from 'classnames'\nimport Button from '@material-ui/core/Button'\nimport PostAddIcon from '@material-ui/icons/PostAdd'\nimport { IconButton } from '@material-ui/core'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport {\n  getPosts,\n  getPostsForDelete,\n} from '../../../redux/selectors/profile-selectors'\nimport { getMyPhoto } from '../../../redux/selectors/auth-selectors'\nimport { actions } from '../../../redux/reducers/profile-reducer'\n\nimport Post from './Post/Post'\nimport { PostType } from '../../../types/types'\n\nimport s from './Wall.module.css'\nimport renderTextField from '../../common/ElementCustom/renderTextField.jsx'\n\nconst Wall: React.FC = () => {\n  const posts = useSelector(getPosts)\n  const postsForDelete = useSelector(getPostsForDelete)\n  const myPhoto = useSelector(getMyPhoto)\n  const dispatch = useDispatch()\n\n  React.useEffect(() => {\n    // @ts-ignore\n    const arr = JSON.parse(localStorage.getItem('posts'))\n    if (arr) {\n      dispatch(actions.initializePosts(arr))\n    }\n  }, [dispatch])\n\n  React.useEffect(() => {\n    localStorage.setItem('posts', JSON.stringify(posts))\n  }, [posts])\n\n  const handleAddPost = (values: WallValuesFormType) => {\n    if (values.newPostText && values.newPostText.length > 0) {\n      dispatch(actions.addPost(values.newPostText))\n      dispatch(reset('profileNewPostForm'))\n    }\n  }\n\n  const handleDeleteOnePost = (idPost: string) => {\n    dispatch(actions.deletePost(idPost))\n  }\n\n  const handleDeleteSelectedPost = () => {\n    // начало анимации удаления\n    dispatch(actions.toggleIsClickDeleteSelectedPosts(true))\n    // возвращаем индивидуальные иконки-крестики у всех постов\n    dispatch(actions.toggleIsSelectedPost(false))\n\n    setTimeout(() => {\n      postsForDelete.forEach((p) => {\n        dispatch(actions.deletePost(p))\n      })\n      dispatch(actions.clearPostsForDelete())\n\n      // конец анимации удаления\n      dispatch(actions.toggleIsClickDeleteSelectedPosts(false))\n    }, 600)\n  }\n\n  const addIdPostBeforeDeleting = (idPost: string) => {\n    dispatch(actions.setPostForDeleting(idPost))\n  }\n\n  const deleteIdPostBeforeDeleting = (idPost: string) => {\n    dispatch(actions.deletePostForDeleting(idPost))\n  }\n\n  const postsElements = posts.map((p: PostType) => (\n    <Post\n      key={p.idPost}\n      idPost={p.idPost}\n      author={p.author}\n      message={p.message}\n      likesCount={p.likesCount}\n      isLikeClick={p.isLikeClick}\n      photo={myPhoto}\n      handleDeleteOnePost={handleDeleteOnePost}\n      addIdPostBeforeDeleting={addIdPostBeforeDeleting}\n      deleteIdPostBeforeDeleting={deleteIdPostBeforeDeleting}\n    />\n  ))\n\n  return (\n    <div className={s.container}>\n      <div\n        hidden={postsForDelete.length === 0}\n        className={cn({ [s.basket]: postsForDelete.length > 0 })}\n      >\n        <Button\n          onClick={() => handleDeleteSelectedPost()}\n          variant='contained'\n          color='primary'\n          style={{ color: 'white', width: '100%', height: '100%' }}\n          startIcon={<DeleteIcon />}\n        >\n          Delete\n        </Button>\n      </div>\n\n      {postsForDelete.length === 0 && (\n        // @ts-ignore\n        <PostReduxForm onSubmit={handleAddPost} />\n      )}\n\n      <div className={s.posts}>\n        {postsElements}\n        {!posts.length && (\n          <div className={s.noPosts}>\n            <span>No posts yet...</span>\n            <span>Write something!</span>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nconst AddNewPostForm: React.FC<InjectedFormProps<WallValuesFormType>> = ({\n  handleSubmit,\n}) => {\n  const stylesAddPostButton = {\n    color: 'white',\n    margin: '10px 0 10px 10px',\n    width: '140px',\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className={s.form}>\n        <Field\n          component={renderTextField}\n          name='newPostText'\n          placeholder='Enter the post text...'\n          multiline\n          fullWidth\n          variant='outlined'\n          inputProps={{ maxLength: 1000 }}\n        />\n        <div className={s.buttonBig}>\n          <Button\n            type='submit'\n            variant='contained'\n            color='primary'\n            style={stylesAddPostButton}\n            endIcon={<PostAddIcon />}\n          >\n            Add post\n          </Button>\n        </div>\n        <div hidden className={s.buttonIcon}>\n          <IconButton aria-label='addPost' type='submit'>\n            <PostAddIcon color='primary' />\n          </IconButton>\n        </div>\n      </div>\n    </form>\n  )\n}\n\ntype WallValuesFormType = {\n  newPostText: string\n}\n\nconst PostReduxForm = reduxForm<WallValuesFormType>({\n  form: 'profileNewPostForm',\n})(AddNewPostForm)\n\nexport default Wall\n","// Памятка:\n// 1. import {\n// handleInputCount, handleFocusCount, handleBlurCount\n// } from '../../../common/inputCount/inputCount';\n// 2. Передать в input:\n// name='...'\n// onInput={handleInputCount.bind(null, num100)}\n// onFocus={handleFocusCount}\n// onBlur={handleBlurCount}\n// 3. Добавить в компоненту:\n// const num100 = 100;\n// 4. Добавить в компоненту:\n// <span id='statusWrapCount' className={s.countStyle}>\n// <span id='statusCount'></span> of 100\n// </span>\n// 5. Задать родителю span-a:\n// position: relative;\n// 6. Если нужно, чтобы не был виден счётчик при первом отображении input, применить:\n// .countStyle {display: none;}\n\nexport const handleFocusCount = (e) => {\n  e.target.select()\n\n  document.getElementById(`${e.target.name}Count`).textContent =\n    e.target.value.length\n\n  const elem = document.getElementById(`${e.target.name}WrapCount`)\n  elem.style.display = 'inline-block'\n  elem.style.fontSize = '10px'\n  elem.style.position = 'absolute'\n  elem.style.right = '10px'\n  elem.style.top = 0\n}\n\nexport const handleBlurCount = (e) => {\n  document.getElementById(`${e.target.name}WrapCount`).style.display = 'none'\n}\n\nexport const handleInputCount = (num, e) => {\n  const wrap = `${e.target.name}WrapCount`\n  const count = `${e.target.name}Count`\n  const { length } = e.target.value\n\n  if (length < num - 10) document.getElementById(wrap).style.color = 'white'\n  if (length >= num - 10) document.getElementById(wrap).style.color = 'yellow'\n  if (length === num) document.getElementById(wrap).style.color = 'red'\n\n  document.getElementById(count).textContent = e.target.value.length\n}\n","import { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n  inputProfileStatus: {\n    minHeight: '30px',\n    maxHeight: '180px',\n    lineHeight: '25px',\n    padding: theme.spacing(1),\n    backgroundColor: '#4F4F4F',\n    borderRadius: '5px 5px 0 0',\n  },\n}))\n\nexport default useStyles\n","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Input, Button } from '@material-ui/core'\nimport SaveIcon from '@material-ui/icons/Save'\nimport CloseIcon from '@material-ui/icons/Close'\nimport { getStatusSelector } from '../../../../redux/selectors/profile-selectors'\nimport { updateStatus } from '../../../../redux/reducers/profile-reducer'\n\nimport {\n  handleInputCount,\n  handleFocusCount,\n  handleBlurCount,\n} from '../../../common/inputCount/inputCount.js'\n\nimport s from './Status.module.css'\nimport useStyles from '../../../common/ElementCustom/InputCustomProfileStatus.jsx'\n\ntype PropsType = {\n  isOwner: boolean\n}\n\nconst Status: React.FC<PropsType> = (props) => {\n  const { isOwner } = props\n  const classes = useStyles()\n\n  const stylesSaveAndButton = {\n    color: '#fff',\n    margin: 10,\n    width: '100%',\n  }\n\n  const status = useSelector(getStatusSelector)\n  const dispatch = useDispatch()\n\n  const [editMode, setEditMode] = useState(false)\n  const [statusLocal, setStatusLocal] = useState(status)\n\n  useEffect(() => {\n    setStatusLocal(status)\n  }, [status])\n\n  const activateEditMode = () => setEditMode(true)\n  const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) =>\n    setStatusLocal(e.currentTarget.value)\n  const cancelEditMode = () => setEditMode(false)\n\n  const saveStatus = () => {\n    dispatch(updateStatus(statusLocal))\n    setEditMode(false)\n  }\n\n  const num300 = 300\n\n  return (\n    <div className={s.container}>\n      {editMode && (\n        <div className={s.wrap}>\n          <Input\n            name='status'\n            value={statusLocal}\n            placeholder='Your status...'\n            autoFocus\n            inputProps={{ maxLength: 300 }}\n            className={classes.inputProfileStatus}\n            multiline\n            fullWidth\n            onInput={handleInputCount.bind(null, num300)}\n            onFocus={handleFocusCount}\n            onBlur={handleBlurCount}\n            onChange={onStatusChange}\n          />\n\n          <div className={s.buttons}>\n            <div className={s.buttonWrap}>\n              <Button\n                onClick={saveStatus}\n                variant='contained'\n                color='primary'\n                style={stylesSaveAndButton}\n                startIcon={<SaveIcon />}\n              >\n                Save\n              </Button>\n            </div>\n            <div className={s.buttonWrap}>\n              <Button\n                onClick={cancelEditMode}\n                variant='outlined'\n                style={stylesSaveAndButton}\n                startIcon={<CloseIcon />}\n              >\n                Cancel\n              </Button>\n            </div>\n\n            <span id='statusWrapCount'>\n              <span id='statusCount' /> of 300\n            </span>\n          </div>\n        </div>\n      )}\n\n      {isOwner && !editMode && (\n        <div aria-hidden='true' className={s.status} onClick={activateEditMode}>\n          {status || (\n            <span className={s.statusEmpty}>Your status is empty</span>\n          )}\n        </div>\n      )}\n\n      {!isOwner && status && <div className={s.statusNotMy}>{status}</div>}\n    </div>\n  )\n}\n\nexport default Status\n","import { FormControlLabel, Checkbox } from '@material-ui/core'\n\nconst renderCheckbox = ({ input, label }) => (\n  <div>\n    <FormControlLabel\n      control={<Checkbox checked={!!input.value} onChange={input.onChange} />}\n      label={label}\n      labelPlacement='start'\n      style={{ marginLeft: 0 }}\n    />\n  </div>\n)\n\nexport default renderCheckbox\n","import React from 'react'\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\n\nimport cn from 'classnames'\nimport renderTextField from '../../../common/ElementCustom/renderTextField.jsx'\nimport renderCheckbox from '../../../common/ElementCustom/renderCheckbox.jsx'\nimport {\n  handleInputCount,\n  handleFocusCount,\n  handleBlurCount,\n} from '../../../common/inputCount/inputCount.js'\nimport s from './InfoDataForm.module.css'\n\nimport { ProfileType } from '../../../../types/types'\n\ntype OwnPropsType = {\n  errorProfileContacts: string\n  initialValues: ProfileType\n}\n\nconst DataForm: React.FC<\n  InjectedFormProps<ProfileType, OwnPropsType> & OwnPropsType\n> = (props) => {\n  const { handleSubmit, initialValues, errorProfileContacts } = props\n\n  const num100 = 100\n  const num1000 = 1000\n\n  return (\n    <form onSubmit={handleSubmit} className={s.form}>\n      <h1 className={s.titleForm}>Edit profile</h1>\n\n      <div className={cn(s.wrap, s.wrapForCount)}>\n        <Field\n          component={renderTextField}\n          name='fullName'\n          label='Name:'\n          placeholder='Your name'\n          variant='filled'\n          fullWidth\n          inputProps={{ maxLength: 100 }}\n          onInput={handleInputCount.bind(null, num100)}\n          onFocus={handleFocusCount}\n          onBlur={handleBlurCount}\n        />\n        <span id='fullNameWrapCount' className={s.countStyle}>\n          <span id='fullNameCount' /> of 100\n        </span>\n      </div>\n\n      <div className={cn(s.wrap, s.wrapForCount)}>\n        <Field\n          component={renderTextField}\n          name='aboutMe'\n          label='About me:'\n          placeholder='Write about yourself!'\n          multiline\n          fullWidth\n          variant='filled'\n          inputProps={{ maxLength: 1000 }}\n          onInput={handleInputCount.bind(null, num1000)}\n          onFocus={handleFocusCount}\n          onBlur={handleBlurCount}\n        />\n        <span id='aboutMeWrapCount' className={s.countStyle}>\n          <span id='aboutMeCount' /> of 1000\n        </span>\n      </div>\n\n      <div className={s.wrap}>\n        <Field\n          component={renderCheckbox}\n          name='lookingForAJob'\n          label='Are you looking for a job?'\n        />\n      </div>\n\n      <div className={cn(s.wrap, s.wrapForCount)}>\n        <Field\n          component={renderTextField}\n          name='lookingForAJobDescription'\n          label='Professional skills:'\n          placeholder='What you can do?'\n          multiline\n          fullWidth\n          variant='filled'\n          inputProps={{ maxLength: 1000 }}\n          onInput={handleInputCount.bind(null, num1000)}\n          onFocus={handleFocusCount}\n          onBlur={handleBlurCount}\n        />\n        <span id='lookingForAJobDescriptionWrapCount' className={s.countStyle}>\n          <span id='lookingForAJobDescriptionCount' /> of 1000\n        </span>\n      </div>\n\n      <div className={s.wrap}>\n        <div className={s.titleAllContacts}>Contacts:</div>\n\n        {errorProfileContacts ? (\n          <div className={s.errorProfileContacts}>{errorProfileContacts}</div>\n        ) : (\n          <></>\n        )}\n\n        {Object.keys(initialValues.contacts).map((key) => (\n          <div className={s.contact} key={key}>\n            <div className={s.titleContact}>{key}:</div>\n            <Field\n              component={renderTextField}\n              name={`contacts.${key}`}\n              multiline\n              fullWidth\n              placeholder='https://...'\n            />\n          </div>\n        ))}\n      </div>\n    </form>\n  )\n}\n\nconst InfoDataForm = reduxForm<ProfileType, OwnPropsType>({\n  form: 'editProfile',\n})(DataForm)\n\nexport default InfoDataForm\n","import React from 'react'\nimport { ProfileType, СontactsType } from '../../../../types/types'\nimport s from './InfoData.module.css'\n\ntype PropsType = {\n  profile: ProfileType\n}\n\nconst InfoData: React.FC<PropsType> = ({ profile }) => (\n  <div className={s.containerForm}>\n    <div className={s.wrap}>\n      {profile.aboutMe && (\n        <div className={s.aboutMe}>\n          <div className={s.title}>About me:</div>\n          <div className={s.text}>{profile.aboutMe}</div>\n        </div>\n      )}\n    </div>\n\n    <div className={s.wrap}>\n      <div className={s.job}>\n        <div className={s.title}>Job search:</div>\n        {profile.lookingForAJob ? (\n          <div className={s.text}>Now looking for a job!</div>\n        ) : (\n          <div className={s.text}>I&#39;m not looking for a job</div>\n        )}\n      </div>\n    </div>\n\n    <div className={s.wrap}>\n      {profile.lookingForAJobDescription && (\n        <div className={s.job}>\n          <div className={s.title}>Professional skills:</div>\n          <div className={s.text}>{profile.lookingForAJobDescription}</div>\n        </div>\n      )}\n    </div>\n\n    <div className={s.wrap}>\n      {Object.values(profile.contacts).some((el) => el && el !== '') && (\n        <div className={s.contacts}>\n          <div className={s.title}>My contacts</div>\n          {Object.keys(profile.contacts).map((key) => (\n            <Contact\n              key={key}\n              contactTitle={key}\n              contactValue={profile.contacts[key as keyof СontactsType]}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  </div>\n)\n\ntype ContactPropsType = {\n  contactTitle: string\n  contactValue: string\n}\n\nconst Contact: React.FC<ContactPropsType> = React.memo(\n  ({ contactTitle, contactValue }) => (\n    <>\n      {contactValue && (\n        <div className={s.contact}>\n          <span className={s.contactTitle}>{contactTitle}:</span>\n          <div className={s.contactTextWrap}>\n            <a className={s.contactText} href={contactValue}>\n              {contactValue.replace(/(?:https?):\\/\\/([^/\\s]+)[^\\s]*/gi, '$1')}\n            </a>\n          </div>\n        </div>\n      )}\n    </>\n  )\n)\n\nexport default InfoData\n","export default __webpack_public_path__ + \"static/media/camera.12909c41.svg\";","import React, { useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { submit } from 'redux-form'\nimport Button from '@material-ui/core/Button'\nimport EditIcon from '@material-ui/icons/Edit'\nimport SaveIcon from '@material-ui/icons/Save'\nimport CloseIcon from '@material-ui/icons/Close'\nimport {\n  getErrorProfileContacts,\n  getProfile,\n  getShowSuccessSave,\n} from '../../../redux/selectors/profile-selectors'\nimport {\n  savePhotoThunk,\n  saveProfileThunk,\n} from '../../../redux/reducers/profile-reducer'\nimport { ProfileType } from '../../../types/types'\n\nimport Preloader from '../../common/Preloader/Preloader.jsx'\nimport Status from './Status/Status'\nimport Avatar from '../../common/Avatar/Avatar'\nimport InfoDataForm from './InfoDataForm/InfoDataForm'\nimport InfoData from './InfoData/InfoData'\n\nimport s from './InfoContainer.module.css'\nimport camera from '../../../img/icons/camera.svg'\n\n// при переходе на старницу профиля скрол обнулится\nfunction ScrollToTopOnMount() {\n  useEffect(() => {\n    window.scrollTo(0, 0)\n  }, [])\n  return null\n}\n\ntype OwnPropsType = {\n  isOwner: boolean\n}\n\nconst ProfileInfo: React.FC<OwnPropsType> = ({ isOwner }) => {\n  const stylesSaveAndCancelButton = {\n    fontSize: 12,\n    color: '#fff',\n    margin: 10,\n  }\n  const stylesEditButton = {\n    fontSize: 12,\n    marginTop: 20,\n  }\n\n  const [editModeProfile, setEditModeProfile] = useState(false)\n\n  // for InfoDataForm\n  const errorProfileContacts = useSelector(getErrorProfileContacts)\n\n  const profile = useSelector(getProfile)\n  const showSuccessSave = useSelector(getShowSuccessSave)\n  const dispatch = useDispatch()\n\n  const onSubmit = (values: ProfileType) => {\n    dispatch(saveProfileThunk(values))\n  }\n\n  const onMainPhotoSelected = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files?.length) {\n      dispatch(savePhotoThunk(e.target.files[0]))\n    }\n  }\n\n  if (!profile) {\n    return <Preloader />\n  }\n\n  return (\n    <div className={s.containerMain}>\n      {/* при переходе на старницу профиля скрол обнулится */}\n      <ScrollToTopOnMount />\n\n      <div className={s.columnLeft}>\n        <Avatar photo={profile.photos.large} size='large'>\n          {isOwner && !editModeProfile && (\n            <div className={s.camera}>\n              <label htmlFor='file_out'>\n                <div className={s.wrapImg}>\n                  <img src={camera} alt='icon' />\n                </div>\n                <input\n                  id='file_out'\n                  className={s.editPhotoInput}\n                  type='file'\n                  onChange={onMainPhotoSelected}\n                />\n              </label>\n            </div>\n          )}\n        </Avatar>\n\n        {isOwner && !editModeProfile && (\n          <Button\n            onClick={() => setEditModeProfile(true)}\n            variant='outlined'\n            style={stylesEditButton}\n            startIcon={<EditIcon style={{ fontSize: 16 }} />}\n          >\n            Edit profile\n          </Button>\n        )}\n\n        {editModeProfile && (\n          <div className={s.buttonsSaveAndCancelProfile}>\n            <Button\n              onClick={() => dispatch(submit('editProfile'))}\n              variant='contained'\n              color='primary'\n              fullWidth\n              style={stylesSaveAndCancelButton}\n              startIcon={<SaveIcon />}\n            >\n              Save\n            </Button>\n            <Button\n              onClick={() => setEditModeProfile(false)}\n              variant='outlined'\n              fullWidth\n              style={stylesSaveAndCancelButton}\n              startIcon={<CloseIcon />}\n            >\n              Cancel\n            </Button>\n          </div>\n        )}\n\n        {editModeProfile && showSuccessSave && (\n          <div className={s.successSave}>{showSuccessSave}</div>\n        )}\n      </div>\n\n      <div className={s.columnRight}>\n        {!editModeProfile && (\n          <div className={s.fullName}>{profile.fullName}</div>\n        )}\n\n        {!editModeProfile && <Status isOwner={isOwner} />}\n\n        {editModeProfile ? (\n          <InfoDataForm\n            initialValues={profile}\n            errorProfileContacts={errorProfileContacts}\n            onSubmit={onSubmit}\n          />\n        ) : (\n          <InfoData profile={profile} />\n        )}\n      </div>\n    </div>\n  )\n}\n\nconst InfoContainer = ProfileInfo\nexport default InfoContainer\n","import React from 'react'\nimport { compose } from 'redux'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router'\nimport { RouteComponentProps } from 'react-router-dom'\nimport { AppStateType } from '../../redux/redux-store'\nimport { getUserProfile, getStatus } from '../../redux/reducers/profile-reducer'\n\nimport withAuthRedirect from '../hoc/withAuthRedirect'\nimport Wall from './Wall/Wall'\nimport InfoContainer from './Info/InfoContainer'\n\ntype MapStatePropsType = {\n  authorizedUserID: number | null\n}\n\ntype MapDispatchPropsType = {\n  getUserProfile: (userId: number) => void\n  getStatus: (userId: number) => void\n}\n\ntype PathParamsType = {\n  userId: string\n}\n\ntype PropsType = MapStatePropsType &\n  MapDispatchPropsType &\n  RouteComponentProps<PathParamsType>\n\nclass ProfileContainer extends React.PureComponent<PropsType> {\n  componentDidMount() {\n    this.refreshProfile()\n  }\n\n  componentDidUpdate(prevProps: PropsType) {\n    const { match } = this.props\n    // рендер при переходе с одной страницы на другую\n    if (match.params.userId !== prevProps.match.params.userId) {\n      this.refreshProfile()\n    }\n  }\n\n  refreshProfile() {\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    const { match, authorizedUserID, history, getUserProfile, getStatus } =\n      this.props\n    let userId: number | null = +match.params.userId\n\n    if (!userId) {\n      userId = authorizedUserID\n      if (!userId) {\n        history.push('/login')\n      }\n    }\n\n    getUserProfile(userId as number)\n    getStatus(userId as number)\n  }\n\n  render() {\n    const { match, authorizedUserID } = this.props\n    return (\n      <>\n        <InfoContainer isOwner={+match.params.userId === authorizedUserID} />\n        <Wall />\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\n  return {\n    authorizedUserID: state.auth.userID,\n  }\n}\n\nexport default compose<React.ComponentType>(\n  connect<\n    MapStatePropsType,\n    MapDispatchPropsType,\n    RouteComponentProps<PathParamsType>,\n    AppStateType\n  >(mapStateToProps, {\n    getUserProfile,\n    getStatus,\n  }),\n  withRouter,\n  withAuthRedirect\n)(ProfileContainer)\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Redirect } from 'react-router'\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\nimport cn from 'classnames'\nimport Button from '@material-ui/core/Button'\nimport {\n  getAuthorizedUserID,\n  getCaptchaURL,\n  getIsAuth,\n} from '../../redux/selectors/auth-selectors'\nimport { loginThunk } from '../../redux/reducers/auth-reducer'\n\nimport s from './Login.module.css'\nimport renderTextField from '../common/ElementCustom/renderTextField.jsx'\nimport renderCheckbox from '../common/ElementCustom/renderCheckbox.jsx'\n\nconst validate = (values: LoginFormValuesType) => {\n  type ErrorsType = {\n    email?: string\n    password?: string\n    captcha?: string\n  }\n\n  const errors: ErrorsType = {}\n\n  if (\n    values.email &&\n    !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n  ) {\n    errors.email = 'Invalid email address'\n  }\n\n  return errors\n}\n\ntype OwnPropsType = {\n  captchaURL: string | null\n}\n\ntype LoginFormValuesType = {\n  email: string\n  password: string\n  rememberMe: boolean\n  captcha: string\n}\n\nconst Login: React.FC = () => {\n  const isAuth = useSelector(getIsAuth)\n  const captchaURL = useSelector(getCaptchaURL)\n  const userID = useSelector(getAuthorizedUserID)\n  const dispatch = useDispatch()\n\n  const onSubmit = (values: LoginFormValuesType) => {\n    dispatch(\n      loginThunk(\n        values.email,\n        values.password,\n        values.rememberMe,\n        values.captcha\n      )\n    )\n  }\n\n  if (isAuth) {\n    return <Redirect to={`/profile/${userID}`} />\n  }\n\n  return (\n    <div className={s.wrap}>\n      <div className={s.body}>\n        <h1>Log in</h1>\n        <LoginReduxForm onSubmit={onSubmit} captchaURL={captchaURL} />\n      </div>\n    </div>\n  )\n}\n\nconst LoginForm: React.FC<\n  InjectedFormProps<LoginFormValuesType, OwnPropsType> & OwnPropsType\n> = ({ handleSubmit, error, captchaURL }) => {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const stylesLoginButton: any = {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#fff',\n  }\n\n  const dispatch = useDispatch()\n\n  const onTestAccountSubmit = (email: string, password: string) => {\n    dispatch(loginThunk(email, password, false, null))\n  }\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <div className={s.loginBlockSubstrate}>\n          <div className={s.loginBlock}>\n            <div className={s.row}>\n              <Field\n                component={renderTextField}\n                name='email'\n                label='Email:'\n                type='email'\n                fullWidth\n              />\n            </div>\n            <div className={s.row}>\n              <Field\n                component={renderTextField}\n                name='password'\n                label='Password:'\n                type='password'\n                fullWidth\n              />\n            </div>\n            <div className={cn(s.row, s.rowCheckbox)}>\n              <Field\n                component={renderCheckbox}\n                name='rememberMe'\n                label='Remember me'\n              />\n            </div>\n\n            {captchaURL && <img src={captchaURL} alt='captcha' />}\n            {captchaURL && (\n              <Field component={renderTextField} fullWidth name='captcha' />\n            )}\n\n            <div className={s.row}>\n              <Button\n                type='submit'\n                variant='contained'\n                color='primary'\n                fullWidth\n                style={stylesLoginButton}\n              >\n                Log in\n              </Button>\n\n              {error && (\n                <div className={s.formError}>\n                  {error === 'You are not authorized' ? (\n                    <>\n                      <div>You are not authorized</div>\n                      <div>(please, unblock third party cookies)</div>\n                    </>\n                  ) : (\n                    error\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n        <p>or</p>\n        <Button\n          onClick={() => onTestAccountSubmit('free@samuraijs.com', 'free')}\n          variant='contained'\n          color='secondary'\n          fullWidth\n          style={stylesLoginButton && { marginBottom: '15px' }}\n        >\n          Login to test account\n        </Button>\n      </form>\n    </>\n  )\n}\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, OwnPropsType>({\n  form: 'loginForm',\n  validate,\n})(LoginForm)\n\nexport default Login\n","import React from 'react'\nimport { Route, withRouter, Switch, Redirect } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { AppStateType } from './redux/redux-store'\nimport { initializeAppThunk } from './redux/reducers/app-reducer'\nimport { getAuthorizedUserID } from './redux/selectors/auth-selectors'\n\nimport Preloader from './components/common/Preloader/Preloader.jsx'\nimport withSuspense from './components/hoc/withSuspense'\n\nimport s from './App.module.css'\nimport Header from './components/Header/Header'\nimport Navbar from './components/Navbar/Navbar'\nimport ProfileContainer from './components/Profile/ProfileContainer'\nimport Login from './components/Login/Login'\n\n// TODO Nothing was returned from render. This usually means a return\n// TODO statement is missing. Or, to render nothing, return null\n// import ErrorBoundary from './components/Error/ErrorBoundary.jsx'\n\nconst ChatContainer = React.lazy(() => import('./components/Chat/Chat'))\nconst UsersContainer = React.lazy(\n  () => import('./components/Users/UsersContainer')\n)\n\nconst SuspendedChat = withSuspense(ChatContainer)\nconst SuspendedUsers = withSuspense(UsersContainer)\n\nconst App: React.FC = () => {\n  const initialized = useSelector(\n    (state: AppStateType) => state.app.initialized\n  )\n  const userID = useSelector(getAuthorizedUserID)\n  const dispatch = useDispatch()\n\n  React.useEffect(() => {\n    dispatch(initializeAppThunk())\n  }, [dispatch])\n\n  if (!initialized) {\n    return <Preloader />\n  }\n\n  return (\n    <div className={s.fon}>\n      <div className={s.container}>\n        <div className={s.appWrapper}>\n          <Header />\n          <Navbar />\n\n          <div className={s.appWrapperContent}>\n            {/* <ErrorBoundary> */}\n            <Switch>\n              <Redirect from='/profile/undefined' to='/' />\n\n              <Route\n                path='/profile/:userId'\n                render={() => <ProfileContainer />}\n              />\n\n              <Route path='/chat' render={() => <SuspendedChat />} />\n\n              <Route path='/friends' render={() => <SuspendedUsers />} />\n\n              <Route path='/users' render={() => <SuspendedUsers />} />\n\n              <Route path='/login' render={() => <Login />} />\n\n              <Redirect exact from='/' to={`/profile/${userID}`} />\n\n              <Redirect from='*' to='/' />\n            </Switch>\n            {/* </ErrorBoundary> */}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst AppContainer = withRouter(App)\nexport default AppContainer\n","import {\n  applyMiddleware,\n  combineReducers,\n  createStore,\n  compose,\n  Action,\n} from 'redux'\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk'\nimport { reducer as formReducer } from 'redux-form'\n\nimport authReducer from './reducers/auth-reducer'\nimport profileReducer from './reducers/profile-reducer'\nimport usersReducer from './reducers/users-reducer'\nimport appReducer from './reducers/app-reducer'\nimport chatReducer from './reducers/chat-reducer'\n\nconst rootReducer = combineReducers({\n  profilePage: profileReducer,\n  usersPage: usersReducer,\n  auth: authReducer,\n  app: appReducer,\n  form: formReducer,\n  chat: chatReducer,\n})\n\n// types state app\ntype RootReducerType = typeof rootReducer\nexport type AppStateType = ReturnType<RootReducerType>\n\n// types actions\nexport type InferActionsTypes<T> = T extends {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: (...args: any[]) => infer U\n}\n  ? U\n  : never\n\n// type thunks\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<\n  R,\n  AppStateType,\n  unknown,\n  A\n>\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n// @ts-ignore\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunkMiddleware))\n)\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { HashRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux'\n\nimport {\n  createMuiTheme,\n  ThemeProvider,\n  responsiveFontSizes,\n} from '@material-ui/core/styles'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport cyan from '@material-ui/core/colors/cyan'\nimport AppContainer from './App'\nimport store from './redux/redux-store'\n\nlet theme = createMuiTheme({\n  palette: {\n    type: 'dark', // светлый текст\n    primary: {\n      main: cyan[600], // #00bcd4\n      // синий цвет (кнопки, активные ссылки в навигации, декоративные линии)\n    },\n    secondary: {\n      main: cyan[800], // #00838f\n      // кнопка в Login для входа в тестовый аккаунт\n\n      // #b2ebf2 // cyan[100]\n      // like on Wall before pressing\n\n      // #919191\n      // фон светлее общего (hover и текст в profileForm)\n\n      // #222831\n      // фон header, nav, content\n\n      // #4F4F4F\n      // фон подложки\n\n      // #5E5E5E\n      // средний серый (фон статуса при редактировании)\n\n      // #f44336\n      // ошибки\n    },\n  },\n})\n\ntheme = responsiveFontSizes(theme)\n\nReactDOM.render(\n  <HashRouter>\n    <ThemeProvider theme={theme}>\n      <Provider store={store}>\n        <CssBaseline />\n        <AppContainer />\n      </Provider>\n    </ThemeProvider>\n  </HashRouter>,\n  document.getElementById('root')\n)\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Login_wrap__18LVK\",\"body\":\"Login_body__2Hhs9\",\"loginBlockSubstrate\":\"Login_loginBlockSubstrate__vSjvc\",\"loginBlock\":\"Login_loginBlock__1YvP4\",\"row\":\"Login_row__3d41Y\",\"rowCheckbox\":\"Login_rowCheckbox__4sYwU\",\"formError\":\"Login_formError__3j1Nj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"camera\":\"InfoContainer_camera__IpD6r\",\"wrapImg\":\"InfoContainer_wrapImg__10vd-\",\"editPhotoInput\":\"InfoContainer_editPhotoInput__XccDx\",\"containerMain\":\"InfoContainer_containerMain__3Xio4\",\"columnLeft\":\"InfoContainer_columnLeft__1_kJ8\",\"columnRight\":\"InfoContainer_columnRight__2qyh0\",\"iconButtonEditProfile\":\"InfoContainer_iconButtonEditProfile__26Jz-\",\"fullName\":\"InfoContainer_fullName__7Hk3o\",\"buttonsSaveAndCancelProfile\":\"InfoContainer_buttonsSaveAndCancelProfile__1uVyp\",\"successSave\":\"InfoContainer_successSave__23-f5\",\"anim\":\"InfoContainer_anim__QEFY8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3vTSi\",\"logoAndTitle\":\"Header_logoAndTitle__1mTjG\",\"headerTitle\":\"Header_headerTitle__2wZ_g\",\"rightPart\":\"Header_rightPart__sDTHI\",\"loginAndPhoto\":\"Header_loginAndPhoto__3okUT\",\"loginName\":\"Header_loginName__3CaV_\",\"logoutImg\":\"Header_logoutImg__1QW2c\",\"buttonMobile\":\"Header_buttonMobile__3V8e5\",\"buttonDesctop\":\"Header_buttonDesctop__38OBn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Status_container__BDZoe\",\"wrap\":\"Status_wrap__1mMIC\",\"buttons\":\"Status_buttons__KMxYA\",\"buttonWrap\":\"Status_buttonWrap__3yn6L\",\"status\":\"Status_status__27mFj\",\"statusNotMy\":\"Status_statusNotMy__3afoa\",\"statusEmpty\":\"Status_statusEmpty__1-cAn\",\"buttonSave\":\"Status_buttonSave__2MrEy\",\"buttonCancel\":\"Status_buttonCancel__10fUe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Wall_container__1uEMX\",\"basket\":\"Wall_basket__2aZZt\",\"form\":\"Wall_form__1YCMY\",\"posts\":\"Wall_posts__3mtx3\",\"noPosts\":\"Wall_noPosts__1JAeH\",\"buttonBig\":\"Wall_buttonBig__2ICre\",\"buttonIcon\":\"Wall_buttonIcon__1RU9G\"};","import React from 'react'\nimport cn from 'classnames'\nimport unknown from '../../../img/no_photo.svg'\nimport s from './Avatar.module.css'\n\ntype SizeType = 'small' | 'medium' | 'large'\n\ntype PropsType = {\n  photo: string | null | undefined\n  size: SizeType\n}\n\nconst Avatar: React.FC<PropsType> = ({ photo, size, children }) => (\n  <div className={s.avatarWrap}>\n    <div\n      className={cn(\n        s.avatar,\n        { [s.large]: size === 'large' },\n        { [s.medium]: size === 'medium' },\n        { [s.small]: size === 'small' }\n      )}\n    >\n      <img src={photo || unknown} alt='avatar' />\n      {children}\n    </div>\n  </div>\n)\n\nexport default Avatar\n","export default __webpack_public_path__ + \"static/media/preloader.a2993579.svg\";","import React from 'react'\nimport preloader from '../../../img/preloader.svg'\n\nconst stylesContainer = {\n  position: 'absolute',\n  left: 'calc(50% - 85px)',\n}\n\nconst stylesWrap = {\n  display: 'flex',\n  justifyContent: 'center',\n}\n\nconst Preloader = () => {\n  return (\n    <div style={stylesContainer}>\n      <div style={stylesWrap}>\n        <img src={preloader} alt='preloader' />\n      </div>\n    </div>\n  )\n}\n\nexport default Preloader\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Avatar_avatar__3Sz_o\",\"avatarWrap\":\"Avatar_avatarWrap__3LEkK\",\"small\":\"Avatar_small__qQzaA\",\"medium\":\"Avatar_medium__17vM9\",\"large\":\"Avatar_large__2zfpp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fon\":\"App_fon__Rn3Sm\",\"container\":\"App_container__2T05O\",\"appWrapper\":\"App_appWrapper__1hlCE\",\"appWrapperContent\":\"App_appWrapperContent__1C2YH\"};"],"sourceRoot":""}