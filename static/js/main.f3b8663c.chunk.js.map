{"version":3,"sources":["components/common/Avatar/Avatar.tsx","img/no_photo.svg","components/Profile/Wall/Wall.module.css","components/hoc/withAuthRedirect.tsx","api/api.ts","api/users-api.ts","redux/reducers/users-reducer.ts","api/chat-api.ts","redux/reducers/chat-reducer.ts","components/Profile/Info/InfoData/InfoData.module.css","components/Profile/Info/InfoDataForm/InfoDataForm.module.css","components/Navbar/Navbar.module.css","redux/selectors/auth-selectors.ts","api/auth-api.ts","api/security-api.ts","api/profile-api.ts","redux/reducers/auth-reducer.ts","redux/reducers/messages-reducer.ts","redux/reducers/profile-reducer.ts","redux/reducers/app-reducer.ts","redux/redux-store.ts","components/hoc/withSuspense.tsx","img/icons/logo.svg","img/icons/logout.svg","components/Header/Header.tsx","components/Navbar/Navbar.tsx","img/avatar_2.jpg","components/Profile/Wall/Post/Post.tsx","components/common/ElementCustom/renderTextField.js","components/Profile/Wall/Wall.tsx","components/Profile/Wall/WallContainer.tsx","redux/selectors/profile-selectors.ts","components/common/inputCount/inputCount.js","components/common/ElementCustom/InputCustomProfileStatus.jsx","components/Profile/Info/Status/Status.tsx","components/common/ElementCustom/renderCheckbox.js","components/Profile/Info/InfoDataForm/InfoDataForm.tsx","components/Profile/Info/InfoData/InfoData.tsx","img/icons/camera.svg","components/Profile/Info/InfoContainer.tsx","components/Profile/ProfileContainer.tsx","components/Login/Login.tsx","components/Error/ErrorBoundary.jsx","App.tsx","index.js","components/Profile/Info/InfoContainer.module.css","components/Header/Header.module.css","components/Profile/Info/Status/Status.module.css","components/Login/Login.module.css","components/Profile/Wall/Post/Post.module.css","img/preloader.svg","components/common/Preloader/Preloader.jsx","components/common/Avatar/Avatar.module.css","App.module.css"],"names":["Avatar","photo","size","children","className","s","avatarWrap","cn","avatar","large","medium","small","src","unknown","alt","module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","ResultCodesEnum","ResultCodeForCaptcha","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","term","friend","get","response","data","followUser","id","post","unfollowUser","delete","initialState","users","totalUsersCount","isFetching","followingInProgress","actions","followSuccess","userID","type","unfollowSuccess","setUsers","addUsers","setTotalUsersCount","count","clearUsers","toggleIsFetching","toggleFollowingProgress","page","dispatch","getState","a","usersPage","length","items","totalCount","_followUnfollowFlow","apiMethod","actionCreator","resultCode","Success","follow","bind","unfollow","usersReducer","action","map","u","followed","filter","ws","subscribers","notifySubscribersAboutStatus","status","forEach","reconnect","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","openHandler","errorHandler","console","error","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","message","send","messages","payload","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","stopMessagesListening","sendMessage","chatReducer","m","v1","item","index","array","getLogin","login","getIsAuth","getAuthorizedUserID","getCaptchaURL","captchaURL","getMyPhoto","myPhoto","authAPI","email","password","rememberMe","captcha","securityAPI","profileAPI","put","photoFile","formData","FormData","append","profile","getAuthUserDataThunk","myProfile","photos","logoutThunk","authReducer","dialogs","name","newMessageText","messagesReducer","newMessage","posts","likesCount","showSuccessSave","errorProfileContacts","addPost","newPostText","setUserProfile","setStatus","savePhotoSuccess","showSuccessSaveProfile","showErrorProfileContacts","getUserProfile","userId","profileReducer","newPost","initialized","appReducer","rootReducer","combineReducers","profilePage","messagesPage","app","form","formReducer","chat","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","fallback","Preloader","Header","stylesLogoutButton","margin","useSelector","myID","useDispatch","header","logoAndTitle","logo","headerTitle","rightPart","loginAndPhoto","loginName","buttonDesctop","Button","onClick","variant","style","startIcon","buttonMobile","logout","withRouter","pathname","location","profileUrl","nav","exact","activeClassName","active","navLink","width","height","fill","navLinkImg","viewBox","d","xmlns","version","Post","container","nameAndPost","wrapLike","IconButton","aria-label","like","renderTextField","label","input","placeholder","multiline","inputProps","onInput","onFocus","meta","touched","warning","fullWidth","custom","TextField","color","PostReduxForm","reduxForm","onSubmit","handleSubmit","wrapSendAndButton","Field","component","maxLength","marginLeft","endIcon","Wall","postsElements","p","values","getProfile","getStatusSelector","getShowSuccessSave","getErrorProfileContacts","handleFocusCount","target","select","document","getElementById","textContent","value","elem","display","fontSize","position","right","top","handleBlurCount","handleInputCount","num","wrap","useStyles","makeStyles","theme","inputProfileStatus","minHeight","maxHeight","lineHeight","padding","spacing","backgroundColor","borderRadius","Status","isOwner","classes","stylesSaveAndButton","useState","editMode","setEditMode","statusLocal","setStatusLocal","useEffect","Input","autoFocus","onBlur","onChange","currentTarget","buttons","buttonWrap","updateStatus","statusEmpty","statusNotMy","renderCheckbox","FormControlLabel","control","Checkbox","checked","labelPlacement","InfoDataForm","initialValues","titleForm","wrapForCount","countStyle","titleAllContacts","Object","keys","contacts","key","contact","titleContact","Contact","React","memo","contactTitle","contactValue","contactTextWrap","contactText","href","replace","InfoData","containerForm","aboutMe","title","text","job","lookingForAJob","lookingForAJobDescription","some","el","ScrollToTopOnMount","scrollTo","InfoContainer","stylesSaveAndCancelButton","editModeProfile","setEditModeProfile","containerMain","columnLeft","camera","htmlFor","wrapImg","editPhotoInput","file","files","marginTop","buttonsSaveAndCancelProfile","submit","successSave","columnRight","fullName","Error","saveProfileThunk","ProfileContainer","this","match","params","authorizedUserID","history","getStatus","refreshProfile","prevProps","WallContainer","PureComponent","LoginReduxForm","validate","errors","field","test","row","rowCheckbox","fontWeight","formError","Login","body","stopSubmit","_error","CaptchaIsRequired","url","ErrorBoundary","whiteSpace","toString","Component","ChatContainer","lazy","UsersContainer","SuspendedChat","SuspendedUsers","AppContainer","fon","appWrapper","appWrapperContent","from","path","render","createMuiTheme","palette","primary","main","cyan","secondary","responsiveFontSizes","ReactDOM","ThemeProvider","CssBaseline","stylesContainer","stylesWrap","justifyContent","preloader"],"mappings":"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","file":"static/js/main.f3b8663c.chunk.js","sourcesContent":["import React from 'react'\r\nimport unknown from '../../../img/no_photo.svg'\r\nimport s from './Avatar.module.css'\r\nimport cn from 'classnames'\r\n\r\ntype SizeType = 'small' | 'medium' | 'large'\r\n\r\ntype PropsType = {\r\n  photo: string | null | undefined\r\n  size: SizeType\r\n}\r\n\r\nconst Avatar: React.FC<PropsType> = ({ photo, size, children }) => {\r\n  return (\r\n    <div className={s.avatarWrap}>\r\n      <div className={cn(\r\n        s.avatar,\r\n        { [s.large]: size === 'large' },\r\n        { [s.medium]: size === 'medium' },\r\n        { [s.small]: size === 'small' },\r\n      )}\r\n      >\r\n        <img src={photo || unknown} alt=\"avatar\" />\r\n        {children}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Avatar","export default __webpack_public_path__ + \"static/media/no_photo.8bf0768a.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Wall_container__1uEMX\",\"wrapSendAndButton\":\"Wall_wrapSendAndButton__2y9qX\"};","import React from 'react';\r\nimport { Redirect } from 'react-router';\r\nimport { connect } from 'react-redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n  }\r\n}\r\n\r\ntype MapStatePropsType = {\r\n  isAuth: boolean\r\n}\r\n\r\n// WCP - пропсы WrappedComponent\r\nexport default function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n  const RedirectComponent: React.FC<MapStatePropsType & {}> = (props) => {\r\n    const {isAuth, ...restProps} = props;\r\n    if (!isAuth) return <Redirect to={'/login'} />;\r\n    return <WrappedComponent {...restProps as WCP} />\r\n  }\r\n\r\n  return connect<MapStatePropsType, {}, WCP, AppStateType>(mapStateToPropsForRedirect, {})(RedirectComponent)\r\n}","import axios from 'axios';\r\n\r\nexport const instance = axios.create({\r\n  withCredentials: true, // цепляем cookie к запросу\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n  headers: {\r\n    'API-KEY': '9fe42175-1733-4793-9c3f-72022637a8a0'\r\n  }\r\n});\r\n\r\nexport enum ResultCodesEnum {\r\n  Success = 0,\r\n  Error = 1\r\n}\r\n\r\nexport enum ResultCodeForCaptcha {\r\n  CaptchaIsRequired = 10\r\n}\r\n\r\nexport type DefaultResponseType<D = {}, RC = ResultCodesEnum> = {\r\n  data: D\r\n  resultCode: RC\r\n  messages: Array<string> | string\r\n}","import { UserType } from '../types/types';\r\nimport { DefaultResponseType, instance } from './api';\r\n\r\ntype GetUsersType = {\r\n  items: Array<UserType>\r\n  totalCount: number\r\n  error: string\r\n}\r\n\r\nexport const usersAPI = {\r\n  async getUsers(currentPage: number = 1, pageSize: number, term?: string, friend?: boolean) {\r\n    const response = await instance.get<GetUsersType>(\r\n      `users?page=${currentPage}&count=${pageSize}&term=${term}&friend=${friend}`\r\n    );\r\n    return response.data;\r\n  },\r\n  async followUser(id: number) {\r\n    const response = await instance.post<DefaultResponseType>(`follow/${id}`, {});\r\n    return response.data;\r\n  },\r\n  async unfollowUser(id: number) {\r\n    const response = await instance.delete<DefaultResponseType>(`follow/${id}`);\r\n    return response.data;\r\n  },\r\n}","import { Dispatch } from 'redux';\r\nimport { DefaultResponseType, ResultCodesEnum } from '../../api/api';\r\nimport { usersAPI } from '../../api/users-api';\r\nimport { UserType } from '../../types/types';\r\nimport { BaseThunkType, InferActionsTypes } from '../redux-store';\r\n\r\nlet initialState = {\r\n  users: [] as Array<UserType>,\r\n\r\n  pageSize: 10,\r\n  totalUsersCount: 0,\r\n\r\n  isFetching: true,\r\n  // disabling the button after pressing\r\n  followingInProgress: [] as Array<number>, // array of users ID\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'FOLLOW': {\r\n      return {\r\n        ...state,\r\n        users: state.users.map(u => {\r\n          if (u.id === action.userID) {\r\n            return { ...u, followed: true }\r\n          }\r\n          return u\r\n        })\r\n      }\r\n    }\r\n    case 'UNFOLLOW': {\r\n      return {\r\n        ...state,\r\n        users: state.users.map(u => {\r\n          if (u.id === action.userID) {\r\n            return { ...u, followed: false }\r\n          }\r\n          return u\r\n        })\r\n      }\r\n    }\r\n    case 'SET_USERS': {\r\n      return {\r\n        ...state,\r\n        users: [...action.users],\r\n      }\r\n    }\r\n    case 'ADD_USERS': {\r\n      return {\r\n        ...state,\r\n        users: [...state.users, ...action.users],\r\n      }\r\n    }\r\n    case 'CLEAR_USERS': {\r\n      return {\r\n        ...state,\r\n        users: []\r\n      }\r\n    }\r\n    case 'SET_TOTAL_USERS_COUNT': {\r\n      return {\r\n        ...state,\r\n        totalUsersCount: action.count,\r\n      }\r\n    }\r\n    case 'TOGGLE_IS_FETCHING': {\r\n      return {\r\n        ...state,\r\n        isFetching: action.isFetching,\r\n      }\r\n    }\r\n    case 'TOGGLE_IS_FOLLOWING_PROGRESS': {\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.isFetching\r\n          ? [...state.followingInProgress, action.userID]\r\n          : state.followingInProgress.filter(id => id !== action.userID),\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  followSuccess: (userID: number) => ({ type: 'FOLLOW', userID } as const),\r\n  unfollowSuccess: (userID: number) => ({ type: 'UNFOLLOW', userID } as const),\r\n\r\n  setUsers: (users: Array<UserType>) => ({ type: 'SET_USERS', users } as const),\r\n  addUsers: (users: Array<UserType>) => ({ type: 'ADD_USERS', users } as const),\r\n  setTotalUsersCount: (totalUsersCount: number) => ({\r\n    type: 'SET_TOTAL_USERS_COUNT', count: totalUsersCount\r\n  } as const),\r\n  clearUsers: () => ({ type: 'CLEAR_USERS' } as const),\r\n\r\n  toggleIsFetching: (isFetching: boolean) => ({ type: 'TOGGLE_IS_FETCHING', isFetching } as const),\r\n  toggleFollowingProgress: (isFetching: boolean, userID: number) => ({\r\n    type: 'TOGGLE_IS_FOLLOWING_PROGRESS', isFetching, userID\r\n  } as const),\r\n}\r\n\r\nexport const getUsers = (page: number, term: string, friend?: boolean):\r\n  ThunkType => async (dispatch, getState) => {\r\n    dispatch(actions.toggleIsFetching(true));\r\n\r\n    const response = await usersAPI.getUsers(page, getState().usersPage.pageSize, term, friend);\r\n\r\n    // первичная загрузка\r\n    if (term.length === 0 && page === 1) {\r\n      dispatch(actions.setUsers(response.items));\r\n    }\r\n    // получение больше пользователей\r\n    if (page > 1) {\r\n      dispatch(actions.addUsers(response.items));\r\n    }\r\n    // первичный поиск\r\n    if (term.length > 0 && page === 1) {\r\n      dispatch(actions.clearUsers());\r\n      dispatch(actions.setUsers(response.items));\r\n    }\r\n\r\n    dispatch(actions.setTotalUsersCount(response.totalCount));\r\n    dispatch(actions.toggleIsFetching(false));\r\n  }\r\n\r\ntype DispatchType = Dispatch<ActionsTypes>;\r\nconst _followUnfollowFlow = async (\r\n  dispatch: DispatchType,\r\n  id: number,\r\n  apiMethod: (id: number) => Promise<DefaultResponseType>,\r\n  actionCreator: (id: number) => ActionsTypes) => {\r\n\r\n  dispatch(actions.toggleFollowingProgress(true, id));\r\n  const response = await apiMethod(id);\r\n\r\n  if (response.resultCode === ResultCodesEnum.Success) {\r\n    dispatch(actionCreator(id))\r\n  }\r\n  dispatch(actions.toggleFollowingProgress(false, id));\r\n}\r\n\r\nexport const follow = (id: number): ThunkType => async (dispatch) => {\r\n  await _followUnfollowFlow(dispatch, id,\r\n    usersAPI.followUser.bind(usersAPI), actions.followSuccess)\r\n}\r\n\r\nexport const unfollow = (id: number): ThunkType => async (dispatch) => {\r\n  await _followUnfollowFlow(dispatch, id,\r\n    usersAPI.unfollowUser.bind(usersAPI), actions.unfollowSuccess)\r\n}\r\n\r\nexport default usersReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsTypes>;","let ws: WebSocket | null = null;\r\n\r\nlet subscribers = {\r\n  'messages-received': [] as Array<MessagesReceivedSubscriberType>,\r\n  'status-changed': [] as Array<StatusChangedSubscriberType>\r\n}\r\n\r\ntype EventsCustomNamesType = 'messages-received' | 'status-changed'\r\n\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n  if (subscribers) {\r\n    subscribers[\"status-changed\"].forEach(s => s(status))\r\n  }\r\n}\r\n\r\nconst reconnect = () => {\r\n  notifySubscribersAboutStatus('pending')\r\n  setTimeout(createChannel, 3000)\r\n}\r\n\r\nconst messageHandler = (e: MessageEvent) => {\r\n  let newMessages = JSON.parse(e.data);\r\n  if (subscribers) {\r\n    subscribers['messages-received'].forEach(s => s(newMessages));\r\n  }\r\n}\r\n\r\nconst openHandler = () => {\r\n  notifySubscribersAboutStatus('ready')\r\n}\r\n\r\nconst errorHandler = () => {\r\n  notifySubscribersAboutStatus('error')\r\n  console.error('REFRESH PAGE')\r\n}\r\n\r\nconst cleanUp = () => {\r\n  ws?.removeEventListener('close', reconnect)\r\n  ws?.removeEventListener('message', messageHandler)\r\n  ws?.removeEventListener('open', openHandler)\r\n  ws?.removeEventListener('error', errorHandler)\r\n}\r\n\r\nfunction createChannel() {\r\n  cleanUp()\r\n  ws?.close()\r\n\r\n  ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n\r\n  notifySubscribersAboutStatus('pending')\r\n\r\n  ws.addEventListener('close', reconnect)\r\n  ws.addEventListener('message', messageHandler)\r\n  ws.addEventListener('open', openHandler)\r\n  ws.addEventListener('error', errorHandler)\r\n}\r\n\r\nexport const chatAPI = {\r\n  start() {\r\n    createChannel()\r\n  },\r\n  stop() {\r\n    if (subscribers) {\r\n      subscribers['messages-received'] = []\r\n      subscribers['status-changed'] = []\r\n    }\r\n    cleanUp()\r\n    ws?.close()\r\n  },\r\n  subscribe(eventName: EventsCustomNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n    if (subscribers) {\r\n      // @ts-ignore\r\n      subscribers[eventName].push(callback)\r\n    }\r\n  },\r\n\r\n  // отписка (забираем возможность api уведомлять store)\r\n  unsubscribe(eventName: EventsCustomNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n    if (subscribers) {\r\n      // @ts-ignore\r\n      subscribers = subscribers[eventName]?.filter(s => s !== callback) // оставляем всех, кроме callback\r\n    }\r\n  },\r\n\r\n  sendMessage(message: string) {\r\n    ws?.send(message)\r\n  }\r\n}\r\n\r\nexport type ChatMessageAPIType = {\r\n  message: string\r\n  photo: string\r\n  userId: number\r\n  userName: string\r\n}\r\n\r\nexport type StatusType = 'pending' | 'ready' | 'error'\r\n\r\ntype MessagesReceivedSubscriberType = (messages: Array<ChatMessageAPIType>) => void\r\n\r\ntype StatusChangedSubscriberType = (status: StatusType) => void","import { FormAction } from 'redux-form'\r\nimport { BaseThunkType, InferActionsTypes } from '../redux-store'\r\nimport { chatAPI, ChatMessageAPIType, StatusType } from '../../api/chat-api'\r\nimport { Dispatch } from 'redux'\r\nimport { v1 } from 'uuid'\r\n\r\nexport type ChatMessageType = ChatMessageAPIType & { id: string }\r\n\r\nlet initialState = {\r\n  messages: [] as ChatMessageType[],\r\n  status: 'pending' as StatusType,\r\n};\r\n\r\nconst chatReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'MESSAGES_RECEIVED': {\r\n      return {\r\n        ...state,\r\n        messages: [\r\n          ...state.messages,\r\n          ...action.payload.messages.map(m => ({ ...m, id: v1() }))\r\n        ]\r\n          .filter((item, index, array) => index >= array.length - 100)\r\n      }\r\n    }\r\n    case 'STATUS_CHANGED': {\r\n      return {\r\n        ...state,\r\n        status: action.payload.status\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst actions = {\r\n  messagesReceived: (messages: ChatMessageAPIType[]) => ({\r\n    type: 'MESSAGES_RECEIVED',\r\n    payload: { messages }\r\n  } as const),\r\n  statusChanged: (status: StatusType) => ({\r\n    type: 'STATUS_CHANGED',\r\n    payload: { status }\r\n  } as const),\r\n}\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null;\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n  // чтобы два раза не вызывалась одна и та же функция, сначала при подписке, потом при отписке\r\n  if (_newMessageHandler === null) {\r\n    _newMessageHandler = (messages) => {\r\n      dispatch(actions.messagesReceived(messages))\r\n    }\r\n  }\r\n  return _newMessageHandler\r\n}\r\n\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null;\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n  // чтобы два раза не вызывалась одна и та же функция, сначала при подписке, потом при отписке\r\n  if (_statusChangedHandler === null) {\r\n    _statusChangedHandler = (status) => {\r\n      dispatch(actions.statusChanged(status))\r\n    }\r\n  }\r\n  return _statusChangedHandler\r\n}\r\n\r\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\r\n  chatAPI.start()\r\n\r\n  chatAPI.subscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n  chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n}\r\n\r\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\r\n  chatAPI.unsubscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n  chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n\r\n  chatAPI.stop()\r\n}\r\n\r\nexport const sendMessage = (message: string): ThunkType => async () => {\r\n  chatAPI.sendMessage(message)\r\n}\r\n\r\nexport default chatReducer;\r\n\r\ntype InitialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerForm\":\"InfoData_containerForm__1JOGm\",\"wrap\":\"InfoData_wrap__1Sogv\",\"aboutMe\":\"InfoData_aboutMe__2cZYL\",\"job\":\"InfoData_job__3N8Ba\",\"contacts\":\"InfoData_contacts__uL_8Z\",\"title\":\"InfoData_title__3tTLU\",\"text\":\"InfoData_text__3OEXf\",\"contact\":\"InfoData_contact__15i2w\",\"contactTitle\":\"InfoData_contactTitle__2PwVT\",\"contactTextWrap\":\"InfoData_contactTextWrap__DGFoS\",\"contactText\":\"InfoData_contactText__1r_Xy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"InfoDataForm_form__3X5Dg\",\"titleForm\":\"InfoDataForm_titleForm__3o6fa\",\"wrap\":\"InfoDataForm_wrap__7quju\",\"contact\":\"InfoDataForm_contact__3sIjS\",\"titleAllContacts\":\"InfoDataForm_titleAllContacts__32-Po\",\"titleContact\":\"InfoDataForm_titleContact__Def8-\",\"countStyle\":\"InfoDataForm_countStyle__3Vxhs\",\"wrapForCount\":\"InfoDataForm_wrapForCount__3uTkw\",\"errorProfileContacts\":\"InfoDataForm_errorProfileContacts__PksGi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3R0rh\",\"navLink\":\"Navbar_navLink__3jqZB\",\"navLinkImg\":\"Navbar_navLinkImg__3kMZG\",\"active\":\"Navbar_active__2b-XZ\"};","import { AppStateType } from \"../redux-store\";\r\n\r\nexport const getLogin = (state: AppStateType) => {\r\n  return state.auth.login\r\n}\r\n\r\nexport const getIsAuth = (state: AppStateType) => {\r\n  return state.auth.isAuth\r\n}\r\n\r\nexport const getAuthorizedUserID = (state: AppStateType) => {\r\n  return state.auth.userID\r\n}\r\n\r\nexport const getCaptchaURL = (state: AppStateType) => {\r\n  return state.auth.captchaURL\r\n}\r\n\r\nexport const getMyPhoto = (state: AppStateType) => {\r\n  return state.auth.myPhoto\r\n}","import { DefaultResponseType, instance, ResultCodeForCaptcha, ResultCodesEnum } from './api';\r\n\r\ntype MeDataType = {\r\n  id: number\r\n  email: string\r\n  login: string\r\n}\r\n\r\nexport const authAPI = {\r\n  async me() {\r\n    const response = await instance.get<DefaultResponseType<MeDataType>>(`auth/me`);\r\n    return response.data;\r\n  },\r\n  async login(email: string, password: string,\r\n    rememberMe = false, captcha: null | string = null\r\n  ) {\r\n    const response = await instance.post<DefaultResponseType<{ userId: number }, ResultCodesEnum | ResultCodeForCaptcha>>(\r\n      '/auth/login', {\r\n      email, password, rememberMe, captcha\r\n    });\r\n    return response.data;\r\n  },\r\n  async logout() {\r\n    const response = await instance.delete<DefaultResponseType>('/auth/login');\r\n    return response.data;\r\n  }\r\n}","import { instance } from './api';\r\n\r\ntype GetCaptchaResponseType = {\r\n  url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n  async getCaptchaURL() {\r\n    const response = await instance.get<GetCaptchaResponseType>(`security/get-captcha-url`);\r\n    return response.data;\r\n  },\r\n}","import { PhotosType, ProfileType } from '../types/types';\r\nimport { DefaultResponseType, instance } from './api';\r\n\r\ntype SavePhotoDataType = {\r\n  photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n  async getProfile(id: number | null) {\r\n    const response = await instance.get<ProfileType>(`profile/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  async getStatus(id: number) {\r\n    const response = await instance.get<string>(`profile/status/${id}`)\r\n    return response.data;\r\n  },\r\n\r\n  async updateStatus(status: string) {\r\n    const response = await instance.put<DefaultResponseType>(`profile/status`, {status});\r\n    return response.data;\r\n  },\r\n\r\n  async savePhotoAPI(photoFile: any) {\r\n    const formData = new FormData();\r\n    formData.append('image', photoFile);\r\n    const response = await instance.put<DefaultResponseType<SavePhotoDataType>>(`profile/photo`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  async saveProfileAPI(profile: ProfileType) {\r\n    const response = await instance.put<DefaultResponseType>(`profile`, profile);\r\n    return response.data;\r\n  }\r\n}","import { ResultCodesEnum, ResultCodeForCaptcha } from '../../api/api';\r\nimport { authAPI } from '../../api/auth-api';\r\nimport { securityAPI } from '../../api/security-api';\r\n\r\nimport { FormAction, stopSubmit } from 'redux-form';\r\nimport { BaseThunkType, InferActionsTypes } from '../redux-store';\r\nimport { profileAPI } from '../../api/profile-api';\r\n\r\nlet initialState = {\r\n  userID: null as number | null,\r\n  email: null as string | null,\r\n  login: null as string | null,\r\n  isAuth: false,\r\n  captchaURL: null as string | null,\r\n  myPhoto: null as string | null,\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'SET_USER_DATA':\r\n    case 'GET_CAPTCHA_URL_SUCCESS': {\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      }\r\n    }\r\n    case 'SET_MY_PHOTO': {\r\n      return {\r\n        ...state,\r\n        // @ts-ignore\r\n        myPhoto: action.payload.photo,\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst actions = {\r\n  setAuthUserData: (userID: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n    type: 'SET_USER_DATA',\r\n    payload: { userID, email, login, isAuth } as const\r\n  }),\r\n\r\n  setCaptcha: (captchaURL: string | null) => ({\r\n    type: 'GET_CAPTCHA_URL_SUCCESS',\r\n    payload: { captchaURL } as const\r\n  }),\r\n\r\n  setMyPhoto: (photo: string | null) => ({\r\n    type: 'SET_MY_PHOTO',\r\n    payload: { photo } as const\r\n  }),\r\n}\r\n\r\nexport const getAuthUserDataThunk = (): ThunkType => async (dispatch) => {\r\n  let response = await authAPI.me();\r\n\r\n  if (response.resultCode === ResultCodesEnum.Success) {\r\n    let { id, email, login } = response.data;\r\n    dispatch(actions.setAuthUserData(id, email, login, true))\r\n  }\r\n  \r\n  const myProfile = await profileAPI.getProfile(response.data.id);\r\n  dispatch(actions.setMyPhoto(myProfile.photos.large));\r\n}\r\n\r\nconst setCaptchaThunk = (): ThunkType => async (dispatch) => {\r\n  const response = await securityAPI.getCaptchaURL();\r\n  const captcha = response.url;\r\n  dispatch(actions.setCaptcha(captcha))\r\n}\r\n\r\nexport const loginThunk = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n  const response = await authAPI.login(email, password, rememberMe, captcha);\r\n\r\n  if (response.resultCode === ResultCodesEnum.Success) {\r\n    dispatch(getAuthUserDataThunk())\r\n    dispatch(actions.setCaptcha(null))\r\n  }\r\n\r\n  if (response.resultCode === ResultCodesEnum.Error) {\r\n    const message = response.messages;\r\n    const action = stopSubmit('loginForm', {\r\n      _error: message.length > 0 ? message[0] : 'Some error'\r\n    });\r\n    // Some error - на всякий случай, если с сервера придёт пустое сообщение при ошибке\r\n    dispatch(action);\r\n  }\r\n\r\n  if (response.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\r\n    dispatch(setCaptchaThunk())\r\n  }\r\n}\r\n\r\nexport const logoutThunk = (): ThunkType => async (dispatch) => {\r\n  const response = await authAPI.logout();\r\n\r\n  if (response.resultCode === ResultCodesEnum.Success) {\r\n    dispatch(actions.setAuthUserData(null, null, null, false))\r\n  }\r\n}\r\n\r\nexport default authReducer;\r\n\r\ntype InitialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>;","import { DialogType, MessageType } from \"../../types/types\";\r\nimport { InferActionsTypes } from \"../redux-store\";\r\n\r\nlet initialState = {\r\n  dialogs: [\r\n    { id: 1, name: 'Denis' },\r\n    { id: 2, name: 'Andrey' },\r\n    { id: 3, name: 'Alexandr' },\r\n    { id: 4, name: 'Alisa' },\r\n  ] as Array<DialogType>,\r\n\r\n  messages: [\r\n    { id: 1, message: 'Hi!' },\r\n    { id: 2, message: 'lalalalalalala' },\r\n    { id: 3, message: 'How are you?' },\r\n  ] as Array<MessageType>,\r\n\r\n  newMessageText: ''\r\n};\r\n\r\nconst messagesReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'SEND_MESSAGE':\r\n      let newMessage = {\r\n        id: 4,\r\n        message: action.newMessageText\r\n      };\r\n      return {\r\n        ...state,\r\n        messages: [newMessage, ...state.messages],\r\n        newMessageText: ''\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  sendMessage: (newMessageText: string) => ({ type: 'SEND_MESSAGE', newMessageText } as const),\r\n}\r\n\r\nexport default messagesReducer;\r\n\r\ntype InitialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;","import { BaseThunkType, InferActionsTypes } from '../redux-store';\r\n\r\nimport { PostType } from '../../types/types';\r\nimport { ProfileType } from '../../types/types';\r\nimport { PhotosType } from '../../types/types';\r\n\r\nimport { ResultCodesEnum } from '../../api/api';\r\nimport { profileAPI } from '../../api/profile-api';\r\n\r\nlet initialState = {\r\n  posts: [\r\n    { id: 0, message: 'Привет!', likesCount: 12 },\r\n    { id: 1, message: 'Как дела?', likesCount: 4 },\r\n  ] as Array<PostType>,\r\n\r\n  profile: null as ProfileType | null,\r\n  status: '',\r\n  showSuccessSave: '',\r\n  errorProfileContacts: '',\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'ADD_POST': {\r\n      let newPost = {\r\n        id: 2,\r\n        message: action.newPostText,\r\n        likesCount: 0,\r\n      };\r\n      return {\r\n        ...state,\r\n        posts: [newPost, ...state.posts],\r\n      }\r\n    }\r\n    case 'SET_USER': {\r\n      return {\r\n        ...state,\r\n        profile: action.profile\r\n      }\r\n    }\r\n    case 'SET_STATUS': {\r\n      return {\r\n        ...state,\r\n        status: action.status\r\n      }\r\n    }\r\n    // case 'DELETE_POST': {\r\n    //   return {\r\n    //     ...state,\r\n    //     posts: state.posts.filter(p => p.id !== action.postID)\r\n    //   }\r\n    // }\r\n    case 'SAVE_PHOTO_SUCCESS': {\r\n      return {\r\n        ...state,\r\n        profile: { ...state.profile, photos: action.photos } as ProfileType\r\n      }\r\n    }\r\n    case 'SHOW_SUCCESS_SAVE': {\r\n      return {\r\n        ...state,\r\n        showSuccessSave: action.message,\r\n      }\r\n    }\r\n    case 'SHOW_ERROR_PROFILE_CONTACTS': {\r\n      return {\r\n        ...state,\r\n        errorProfileContacts: action.message,\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  addPost: (newPostText: string) => ({ type: 'ADD_POST', newPostText } as const),\r\n  // deletePost: (postID: number) => ({ type: 'DELETE_POST', postID } as const),\r\n  setUserProfile: (profile: ProfileType) => ({ type: 'SET_USER', profile } as const),\r\n  setStatus: (status: string) => ({ type: 'SET_STATUS', status } as const),\r\n  savePhotoSuccess: (photos: PhotosType) => ({ type: 'SAVE_PHOTO_SUCCESS', photos } as const),\r\n  showSuccessSaveProfile: (message: string) => ({ type: 'SHOW_SUCCESS_SAVE', message } as const),\r\n  showErrorProfileContacts: (message: string) => ({ type: 'SHOW_ERROR_PROFILE_CONTACTS', message } as const),\r\n}\r\n\r\nexport const getUserProfile = (userId: number | null): ThunkType => async (dispatch) => {\r\n  const response = await profileAPI.getProfile(userId);\r\n  dispatch(actions.setUserProfile(response));\r\n};\r\n\r\nexport const getStatus = (id: number): ThunkType => async (dispatch) => {\r\n  const response = await profileAPI.getStatus(id);\r\n  dispatch(actions.setStatus(response));\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n  const response = await profileAPI.updateStatus(status);\r\n  if (response.resultCode === ResultCodesEnum.Success) {\r\n    dispatch(actions.setStatus(status));\r\n  }\r\n};\r\n\r\nexport const savePhotoThunk = (file: File): ThunkType => async (dispatch) => {\r\n  const response = await profileAPI.savePhotoAPI(file);\r\n  if (response.resultCode === ResultCodesEnum.Success) {\r\n    dispatch(actions.savePhotoSuccess(response.data.photos));\r\n  }\r\n};\r\n\r\nexport const saveProfileThunk = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n  const response = await profileAPI.saveProfileAPI(profile);\r\n  const userID = getState().auth.userID;\r\n\r\n  if (response.resultCode === ResultCodesEnum.Success) {\r\n    dispatch(getUserProfile(userID));\r\n    dispatch(actions.showSuccessSaveProfile('Data saved successfully!'));\r\n    setTimeout(dispatch, 4000, actions.showSuccessSaveProfile(''));\r\n    dispatch(actions.showErrorProfileContacts(''));\r\n  }\r\n\r\n  if (response.resultCode === ResultCodesEnum.Error) {\r\n    // заготовка для показа ошибки конкретного поля\r\n    // let key = response.data.messages[0].match(/Contacts->(\\w+)/)[1].toLowerCase();\r\n    // dispatch(stopSubmit('editProfile', {\r\n    //   contacts: { [key]: response.data.messages[0] },\r\n    // }));\r\n    dispatch(actions.showErrorProfileContacts(response.messages[0]))\r\n  }\r\n};\r\n\r\nexport default profileReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsTypes>;","import { BaseThunkType, InferActionsTypes } from '../redux-store';\r\n\r\nimport { getAuthUserDataThunk } from './auth-reducer';\r\n\r\nlet initialState = {\r\n  initialized: false,\r\n}\r\n\r\nconst appReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'INITIALIZED_SUCCESS': {\r\n      return {\r\n        ...state,\r\n        initialized: true\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst actions = {\r\n  initializedSuccess: () => ({ type: 'INITIALIZED_SUCCESS' } as const),\r\n}\r\n\r\nexport const initializeAppThunk = (): ThunkType => async (dispatch) => {\r\n  await dispatch(getAuthUserDataThunk())\r\n  dispatch(actions.initializedSuccess())\r\n}\r\n\r\nexport default appReducer;\r\n\r\ntype InitialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsTypes>;","import { applyMiddleware, combineReducers, createStore, compose, Action } from 'redux';\r\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nimport authReducer from './reducers/auth-reducer';\r\nimport messagesReducer from './reducers/messages-reducer';\r\nimport profileReducer from './reducers/profile-reducer';\r\nimport usersReducer from './reducers/users-reducer';\r\nimport appReducer from './reducers/app-reducer';\r\nimport chatReducer from './reducers/chat-reducer';\r\n\r\nlet rootReducer = combineReducers({\r\n  profilePage: profileReducer,\r\n  messagesPage: messagesReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  app: appReducer,\r\n  form: formReducer,\r\n  chat: chatReducer,\r\n});\r\n\r\n// types state app\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\n\r\n// types actions\r\nexport type InferActionsTypes<T> = T extends { [key: string]: (...args: any[]) => infer U } ? U : never;\r\n\r\n// type thunks\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>;\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n// @ts-ignore\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\nexport default store;\r\n\r\n","import React, { Suspense } from 'react';\r\nimport Preloader from '../common/Preloader/Preloader';\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n  return (props: WCP) => {\r\n    return <Suspense fallback={<Preloader />}>\r\n      <WrappedComponent {...props} />\r\n    </Suspense>\r\n  }\r\n}","export default __webpack_public_path__ + \"static/media/logo.cebb0f3e.svg\";","export default __webpack_public_path__ + \"static/media/logout.8e3cc1f3.svg\";","import React from 'react';\r\nimport { NavLink, Redirect } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { logoutThunk } from '../../redux/reducers/auth-reducer';\r\nimport { getAuthorizedUserID, getIsAuth, getLogin, getMyPhoto } from '../../redux/selectors/auth-selectors';\r\n\r\nimport s from './Header.module.css';\r\nimport logo from '../../img/icons/logo.svg';\r\nimport logout from '../../img/icons/logout.svg';\r\nimport Button from '@material-ui/core/Button';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport Avatar from '../common/Avatar/Avatar';\r\n\r\nconst Header: React.FC = (props) => {\r\n\r\n  const stylesLogoutButton = {\r\n    margin: 16\r\n  }\r\n\r\n  const isAuth = useSelector(getIsAuth)\r\n  const login = useSelector(getLogin)\r\n  const myID = useSelector(getAuthorizedUserID)\r\n  const myPhoto = useSelector(getMyPhoto)\r\n  const dispatch = useDispatch()\r\n\r\n  return (\r\n    <header className={s.header}>\r\n      <NavLink className={s.logoAndTitle} to={'/profile'}>\r\n        <img src={logo} alt='logo' />\r\n        <span className={s.headerTitle}>Social network</span>\r\n      </NavLink>\r\n\r\n      <div className={s.rightPart}>\r\n        {isAuth\r\n          ? <>\r\n            <NavLink className={s.loginAndPhoto} to={'/profile/' + myID}>\r\n              <Avatar photo={myPhoto} size='small' />\r\n              <span className={s.loginName}>{login}</span>\r\n            </NavLink>\r\n\r\n            <span className={s.buttonDesctop}>\r\n              <Button\r\n                onClick={() => dispatch(logoutThunk())}\r\n                variant=\"outlined\"\r\n                style={stylesLogoutButton}\r\n                startIcon={<ExitToAppIcon />}>\r\n                Log out\r\n              </Button>\r\n            </span>\r\n            <span className={s.buttonMobile}>\r\n              <Button\r\n                onClick={() => dispatch(logoutThunk())}\r\n                variant=\"outlined\"\r\n                style={stylesLogoutButton}\r\n              ><img src={logout} alt=\"logout\" />\r\n              </Button>\r\n            </span>\r\n          </>\r\n          : <Redirect to=\"/login\" />\r\n        }\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { NavLink, RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport s from './Navbar.module.css';\r\nimport { getAuthorizedUserID } from '../../redux/selectors/auth-selectors';\r\n\r\ntype PathParamsType = {\r\n  pathname: string\r\n}\r\n\r\nconst Navbar: React.FC<{} & {} & RouteComponentProps<PathParamsType>> = (\r\n  { location: { pathname } }) => {\r\n\r\n  const authorizedUserID = useSelector(getAuthorizedUserID)\r\n  const profileUrl = '/profile/' + authorizedUserID;\r\n\r\n  return (\r\n    <nav className={s.nav} id='navbar'>\r\n      <NavLink exact to={profileUrl} activeClassName={s.active} className={s.navLink}>\r\n        <svg width=\"24\" height=\"24\"\r\n          fill={pathname === profileUrl ? '#00bcd4' : 'white'}\r\n          className={s.navLinkImg}\r\n          viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12,4A4,4 0 0,1 16,8A4,4 0 0,1 12,12A4,4 0 0,1 8,8A4,4 0 0,1 12,4M12,14C16.42,14 20,15.79 20,18V20H4V18C4,15.79 7.58,14 12,14Z\" />\r\n        </svg>\r\n        Profile\r\n      </NavLink>\r\n\r\n      <NavLink to='/chat' activeClassName={s.active} className={s.navLink}>\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"24\" height=\"24\"\r\n          fill={pathname === '/chat' ? '#00bcd4' : 'white'}\r\n          className={s.navLinkImg}\r\n          viewBox=\"0 0 24 24\"><path d=\"M20,2H4A2,2 0 0,0 2,4V22L6,18H20A2,2 0 0,0 22,16V4C22,2.89 21.1,2 20,2Z\" />\r\n        </svg>\r\n        Chat\r\n      </NavLink>\r\n\r\n      <NavLink to='/friends' activeClassName={s.active} className={s.navLink}>\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"24\" height=\"24\"\r\n          fill={pathname === '/friends' ? '#00bcd4' : 'white'}\r\n          className={s.navLinkImg}\r\n          viewBox=\"0 0 24 24\"><path d=\"M12,5.5A3.5,3.5 0 0,1 15.5,9A3.5,3.5 0 0,1 12,12.5A3.5,3.5 0 0,1 8.5,9A3.5,3.5 0 0,1 12,5.5M5,8C5.56,8 6.08,8.15 6.53,8.42C6.38,9.85 6.8,11.27 7.66,12.38C7.16,13.34 6.16,14 5,14A3,3 0 0,1 2,11A3,3 0 0,1 5,8M19,8A3,3 0 0,1 22,11A3,3 0 0,1 19,14C17.84,14 16.84,13.34 16.34,12.38C17.2,11.27 17.62,9.85 17.47,8.42C17.92,8.15 18.44,8 19,8M5.5,18.25C5.5,16.18 8.41,14.5 12,14.5C15.59,14.5 18.5,16.18 18.5,18.25V20H5.5V18.25M0,20V18.5C0,17.11 1.89,15.94 4.45,15.6C3.86,16.28 3.5,17.22 3.5,18.25V20H0M24,20H20.5V18.25C20.5,17.22 20.14,16.28 19.55,15.6C22.11,15.94 24,17.11 24,18.5V20Z\" />\r\n        </svg>\r\n        Friends\r\n      </NavLink>\r\n\r\n      <NavLink to=\"/users\" activeClassName={s.active} className={s.navLink}>\r\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\r\n          fill={pathname === '/users' ? '#00bcd4' : 'white'}\r\n          className={s.navLinkImg}>\r\n          <path d=\"M15.5,12C18,12 20,14 20,16.5C20,17.38 19.75,18.21 19.31,18.9L22.39,22L21,23.39L17.88,20.32C17.19,20.75 16.37,21 15.5,21C13,21 11,19 11,16.5C11,14 13,12 15.5,12M15.5,14A2.5,2.5 0 0,0 13,16.5A2.5,2.5 0 0,0 15.5,19A2.5,2.5 0 0,0 18,16.5A2.5,2.5 0 0,0 15.5,14M10,4A4,4 0 0,1 14,8C14,8.91 13.69,9.75 13.18,10.43C12.32,10.75 11.55,11.26 10.91,11.9L10,12A4,4 0 0,1 6,8A4,4 0 0,1 10,4M2,20V18C2,15.88 5.31,14.14 9.5,14C9.18,14.78 9,15.62 9,16.5C9,17.79 9.38,19 10,20H2Z\" />\r\n        </svg>\r\n        Find Users\r\n      </NavLink>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default withRouter(Navbar)","export default __webpack_public_path__ + \"static/media/avatar_2.e0878a2c.jpg\";","import React from 'react';\r\n\r\nimport s from './Post.module.css';\r\nimport avatar from '../../../../img/avatar_2.jpg';\r\nimport unknown from './../../../../img/no_photo.svg';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt';\r\nimport { PostType } from '../../../../types/types';\r\n\r\nconst Post: React.FC<PostType> = (props) => {\r\n  return <div className={s.container}>\r\n    <div>\r\n      <div className={s.avatar}>\r\n        <img src={avatar !== null ? avatar : unknown} alt=\"avatar\" />\r\n      </div>\r\n    </div>\r\n\r\n    <div className={s.nameAndPost}>\r\n      <div className={s.name}>\r\n        Name user\r\n      </div>\r\n\r\n      <div className={s.message}>\r\n        {props.message}\r\n      </div>\r\n\r\n      <div className={s.wrapLike}>\r\n        <IconButton aria-label=\"like\" size=\"small\">\r\n          <ThumbUpAltIcon/>\r\n        </IconButton>\r\n        <span className={s.like}>{props.likesCount}</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n}\r\n\r\nexport default Post;","import { TextField } from '@material-ui/core';\r\n\r\nconst renderTextField = (props) => {\r\n  const { label, input, placeholder, multiline, variant, inputProps, onInput, onFocus, meta: { touched, error, warning }, fullWidth, ...custom } = props;\r\n\r\n  return <>\r\n    <TextField\r\n      label={label}\r\n      placeholder={placeholder}\r\n      inputProps={inputProps}\r\n      onInput={onInput}\r\n      onFocus={onFocus}\r\n      variant={variant}\r\n      multiline={multiline}\r\n      fullWidth={fullWidth}\r\n      {...input}\r\n      {...custom}\r\n    />\r\n    {\r\n      touched && (\r\n        (error &&\r\n          <span style={{ color: '#f44336' }}>{error}</span>)\r\n        || (warning && <span>{warning}</span>)\r\n      )\r\n    }\r\n  </>\r\n}\r\n\r\nexport default renderTextField;","import React from 'react';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\n\r\nimport Post from './Post/Post';\r\n\r\nimport s from './Wall.module.css';\r\nimport renderTextField from '../../common/ElementCustom/renderTextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport PostAddIcon from '@material-ui/icons/PostAdd';\r\nimport { MapDispatchPropsType, MapStatePropsType } from './WallContainer';\r\nimport { PostType } from '../../../types/types';\r\n\r\nconst Wall: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n\r\n  let postsElements = props.posts.map((p: PostType) =>\r\n    <Post key={p.id} message={p.message} likesCount={p.likesCount} />);\r\n\r\n  let handleAddPost = (values: WallValuesFormType) => {\r\n    props.addPost(values.newPostText);\r\n  }\r\n\r\n  return (\r\n    <div className={s.container}>\r\n      <PostReduxForm onSubmit={handleAddPost} />\r\n      {postsElements}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<WallValuesFormType, {}> & {}> =\r\n  (props) => {\r\n\r\n    const stylesAddPostButton = {\r\n      color: 'white',\r\n      marginLeft: '10px',\r\n      width: '160px'\r\n    }\r\n\r\n    return <form onSubmit={props.handleSubmit}>\r\n      <div className={s.wrapSendAndButton}>\r\n        <Field\r\n          component={renderTextField}\r\n          name='newPostText'\r\n          placeholder='Enter the post text...'\r\n          multiline={true}\r\n          fullWidth={true}\r\n          variant=\"outlined\"\r\n          inputProps={{ maxLength: 1000 }}\r\n        />\r\n        <Button\r\n          type='submit'\r\n          variant=\"contained\"\r\n          color='primary'\r\n          style={stylesAddPostButton}\r\n          endIcon={<PostAddIcon />}\r\n        >Add post</Button>\r\n      </div>\r\n    </form>\r\n  }\r\n\r\ntype WallValuesFormType = {\r\n  newPostText: string\r\n}\r\n\r\nconst PostReduxForm = reduxForm<WallValuesFormType, {}>({\r\n  form: 'profileNewPostForm'\r\n})(AddNewPostForm);\r\n\r\nexport default Wall;","import { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { actions } from '../../../redux/reducers/profile-reducer';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { PostType } from '../../../types/types';\r\nimport Wall from './Wall';\r\n\r\nexport type MapStatePropsType = {\r\n  posts: Array<PostType>\r\n}\r\n\r\nexport type MapDispatchPropsType = {\r\n  addPost: (newPostText: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n  }\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(\r\n    mapStateToProps,\r\n    {\r\n      addPost: actions.addPost\r\n    }\r\n  ))(Wall);","import { AppStateType } from \"../redux-store\";\r\n\r\nexport const getProfile = (state: AppStateType) => {\r\n  return state.profilePage.profile\r\n}\r\n\r\nexport const getStatusSelector = (state: AppStateType) => {\r\n  return state.profilePage.status\r\n}\r\n\r\nexport const getShowSuccessSave = (state: AppStateType) => {\r\n  return state.profilePage.showSuccessSave\r\n}\r\n\r\nexport const getErrorProfileContacts = (state: AppStateType) => {\r\n  return state.profilePage.errorProfileContacts\r\n}","// Памятка:\r\n//1. import { handleInputCount, handleFocusCount, handleBlurCount} from '../../../common/inputCount/inputCount';\r\n//2. Передать в input: \r\n      // name='...'\r\n      // onInput={handleInputCount.bind(null, num100)}\r\n      // onFocus={handleFocusCount}\r\n      // onBlur={handleBlurCount}\r\n//3. Добавить в компоненту: \r\n      //const num100 = 100;\r\n//4. Добавить в компоненту: \r\n      // <span id='statusWrapCount' className={s.countStyle}><span id='statusCount'></span> of 100</span>\r\n//5. Задать родителю span-a: \r\n      // position: relative;\r\n//6. Если нужно, чтобы не был виден счётчик при первом отображении input, применить:\r\n      // .countStyle {display: none;}\r\n\r\nexport const handleFocusCount = (e) => {\r\n  e.target.select();\r\n\r\n  document.getElementById(e.target.name + 'Count').textContent = e.target.value.length;\r\n\r\n  const elem = document.getElementById(e.target.name + 'WrapCount');\r\n  elem.style.display = 'inline-block';\r\n  elem.style.fontSize = '10px';\r\n  elem.style.position = 'absolute';\r\n  elem.style.right = '10px';\r\n  elem.style.top = 0;\r\n}\r\n\r\nexport const handleBlurCount = (e) => {\r\n  document.getElementById(e.target.name + 'WrapCount').style.display = 'none';\r\n}\r\n\r\nexport const handleInputCount = (num, e) => {\r\n  const wrap = e.target.name + 'WrapCount';\r\n  const count = e.target.name + 'Count';\r\n  const length = e.target.value.length;\r\n\r\n  if (length < num - 10) document.getElementById(wrap).style.color = 'white';\r\n  if (length >= num - 10) document.getElementById(wrap).style.color = 'yellow';\r\n  if (length === num) document.getElementById(wrap).style.color = 'red';\r\n\r\n  document.getElementById(count).textContent = e.target.value.length\r\n}","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  inputProfileStatus: {\r\n    minHeight: '30px',\r\n    maxHeight: '180px',\r\n    lineHeight: '25px',\r\n    padding: theme.spacing(1),\r\n    backgroundColor: '#4F4F4F', \r\n    borderRadius: '5px 5px 0 0',\r\n  },\r\n}));\r\n\r\nexport default useStyles;","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getStatusSelector } from '../../../../redux/selectors/profile-selectors';\r\nimport { updateStatus } from '../../../../redux/reducers/profile-reducer';\r\n\r\nimport { handleInputCount, handleFocusCount, handleBlurCount } from '../../../common/inputCount/inputCount';\r\n\r\nimport s from './Status.module.css';\r\nimport useStyles from '../../../common/ElementCustom/InputCustomProfileStatus';\r\nimport { Input, Button } from '@material-ui/core';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\ntype PropsType = {\r\n  isOwner: boolean\r\n}\r\n\r\nconst Status: React.FC<PropsType> = (props) => {\r\n\r\n  const { isOwner } = props\r\n  const classes = useStyles()\r\n\r\n  const stylesSaveAndButton = {\r\n    color: '#fff', \r\n    margin: 10, \r\n    width: '100%',\r\n  }\r\n\r\n  const status = useSelector(getStatusSelector)\r\n  const dispatch = useDispatch()\r\n\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [statusLocal, setStatusLocal] = useState(status);\r\n\r\n  useEffect(() => {\r\n    setStatusLocal(status)\r\n  }, [status]);\r\n\r\n  const activateEditMode = () => setEditMode(true);\r\n  const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => setStatusLocal(e.currentTarget.value);\r\n  const cancelEditMode = () => setEditMode(false);\r\n\r\n  const saveStatus = () => {\r\n    dispatch(updateStatus(statusLocal));\r\n    setEditMode(false);\r\n  }\r\n\r\n  const num300 = 300;\r\n\r\n  return <div className={s.container}>\r\n    {editMode && <div className={s.wrap}>\r\n      <Input\r\n        name='status'\r\n        value={statusLocal}\r\n        placeholder={'Your status...'}\r\n        autoFocus\r\n        inputProps={{ maxLength: 300 }}\r\n        className={classes.inputProfileStatus}\r\n        multiline={true}\r\n        fullWidth={true}\r\n        onInput={handleInputCount.bind(null, num300)}\r\n        onFocus={handleFocusCount}\r\n        onBlur={handleBlurCount}\r\n        onChange={onStatusChange}\r\n      />\r\n\r\n      <div className={s.buttons}>\r\n        <div className={s.buttonWrap}>\r\n          <Button\r\n            onClick={saveStatus}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={stylesSaveAndButton}\r\n            startIcon={<SaveIcon />}\r\n          >Save</Button>\r\n        </div>\r\n        <div className={s.buttonWrap}>\r\n          <Button\r\n            onClick={cancelEditMode}\r\n            variant=\"outlined\"\r\n            style={stylesSaveAndButton}\r\n            startIcon={<CloseIcon />}\r\n          >Cancel</Button>\r\n        </div>\r\n\r\n        <span id='statusWrapCount'>\r\n          <span id='statusCount'></span> of 300\r\n        </span>\r\n      </div>\r\n    </div>\r\n    }\r\n\r\n    {isOwner && !editMode && <div className={s.status} onClick={activateEditMode}>\r\n      {status ||\r\n        <span className={s.statusEmpty}>\r\n          Your status is empty\r\n        </span>\r\n      }\r\n    </div>\r\n    }\r\n\r\n    {!isOwner && status && <div className={s.statusNotMy}>\r\n      {status}\r\n    </div>\r\n    }\r\n  </div>\r\n}\r\n\r\nexport default Status;","import { FormControlLabel, Checkbox } from '@material-ui/core';\r\n\r\nconst renderCheckbox = ({ input, label }) => {\r\n  return <div>\r\n    <FormControlLabel\r\n      control={\r\n        <Checkbox\r\n          checked={input.value ? true : false}\r\n          onChange={input.onChange}\r\n        />}\r\n      label={label}\r\n      labelPlacement=\"start\"\r\n      style={{ marginLeft: 0 }}\r\n    />\r\n  </div>\r\n}\r\n\r\nexport default renderCheckbox;","import React from 'react';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\n\r\nimport renderTextField from '../../../common/ElementCustom/renderTextField';\r\nimport renderCheckbox from '../../../common/ElementCustom/renderCheckbox';\r\nimport { handleInputCount, handleFocusCount, handleBlurCount } from '../../../common/inputCount/inputCount';\r\nimport s from './InfoDataForm.module.css';\r\nimport cn from 'classnames';\r\n\r\nimport { ProfileType } from '../../../../types/types';\r\n\r\ntype OwnPropsType = {\r\n  errorProfileContacts: string\r\n  initialValues: ProfileType\r\n}\r\n\r\nconst DataForm: React.FC<InjectedFormProps<ProfileType, OwnPropsType> & OwnPropsType> = (props) => {\r\n  const { handleSubmit, initialValues, errorProfileContacts } = props;\r\n\r\n  const num100 = 100;\r\n  const num1000 = 1000;\r\n\r\n  return <form onSubmit={handleSubmit} className={s.form}>\r\n\r\n    <h1 className={s.titleForm}>Edit profile</h1>\r\n\r\n    <div className={cn(s.wrap, s.wrapForCount)}>\r\n      <Field\r\n        component={renderTextField}\r\n        name='fullName'\r\n        label='Name:'\r\n        placeholder='Your name'\r\n        variant=\"filled\"\r\n        fullWidth={true}\r\n        inputProps={{ maxLength: 100 }}\r\n        onInput={handleInputCount.bind(null, num100)}\r\n        onFocus={handleFocusCount}\r\n        onBlur={handleBlurCount}\r\n      />\r\n      <span id='fullNameWrapCount' className={s.countStyle}>\r\n        <span id='fullNameCount'></span> of 100\r\n      </span>\r\n    </div>\r\n\r\n    <div className={cn(s.wrap, s.wrapForCount)}>\r\n      <Field\r\n        component={renderTextField}\r\n        name='aboutMe'\r\n        label='About me:'\r\n        placeholder='Write about yourself!'\r\n        multiline={true}\r\n        fullWidth={true}\r\n        variant=\"filled\"\r\n        inputProps={{ maxLength: 1000 }}\r\n        onInput={handleInputCount.bind(null, num1000)}\r\n        onFocus={handleFocusCount}\r\n        onBlur={handleBlurCount}\r\n      />\r\n      <span id='aboutMeWrapCount' className={s.countStyle}>\r\n        <span id='aboutMeCount'></span> of 1000\r\n      </span>\r\n    </div>\r\n\r\n    <div className={s.wrap}>\r\n      <Field\r\n        component={renderCheckbox}\r\n        name='lookingForAJob'\r\n        label='Are you looking for a job?'\r\n      />\r\n    </div>\r\n\r\n    <div className={cn(s.wrap, s.wrapForCount)}>\r\n      <Field\r\n        component={renderTextField}\r\n        name='lookingForAJobDescription'\r\n        label='Professional skills:'\r\n        placeholder='What you can do?'\r\n        multiline={true}\r\n        fullWidth={true}\r\n        variant=\"filled\"\r\n        inputProps={{ maxLength: 1000 }}\r\n        onInput={handleInputCount.bind(null, num1000)}\r\n        onFocus={handleFocusCount}\r\n        onBlur={handleBlurCount}\r\n      />\r\n      <span id='lookingForAJobDescriptionWrapCount' className={s.countStyle}>\r\n        <span id='lookingForAJobDescriptionCount'></span> of 1000\r\n      </span>\r\n    </div>\r\n\r\n    <div className={s.wrap}>\r\n      <div className={s.titleAllContacts}>Contacts:</div>\r\n\r\n      {errorProfileContacts ? <div className={s.errorProfileContacts}>\r\n        {errorProfileContacts}\r\n      </div> : <></>}\r\n\r\n      {Object.keys(initialValues.contacts).map(key => {\r\n        return <div className={s.contact} key={key}>\r\n          <div className={s.titleContact}>{key}:</div>\r\n          <Field\r\n            component={renderTextField}\r\n            name={'contacts.' + key}\r\n            multiline={true}\r\n            fullWidth={true}\r\n            placeholder='https://...'\r\n          />\r\n        </div>\r\n      })}\r\n    </div>\r\n  </form>\r\n}\r\n\r\nconst InfoDataForm = reduxForm<ProfileType, OwnPropsType>({\r\n  form: 'editProfile',\r\n})(DataForm);\r\n\r\nexport default InfoDataForm;","import React from 'react';\r\nimport { ProfileType, СontactsType } from '../../../../types/types';\r\nimport s from './InfoData.module.css';\r\n\r\ntype PropsType = {\r\n  profile: ProfileType\r\n}\r\n\r\nconst InfoData: React.FC<PropsType> = ({ profile }) => {\r\n  return <div className={s.containerForm}>\r\n\r\n    <div className={s.wrap}>\r\n      {profile.aboutMe && <div className={s.aboutMe}>\r\n        <div className={s.title}>About me:</div>\r\n        <div className={s.text}>{profile.aboutMe}</div>\r\n      </div>\r\n      }\r\n    </div>\r\n\r\n    <div className={s.wrap}>\r\n      <div className={s.job}>\r\n        <div className={s.title}>Job search:</div>\r\n        {profile.lookingForAJob\r\n          ? <div className={s.text}>Now looking for a job!</div>\r\n          : <div className={s.text}>I'm not looking for a job</div>}\r\n      </div>\r\n    </div>\r\n\r\n    <div className={s.wrap}>\r\n      {profile.lookingForAJobDescription && <div className={s.job}>\r\n        <div className={s.title}>Professional skills:</div>\r\n        <div className={s.text}>{profile.lookingForAJobDescription}</div>\r\n      </div>\r\n      }\r\n    </div>\r\n\r\n    <div className={s.wrap}>\r\n      {Object.values(profile.contacts).some(el => el && el !== '')\r\n        && <div className={s.contacts}>\r\n          <div className={s.title}>My contacts</div>\r\n          {Object.keys(profile.contacts).map(key => {\r\n            return <Contact\r\n              key={key}\r\n              contactTitle={key}\r\n              contactValue={profile.contacts[key as keyof СontactsType]} />\r\n          })}\r\n        </div>\r\n      }\r\n    </div>\r\n  </div >\r\n}\r\n\r\ntype ContactPropsType = {\r\n  contactTitle: string\r\n  contactValue: string\r\n}\r\n\r\nconst Contact: React.FC<ContactPropsType> = React.memo(({ contactTitle, contactValue }) => {\r\n  return (<>\r\n    {contactValue\r\n      && <div className={s.contact}>\r\n        <span className={s.contactTitle}>{contactTitle}:</span>\r\n        <div className={s.contactTextWrap}>\r\n          <a className={s.contactText} href={contactValue}>\r\n            {contactValue.replace(/(?:https?):\\/\\/([^/\\s]+)[^\\s]*/ig, '$1')}\r\n          </a>\r\n        </div>\r\n      </div>}\r\n  </>\r\n  )\r\n})\r\n\r\nexport default InfoData;","export default __webpack_public_path__ + \"static/media/camera.12909c41.svg\";","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { submit } from 'redux-form';\r\nimport { getErrorProfileContacts, getProfile, getShowSuccessSave } from '../../../redux/selectors/profile-selectors';\r\nimport { savePhotoThunk, saveProfileThunk } from '../../../redux/reducers/profile-reducer';\r\nimport { ProfileType } from '../../../types/types';\r\n\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport Status from './Status/Status';\r\nimport Avatar from '../../common/Avatar/Avatar';\r\nimport InfoDataForm from './InfoDataForm/InfoDataForm';\r\nimport InfoData from './InfoData/InfoData';\r\n\r\nimport s from './InfoContainer.module.css';\r\nimport camera from '../../../img/icons/camera.svg';\r\nimport Button from '@material-ui/core/Button';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n// при переходе на старницу профиля скрол обнулится\r\nfunction ScrollToTopOnMount() {\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n  return null;\r\n}\r\n\r\ntype OwnPropsType = {\r\n  isOwner: boolean\r\n}\r\n\r\nconst ProfileInfo: React.FC<{} & {} & OwnPropsType> = ({ isOwner }) => {\r\n\r\n  const stylesSaveAndCancelButton = {\r\n    fontSize: 12,\r\n    color: '#fff',\r\n    margin: 10\r\n  }\r\n  const stylesEditButton = {\r\n    fontSize: 12,\r\n    marginTop: 20\r\n  }\r\n\r\n  const [editModeProfile, setEditModeProfile] = useState(false);\r\n\r\n  // for InfoDataForm\r\n  const errorProfileContacts = useSelector(getErrorProfileContacts)\r\n\r\n  const profile = useSelector(getProfile)\r\n  const showSuccessSave = useSelector(getShowSuccessSave)\r\n  const dispatch = useDispatch()\r\n\r\n  const onSubmit = (values: ProfileType) => {\r\n    dispatch(saveProfileThunk(values))\r\n  }\r\n\r\n  const onMainPhotoSelected = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files?.length) {\r\n      dispatch(savePhotoThunk(e.target.files[0]))\r\n    }\r\n  }\r\n\r\n  if (!profile) {\r\n    return <Preloader />\r\n  }\r\n\r\n  return (\r\n    <div className={s.containerMain}>\r\n\r\n      {/* при переходе на старницу профиля скрол обнулится */}\r\n      <ScrollToTopOnMount />\r\n\r\n      <div className={s.columnLeft}>\r\n        <Avatar photo={profile.photos.large} size='large'>\r\n          {isOwner && !editModeProfile &&\r\n            <div className={s.camera}>\r\n              <label htmlFor=\"file_out\">\r\n                <div className={s.wrapImg}>\r\n                  <img src={camera} alt=\"icon\" />\r\n                </div>\r\n              </label>\r\n              <input\r\n                id=\"file_out\"\r\n                className={s.editPhotoInput}\r\n                type=\"file\"\r\n                onChange={onMainPhotoSelected} />\r\n            </div>\r\n          }\r\n        </Avatar>\r\n\r\n        {isOwner && !editModeProfile\r\n          && <Button\r\n            onClick={() => setEditModeProfile(true)}\r\n            variant=\"outlined\"\r\n            style={stylesEditButton}\r\n            startIcon={<EditIcon style={{ fontSize: 16 }} />}\r\n          >Edit profile</Button>\r\n        }\r\n\r\n        {editModeProfile && <div className={s.buttonsSaveAndCancelProfile}>\r\n          <Button\r\n            onClick={() => dispatch(submit('editProfile'))}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            fullWidth={true}\r\n            style={stylesSaveAndCancelButton}\r\n            startIcon={<SaveIcon />}\r\n          >Save</Button>\r\n          <Button\r\n            onClick={() => setEditModeProfile(false)}\r\n            variant=\"outlined\"\r\n            fullWidth={true}\r\n            style={stylesSaveAndCancelButton}\r\n            startIcon={<CloseIcon />}\r\n          >Cancel</Button>\r\n        </div>}\r\n\r\n        {editModeProfile && showSuccessSave &&\r\n          <div className={s.successSave}>\r\n            {showSuccessSave}\r\n          </div>\r\n        }\r\n      </div>\r\n\r\n\r\n      <div className={s.columnRight}>\r\n\r\n        {!editModeProfile && <div className={s.fullName}>{profile.fullName}</div>}\r\n\r\n        {!editModeProfile &&\r\n          <Status\r\n            isOwner={isOwner} />\r\n        }\r\n\r\n        {editModeProfile\r\n          ? <InfoDataForm\r\n            initialValues={profile}\r\n            errorProfileContacts={errorProfileContacts}\r\n            onSubmit={onSubmit}\r\n          />\r\n          : <InfoData profile={profile} />}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst InfoContainer = ProfileInfo\r\nexport default InfoContainer","import React from 'react';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { getUserProfile, getStatus } from '../../redux/reducers/profile-reducer';\r\n\r\nimport withAuthRedirect from '../hoc/withAuthRedirect';\r\nimport WallContainer from './Wall/WallContainer';\r\nimport InfoContainer from './Info/InfoContainer';\r\n\r\ntype MapStatePropsType = {\r\n  authorizedUserID: number | null\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n  getUserProfile: (userId: number) => void\r\n  getStatus: (userId: number) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n  userId: string\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends React.PureComponent<PropsType> {\r\n\r\n  refreshProfile() {\r\n    let userId: number | null = +this.props.match.params.userId;\r\n\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserID;\r\n      if (!userId) {\r\n        this.props.history.push('/login')\r\n      }\r\n    }\r\n\r\n    this.props.getUserProfile(userId as number);\r\n    this.props.getStatus(userId as number);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile()\r\n  }\r\n  componentDidUpdate(prevProps: PropsType) {\r\n    // рендер при переходе с одной страницы на другую\r\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n      this.refreshProfile()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <>\r\n      <InfoContainer\r\n        isOwner={+this.props.match.params.userId === this.props.authorizedUserID}\r\n      />\r\n      <WallContainer />\r\n    </>\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    authorizedUserID: state.auth.userID,\r\n  }\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect<MapStatePropsType, MapDispatchPropsType, RouteComponentProps<PathParamsType>, AppStateType>(\r\n    mapStateToProps,\r\n    {\r\n      getUserProfile,\r\n      getStatus,\r\n    }\r\n  ),\r\n  withRouter,\r\n  withAuthRedirect\r\n)(ProfileContainer)","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport { getAuthorizedUserID, getCaptchaURL, getIsAuth } from '../../redux/selectors/auth-selectors';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { loginThunk } from '../../redux/reducers/auth-reducer';\r\n\r\nimport s from './Login.module.css';\r\nimport cn from 'classnames';\r\nimport renderTextField from '../common/ElementCustom/renderTextField';\r\nimport renderCheckbox from '../common/ElementCustom/renderCheckbox';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst validate = (values: LoginFormValuesType) => {\r\n\r\n  type ErrorsType = {\r\n    email?: string\r\n    password?: string\r\n    captcha?: string\r\n  }\r\n\r\n  const errors: ErrorsType = {}\r\n  const requiredFields = [\r\n    'email',\r\n    'password',\r\n    'captcha'\r\n  ]\r\n\r\n  requiredFields.forEach(field => {\r\n    if (!values[field as keyof LoginFormValuesType]) {\r\n      errors[field as keyof ErrorsType] = 'Required'\r\n    }\r\n  })\r\n\r\n  if (values.email\r\n    && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n    errors.email = 'Invalid email address'\r\n  }\r\n\r\n  return errors\r\n}\r\n\r\n\r\n\r\ntype OwnPropsType = {\r\n  captchaURL: string | null\r\n}\r\n\r\ntype LoginFormValuesType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n  captcha: string\r\n}\r\n\r\n\r\n\r\nconst Login: React.FC = (props) => {\r\n\r\n  const isAuth = useSelector(getIsAuth)\r\n  const captchaURL = useSelector(getCaptchaURL)\r\n  const userID = useSelector(getAuthorizedUserID)\r\n  const dispatch = useDispatch()\r\n\r\n  const onSubmit = (values: LoginFormValuesType) => {\r\n    dispatch(loginThunk(\r\n      values.email, values.password, values.rememberMe, values.captcha))\r\n  }\r\n\r\n  if (isAuth) {\r\n    return <Redirect to={`/profile/${userID}`} />\r\n  }\r\n\r\n  return <div className={s.wrap}>\r\n    <div className={s.body}>\r\n      <h1>Log in</h1>\r\n      <LoginReduxForm\r\n        onSubmit={onSubmit}\r\n        captchaURL={captchaURL} />\r\n    </div>\r\n  </div>\r\n}\r\n\r\n\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, OwnPropsType> & OwnPropsType> = ({ handleSubmit, error, captchaURL }) => {\r\n\r\n  const stylesLoginButton: any = {\r\n    width: '100%', \r\n    fontSize: 16, \r\n    fontWeight: 'bold', \r\n    color: '#fff' \r\n  }\r\n\r\n  return <>\r\n    <form onSubmit={handleSubmit}>\r\n      <div className={s.row}>\r\n        <Field\r\n          component={renderTextField}\r\n          name='email'\r\n          label='Email:'\r\n          type=\"email\"\r\n          fullWidth={true}\r\n        />\r\n      </div>\r\n      <div className={s.row}>\r\n        <Field\r\n          component={renderTextField}\r\n          name='password'\r\n          label='Password:'\r\n          type=\"password\"\r\n          fullWidth={true}\r\n        />\r\n      </div>\r\n      <div className={cn(s.row, s.rowCheckbox)}>\r\n        <Field\r\n          component={renderCheckbox}\r\n          name='rememberMe'\r\n          label='Remember me'\r\n        />\r\n      </div>\r\n\r\n      {captchaURL && <img src={captchaURL} alt='captcha' />}\r\n      {captchaURL &&\r\n        <Field\r\n          component={renderTextField}\r\n          fullWidth={true}\r\n          name='captcha' />\r\n      }\r\n\r\n      <div className={s.row}>\r\n        <Button\r\n          type='submit'\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          style={stylesLoginButton}\r\n        >Log in</Button>\r\n\r\n        {error &&\r\n          <div className={s.formError}>\r\n            {error}\r\n          </div>\r\n        }\r\n      </div>\r\n    </form>\r\n  </>\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, OwnPropsType>({\r\n  form: 'loginForm',\r\n  validate,\r\n})(LoginForm);\r\n\r\nexport default Login","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { error: null };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    return { error: error };\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return (\r\n        <div>\r\n          <h2>Something went wrong</h2>\r\n          <details style={{ whiteSpace: 'pre-wrap' }}>\r\n            {this.state.error?.toString()}\r\n          </details>\r\n        </div>\r\n      );\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport { Route, withRouter, Switch, Redirect } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppStateType } from './redux/redux-store';\r\nimport { initializeAppThunk } from './redux/reducers/app-reducer';\r\nimport { getAuthorizedUserID } from './redux/selectors/auth-selectors';\r\n\r\nimport Preloader from './components/common/Preloader/Preloader';\r\nimport { withSuspense } from './components/hoc/withSuspense';\r\n\r\nimport s from './App.module.css';\r\nimport Header from './components/Header/Header';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport ProfileContainer from './components/Profile/ProfileContainer';\r\nimport Login from './components/Login/Login';\r\nimport ErrorBoundary from './components/Error/ErrorBoundary';\r\n\r\nconst ChatContainer = React.lazy(\r\n  () => import('./components/Chat/Chat'));\r\nconst UsersContainer = React.lazy(\r\n  () => import('./components/Users/UsersContainer'));\r\n\r\nconst SuspendedChat = withSuspense(ChatContainer);\r\nconst SuspendedUsers = withSuspense(UsersContainer);\r\n\r\nconst App: React.FC = (props) => {\r\n\r\n  const initialized = useSelector((state: AppStateType) => state.app.initialized)\r\n  const userID = useSelector(getAuthorizedUserID)\r\n  const dispatch = useDispatch()\r\n  // @ts-ignore\r\n  React.useEffect(() => dispatch(initializeAppThunk()), [dispatch]);\r\n\r\n  if (!initialized) {\r\n    return <Preloader />\r\n  }\r\n\r\n  return (\r\n    <div className={s.fon}>\r\n      <div className={s.container}>\r\n        <div className={s.appWrapper}>\r\n\r\n          <Header />\r\n          <Navbar />\r\n\r\n          <div className={s.appWrapperContent}>\r\n            <ErrorBoundary>\r\n              <Switch>\r\n                <Redirect from='/profile/undefined' to=\"/\" />\r\n\r\n                <Route path='/profile/:userId'\r\n                  render={() => <ProfileContainer />} />\r\n\r\n                <Route path='/chat'\r\n                  render={() => <SuspendedChat />} />\r\n\r\n                <Route path='/friends'\r\n                  render={() => <SuspendedUsers />} />\r\n\r\n                <Route path='/users'\r\n                  render={() => <SuspendedUsers />} />\r\n\r\n                <Route path='/login'\r\n                  render={() => <Login />} />\r\n\r\n                <Redirect exact from=\"/\" to={'/profile/' + userID} />\r\n\r\n                <Redirect from='*' to=\"/\" />\r\n              </Switch>\r\n            </ErrorBoundary>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst AppContainer = withRouter(App)\r\nexport default AppContainer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport store from './redux/redux-store';\r\n\r\nimport AppContainer from './App';\r\n\r\nimport { createMuiTheme, ThemeProvider, responsiveFontSizes } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport cyan from '@material-ui/core/colors/cyan';\r\n\r\nlet theme = createMuiTheme({\r\n  palette: {\r\n    type: 'dark', // светлый текст\r\n    primary: {\r\n      main: cyan[600], // #00bcd4\r\n      // синий цвет (кнопки, активные ссылки в навигации, декоративные линии)\r\n    },\r\n    secondary: {\r\n      main: '#919191',\r\n      // фон светлее общего (hover и текст в profileForm)\r\n\r\n      // #222831\r\n      // фон header, nav, content\r\n\r\n      // #4F4F4F\r\n      // фон подложки\r\n\r\n      // #5E5E5E\r\n      // средний серый (фон статуса при редактировании)\r\n    },\r\n  },\r\n});\r\n\r\ntheme = responsiveFontSizes(theme);\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <ThemeProvider theme={theme}>\r\n      <Provider store={store}>\r\n        <CssBaseline />\r\n        <AppContainer />\r\n      </Provider>\r\n    </ThemeProvider>\r\n  </HashRouter>, document.getElementById('root')\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"camera\":\"InfoContainer_camera__IpD6r\",\"wrapImg\":\"InfoContainer_wrapImg__10vd-\",\"editPhotoInput\":\"InfoContainer_editPhotoInput__XccDx\",\"containerMain\":\"InfoContainer_containerMain__3Xio4\",\"columnLeft\":\"InfoContainer_columnLeft__1_kJ8\",\"columnRight\":\"InfoContainer_columnRight__2qyh0\",\"iconButtonEditProfile\":\"InfoContainer_iconButtonEditProfile__26Jz-\",\"fullName\":\"InfoContainer_fullName__7Hk3o\",\"buttonsSaveAndCancelProfile\":\"InfoContainer_buttonsSaveAndCancelProfile__1uVyp\",\"successSave\":\"InfoContainer_successSave__23-f5\",\"anim\":\"InfoContainer_anim__QEFY8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3vTSi\",\"logoAndTitle\":\"Header_logoAndTitle__1mTjG\",\"headerTitle\":\"Header_headerTitle__2wZ_g\",\"rightPart\":\"Header_rightPart__sDTHI\",\"loginAndPhoto\":\"Header_loginAndPhoto__3okUT\",\"loginName\":\"Header_loginName__3CaV_\",\"logoutImg\":\"Header_logoutImg__1QW2c\",\"buttonMobile\":\"Header_buttonMobile__3V8e5\",\"buttonDesctop\":\"Header_buttonDesctop__38OBn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Status_container__BDZoe\",\"wrap\":\"Status_wrap__1mMIC\",\"buttons\":\"Status_buttons__KMxYA\",\"buttonWrap\":\"Status_buttonWrap__3yn6L\",\"status\":\"Status_status__27mFj\",\"statusNotMy\":\"Status_statusNotMy__3afoa\",\"statusEmpty\":\"Status_statusEmpty__1-cAn\",\"buttonSave\":\"Status_buttonSave__2MrEy\",\"buttonCancel\":\"Status_buttonCancel__10fUe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Login_wrap__18LVK\",\"body\":\"Login_body__2Hhs9\",\"row\":\"Login_row__3d41Y\",\"rowCheckbox\":\"Login_rowCheckbox__4sYwU\",\"formError\":\"Login_formError__3j1Nj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Post_container__3VKFd\",\"avatar\":\"Post_avatar__Z9tVC\",\"nameAndPost\":\"Post_nameAndPost__14k_q\",\"name\":\"Post_name__UCrHi\",\"message\":\"Post_message__1vD2I\",\"wrapLike\":\"Post_wrapLike__1qVOH\",\"like\":\"Post_like__30Txn\"};","export default __webpack_public_path__ + \"static/media/preloader.a2993579.svg\";","import React from 'react';\r\nimport preloader from '../../../img/preloader.svg';\r\n\r\nconst stylesContainer = {\r\n  position: 'absolute', \r\n  // left: 'calc(50% - 85px)',\r\n}\r\n\r\nconst stylesWrap = {\r\n  display: 'flex', \r\n  justifyContent: 'center',\r\n}\r\n\r\nconst Preloader = () => {\r\n  return <div style={stylesContainer}>\r\n    <div style={stylesWrap}>\r\n      <img src={preloader} alt='preloader' />\r\n    </div>\r\n  </div>\r\n\r\n};\r\n\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Avatar_avatar__3Sz_o\",\"avatarWrap\":\"Avatar_avatarWrap__3LEkK\",\"small\":\"Avatar_small__qQzaA\",\"medium\":\"Avatar_medium__17vM9\",\"large\":\"Avatar_large__2zfpp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fon\":\"App_fon__Rn3Sm\",\"container\":\"App_container__2T05O\",\"appWrapper\":\"App_appWrapper__1hlCE\",\"appWrapperContent\":\"App_appWrapperContent__1C2YH\"};"],"sourceRoot":""}