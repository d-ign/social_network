{"version":3,"sources":["components/Dialogs/Dialogs.module.css","../node_modules/@material-ui/icons/Send.js","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","value","default","React","_default","createElement","d","DialogItem","props","path","id","className","s","active","to","style","color","name","Message","message","overflowWrap","width","marginBottom","text","DialogsReduxForm","reduxForm","form","onSubmit","handleSubmit","wrapSendAndButton","Field","component","renderTextField","placeholder","multiline","fullWidth","variant","inputProps","maxLength","Button","type","marginLeft","endIcon","Dialogs","dialogsElements","messagesPage","dialogs","map","messagesElements","messages","m","containerMain","container","items","values","sendMessage","newMessageBody","compose","connect","state","withAuthRedirect"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,UAAY,2BAA2B,MAAQ,uBAAuB,QAAU,yBAAyB,QAAU,yBAAyB,kBAAoB,qC,iCCClL,IAAIC,EAAyBC,EAAQ,IAEjCC,EAA0BD,EAAQ,IAEtCE,OAAOC,eAAeL,EAAS,aAAc,CAC3CM,OAAO,IAETN,EAAQO,aAAU,EAElB,IAAIC,EAAQL,EAAwBD,EAAQ,IAIxCO,GAAW,EAFMR,EAAuBC,EAAQ,KAElBK,SAAuBC,EAAME,cAAc,OAAQ,CACnFC,EAAG,0CACD,QAEJX,EAAQO,QAAUE,G,gICNHG,EATI,SAACC,GAClB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACE,cAAC,IAAD,CAASC,UAAWC,IAAEC,OAAQC,GAAIL,EAAMM,MAAO,CAACC,MAAO,SAAvD,SACCR,EAAMS,QCEIC,EAPC,SAACV,GACf,OAAO,qBAAKG,UAAWC,IAAEO,QACvBJ,MAAO,CAAEK,aAAc,aAAcC,MAAO,QAASC,aAAc,IAD9D,SAEJd,EAAMe,Q,mCCsDLC,EAAmBC,YAAU,CACjCC,KAAM,wBADiBD,EAvBD,SAACjB,GACvB,OAAO,sBAAMmB,SAAUnB,EAAMoB,aAAtB,SACH,sBAAKjB,UAAWC,IAAEiB,kBAAlB,UACE,cAACC,EAAA,EAAD,CACEC,UAAWC,IACXf,KAAK,iBACLgB,YAAY,wBACZC,WAAW,EACXC,WAAW,EACXC,QAAQ,WACRC,WAAY,CAAEC,UAAW,OAE3B,cAACC,EAAA,EAAD,CACEC,KAAK,SACLJ,QAAQ,YACRpB,MAAM,UACND,MAAO,CAAEC,MAAO,QAASyB,WAAY,QACrCC,QAAS,cAAC,IAAD,IALX,0BAeOC,EArDC,SAACnC,GAEf,IAAIoC,EAAkBpC,EAAMqC,aAAaC,QAAQC,KAAI,SAAAzC,GAAC,OACpD,cAAC,EAAD,CAAuBW,KAAMX,EAAEW,KAAMP,GAAIJ,EAAEI,IAA1BJ,EAAEI,OACjBsC,EAAmBxC,EAAMqC,aAAaI,SAASF,KAAI,SAAAG,GAAC,OACtD,cAAC,EAAD,CAAoB3B,KAAM2B,EAAE/B,SAAd+B,EAAExC,OAMlB,OAAO,qBAAKC,UAAWC,IAAEuC,cAAlB,SAEL,sBAAKxC,UAAWC,IAAEwC,UAAlB,UACE,qBAAKzC,UAAWC,IAAEyC,MAAlB,SACGT,IAGH,sBAAKjC,UAAWC,IAAEkC,QAAlB,UACGE,EACD,cAACxB,EAAD,CAAkBG,SAbF,SAAC2B,GACrB9C,EAAM+C,YAAYD,EAAOE,4B,QCAdC,sBACbC,aAboB,SAACC,GACrB,MAAO,CACLd,aAAcc,EAAMd,gBAWG,CACvBU,kBAEFK,IAJaH,CAKbd","file":"static/js/3.11519c0d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Dialogs_container__KlA9W\",\"items\":\"Dialogs_items__ynFSW\",\"dialogs\":\"Dialogs_dialogs__1YIzW\",\"message\":\"Dialogs_message__D3bS7\",\"wrapSendAndButton\":\"Dialogs_wrapSendAndButton__23pJv\"};","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z\"\n}), 'Send');\n\nexports.default = _default;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from '../Dialogs.module.css';\r\n\r\nconst DialogItem = (props) => {\r\n  let path = '/dialogs/' + props.id;\r\n  return (\r\n    <NavLink className={s.active} to={path} style={{color: 'white'}}>\r\n    {props.name}\r\n    </NavLink>\r\n  )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from '../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n  return <div className={s.message}\r\n    style={{ overflowWrap: 'break-word', width: '400px', marginBottom: 20 }}>\r\n    {props.text}\r\n  </div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\n\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\n\r\nimport s from './Dialogs.module.css';\r\nimport renderTextField from '../../components/common/ElementCustom/renderTextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport SendIcon from '@material-ui/icons/Send';\r\n\r\nconst Dialogs = (props) => {\r\n\r\n  let dialogsElements = props.messagesPage.dialogs.map(d =>\r\n    <DialogItem key={d.id} name={d.name} id={d.id} />);\r\n  let messagesElements = props.messagesPage.messages.map(m =>\r\n    <Message key={m.id} text={m.message} />);\r\n\r\n  const addNewMessage = (values) => {\r\n    props.sendMessage(values.newMessageBody) // newMessageBody - name у Field\r\n  }\r\n\r\n  return <div className={s.containerMain}>\r\n\r\n    <div className={s.container}>\r\n      <div className={s.items}>\r\n        {dialogsElements}\r\n      </div>\r\n\r\n      <div className={s.dialogs}>\r\n        {messagesElements}\r\n        <DialogsReduxForm onSubmit={addNewMessage} />\r\n      </div>\r\n    </div>\r\n  </div>\r\n}\r\n\r\nconst SendMessageForm = (props) => {\r\n  return <form onSubmit={props.handleSubmit}>\r\n      <div className={s.wrapSendAndButton}>\r\n        <Field\r\n          component={renderTextField}\r\n          name='newMessageBody'\r\n          placeholder='Enter your message...'\r\n          multiline={true}\r\n          fullWidth={true}\r\n          variant=\"outlined\"\r\n          inputProps={{ maxLength: 1000 }}\r\n        />\r\n        <Button\r\n          type='submit'\r\n          variant=\"contained\"\r\n          color='primary'\r\n          style={{ color: 'white', marginLeft: '10px' }}\r\n          endIcon={<SendIcon />}\r\n        >Send</Button>\r\n      </div>\r\n    </form>\r\n}\r\n\r\nconst DialogsReduxForm = reduxForm({\r\n  form: 'dialogAddMessageForm'\r\n})(SendMessageForm);\r\n\r\nexport default Dialogs;","// import React from 'react';\r\nimport { sendMessage } from '../../redux/messages-reducer';\r\nimport withAuthRedirect from '../hoc/withAuthRedirect';\r\nimport { connect } from 'react-redux';\r\nimport Dialogs from './Dialogs';\r\nimport { compose } from 'redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    messagesPage: state.messagesPage,\r\n  }\r\n};\r\n\r\n// создание контейнерной компоненты с помощью библиотеки react-redux\r\n// всего лишь обернув withAuthRedirect -ом презентационную компоненту мы создаём редирект\r\n// export default connect(mapStateToProps, mapDispatchToProps)(withAuthRedirect(Dialogs));\r\n// или так\r\n// export default withAuthRedirect(connect(mapStateToProps, mapDispatchToProps)(Dialogs));\r\n// или так\r\nexport default compose(\r\n  connect(mapStateToProps, {\r\n    sendMessage,\r\n  }),\r\n  withAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}