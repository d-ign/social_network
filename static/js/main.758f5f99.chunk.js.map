{"version":3,"sources":["img/no_photo.png","redux/messages-reducer.js","utils/objects-helpers.js","redux/users-reducer.js","components/Profile/Wall/Post/Post.module.css","api/api.js","img/icons/logo.svg","components/Header/Header.jsx","redux/auth-reducer.js","components/Header/HeaderContainer.jsx","components/Navbar/Navbar.jsx","redux/profile-reducer.js","img/avatar_2.jpg","components/Profile/Wall/Post/Post.jsx","components/Profile/Wall/Wall.jsx","components/Profile/Wall/WallContainer.jsx","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/ProfileContainer.jsx","components/Login/Login.jsx","redux/app-reducer.js","redux/redux-store.js","components/hoc/withSuspense.js","App.js","reportWebVitals.js","index.js","img/preloader.svg","components/common/Preloader/Preloader.jsx","utils/validators/validators.js","components/Header/Header.module.css","components/Login/Login.module.css","components/Navbar/Navbar.module.css","components/common/FormsControls/FormsControls.js","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/Wall/Wall.module.css","components/common/FormsControls/FormsControls.module.css"],"names":["SEND_MESSAGE","initialState","dialogs","id","name","messages","message","sendMessage","newMessageBody","type","messagesReducer","state","action","updateObjectInArray","items","itemID","objPropName","newObjProps","map","u","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","followSuccess","userID","unfollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingProgress","getUsersThunk","page","dispatch","usersAPI","getUsers","then","data","totalCount","count","followUnfollowFlow","apiMethod","actionCreator","a","resultCode","follow","followUser","bind","unfollow","unfollowUser","usersReducer","followed","filter","module","exports","instance","axios","withCredentials","baseURL","headers","get","response","post","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","authAPI","me","login","email","password","rememberMe","logout","Header","props","className","s","header","src","logo","alt","loginBlock","isAuth","login_name","onClick","logoutThunk","login_link","to","SET_USER_DATA","setAuthUserData","payload","getAuthUserData","authReducer","HeaderContainer","render","React","Component","connect","auth","Navbar","nav","activeClassName","active","ADD_POST","SET_USER","SET_STATUS","DELETE_POST","posts","likesCount","profile","setStatus","profileReducer","newPost","newPostText","p","postID","Post","pageWall__newPost","avatar","maxLength30","maxLengthCreator","Textarea","Element","PostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","validate","placeholder","Wall","postsElements","pageWall","pageWall__title","values","addPost","profilePage","ProfileStatus","editMode","activateEditMode","setState","deactivateEditMode","handleFocus","event","target","select","onStatusChange","e","currentTarget","value","prevProps","this","autoFocus","onFocus","onChange","onBlur","ProfileInfo","Preloader","photo","photos","small","pageInfo__data","dataRow","unknown","about","aboutMe","href","contacts","facebook","website","vk","twitter","instagram","youtube","github","ProfileContainer","userId","match","params","authorizedUserID","history","push","getUserProfile","WallContainer","compose","withRouter","Input","LoginReduxForm","error","row","for","required","formError","loginThunk","stopSubmit","_error","length","formData","INITIALIZED_SUCCESS","initialized","appReducer","reducers","combineReducers","messagesPage","usersPage","app","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","fallback","DialogsContainer","lazy","UsersContainer","App","initializeAppThunk","exact","from","path","AppContainer","Promise","all","SamuraiJSApp","basename","process","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById","preloader","undefined","maxLength","input","meta","touched","showError","formControl"],"mappings":"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","file":"static/js/main.758f5f99.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/no_photo.0ddfe4d4.png\";","// const UPDATE_NEW_MESSAGE_BODY = 'UPDATE-NEW-MESSAGE-BODY';\r\nconst SEND_MESSAGE = 'SEND-MESSAGE';\r\n\r\nlet initialState = {\r\n  dialogs: [\r\n    { id: '1', name: 'Denis' },\r\n    { id: '2', name: 'Andrey' },\r\n    { id: '3', name: 'Alexandr' },\r\n    { id: '4', name: 'Alisa' },\r\n  ],\r\n\r\n  messages: [\r\n    { id: '1', message: 'Hi!' },\r\n    { id: '2', message: 'lalalalalalala' },\r\n    { id: '3', message: 'How are you?' },\r\n  ],\r\n};\r\n\r\nconst messagesReducer = (state = initialState, action) => {\r\n\r\n  // копируем только то, что планируем изменять; внутренние объекты массива (с id которые) мы менять не планируем, поэтому их копию и не делаем\r\n  // stateCopy = 'копия state' или copy of state\r\n\r\n  switch (action.type) {\r\n    // case UPDATE_NEW_MESSAGE_BODY:\r\n    //   return {\r\n    //     ...state,\r\n    //     newMessageBody: action.body\r\n    //   };\r\n\r\n    case SEND_MESSAGE:\r\n      return {\r\n        ...state,\r\n        messages: [\r\n          ...state.messages, \r\n          { id: '6', \r\n          message: action.newMessageBody }\r\n        ],\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// updateNewMessageBody (читается: обновить ТЕЛО нового сообщения) то же самое, что и \"body of new message\"\r\n// больше его не надо, т.к. за состояние сообщения теперь отвечает библиотека redux-form\r\n// export const updateNewMessageBody = (symbol) => ({\r\n//   type: UPDATE_NEW_MESSAGE_BODY,\r\n//   body: symbol\r\n// });\r\nexport const sendMessage = (newMessageBody) => ({ type: SEND_MESSAGE, newMessageBody });\r\n\r\nexport default messagesReducer;","export const updateObjectInArray = (items, itemID, objPropName, newObjProps) => {\r\n  return items.map(u => {\r\n    if (u[objPropName] === itemID) {\r\n      return { ...u, ...newObjProps }\r\n    }\r\n    return u\r\n  })\r\n}","import { usersAPI } from '../api/api';\r\nimport { updateObjectInArray } from '../utils/objects-helpers';\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET-USERS';\r\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET-TOTAL-USERS-COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE-IS-FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE-IS-FOLLOWING-PROGRESS';\r\n\r\nlet initialState = {\r\n  users: [],\r\n  pageSize: 50,\r\n  totalUsersCount: 0,\r\n  currentPage: 1,\r\n  isFetching: true, // Preloader - крутилка во время ожидания ответа от сервера. is - это означает вопрос: получен? Вообще смотреть на последнее слово, оно ообозначает то, что находится в значении\r\n  followingInProgress: [], // disabled button после нажатия\r\n};\r\n\r\n// здесь в зависимости от type в action который к нас пришел мы возвращаем новый объект на основе старого state (копируем) и вносит свои изменения (перезаписываем одно из свойств)\r\nconst usersReducer = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case FOLLOW: {\r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(\r\n          state.users, action.userID, 'id', { followed: true }),\r\n        // users: state.users.map(u => {\r\n        //   if (u.id === action.userID) {\r\n        //     return { ...u, followed: true }\r\n        //   }\r\n        //   return u\r\n        // })\r\n      }\r\n    }\r\n    case UNFOLLOW: {\r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(\r\n          state.users, action.userID, 'id', { followed: false }),\r\n\r\n        // users: state.users.map(u => {\r\n        //   if (u.id === action.userID) {\r\n        //     return { ...u, followed: false }\r\n        //   }\r\n        //   return u\r\n        // })\r\n      }\r\n    }\r\n    case SET_USERS: {\r\n      return {\r\n        ...state,\r\n        users: action.users\r\n      }\r\n    }\r\n    case SET_CURRENT_PAGE: {\r\n      return {\r\n        ...state,\r\n        currentPage: action.currentPage,\r\n      }\r\n    }\r\n    case SET_TOTAL_USERS_COUNT: {\r\n      return {\r\n        ...state,\r\n        totalUsersCount: action.count,\r\n      }\r\n    }\r\n    case TOGGLE_IS_FETCHING: {\r\n      return {\r\n        ...state,\r\n        isFetching: action.isFetching,\r\n      }\r\n    }\r\n    case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n      return {\r\n        ...state,\r\n        // делаем блокировку только одной кнопки подписки пока идёт запрос и возвращается ответ с сервера, а не всех\r\n        followingInProgress: action.isFetching\r\n          ? [...state.followingInProgress, action.userID]\r\n          : state.followingInProgress.filter(id => id !== action.userID), // filter вернёт новый массив, поэтому копию не нужно делать\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// это action creators = call backs, которые dispatch-ит connect (сам за кадром) и они возвращают action (объекты), который сам redux берёт и отправляет в соответствующий reducer, и после определяется совпадающий case, делается копия state, они сравниваются и отличия перерисовывается (ререндериваються) - перерисовывается UI\r\nconst followSuccess = (userID) => ({ type: FOLLOW, userID });\r\nconst unfollowSuccess = (userID) => ({ type: UNFOLLOW, userID });\r\n\r\n// получить всех пользователей\r\nconst setUsers = (users) => ({ type: SET_USERS, users: users });\r\n// установить текущую страницу, на которую кликаем\r\nexport const setCurrentPage = (currentPage) => ({ type: SET_CURRENT_PAGE, currentPage: currentPage }); // или currentPage просто\r\n// установить общее кол-во пользователей\r\nconst setTotalUsersCount = (totalUsersCount) => ({ type: SET_TOTAL_USERS_COUNT, count: totalUsersCount });\r\nconst toggleIsFetching = (isFetching) => ({ type: TOGGLE_IS_FETCHING, isFetching });\r\nexport const toggleFollowingProgress = (isFetching, userID) => ({ type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userID });\r\n\r\n\r\n\r\n\r\n// создатель \"санки\"\r\nexport const getUsersThunk = (page, pageSize) => {\r\n  // возвращаем \"санку\", замкнув параметр выше\r\n  return (dispatch) => {\r\n    dispatch(toggleIsFetching(true));\r\n\r\n    usersAPI.getUsers(page, pageSize).then(data => {\r\n      dispatch(setUsers(data.items));\r\n      dispatch(setTotalUsersCount(data.totalCount));\r\n      dispatch(toggleIsFetching(false));\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst followUnfollowFlow = async (dispatch, id, apiMethod, actionCreator) => {\r\n  dispatch(toggleFollowingProgress(true, id));\r\n\r\n  const response = await apiMethod(id);\r\n  if (response.data.resultCode === 0) {\r\n    dispatch(actionCreator(id))\r\n  }\r\n\r\n  dispatch(toggleFollowingProgress(false, id));\r\n}\r\n\r\nexport const follow = (id) => {\r\n  return async (dispatch) => {\r\n    followUnfollowFlow(dispatch, id, \r\n      usersAPI.followUser.bind(usersAPI), followSuccess)\r\n  }\r\n}\r\n\r\nexport const unfollow = (id) => {\r\n  return async (dispatch) => {\r\n    followUnfollowFlow(dispatch, id, \r\n      usersAPI.unfollowUser.bind(usersAPI), unfollowSuccess)\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default usersReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageWall__newPost\":\"Post_pageWall__newPost__3K832\"};","// Слой (Layer) доступа к данным (Data Access Layer — DAL), он занимается типом запроса, url и такое всё - это его ответсвенность. Находится между BLL и сервером. UI общается только с BLL, BLL с DAL, DAL с сервером\r\nimport * as axios from 'axios';\r\n\r\n\r\n// создание отдельного экземпляра axios для работы с конкретной айпишкой, конкретной версией, на разных серверах + уход от повторения некоторых данных\r\nconst instance = axios.create({\r\n  withCredentials: true, // цепляем куку при запросе с локального хоста на домен соц. сети, чтобы сказать, что мы это мы, что мы зарегались уже на домене соц. сети, пустите нас :)\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n  headers: {\r\n    'API-KEY': '9fe42175-1733-4793-9c3f-72022637a8a0' // ключ доступа нужен всем запросам кроме get\r\n  }\r\n});\r\n\r\n\r\n\r\n\r\nexport const usersAPI = {\r\n  getUsers(currentPage = 1, pageSize = 10) {\r\n    return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n      .then(response => response.data)\r\n  },\r\n\r\n  followUser(id) {\r\n    return instance.post(`follow/${id}`, {})\r\n  },\r\n\r\n  unfollowUser(id) {\r\n    return instance.delete(`follow/${id}`)\r\n  },\r\n\r\n  getProfile(id) {\r\n    console.warn('Obsolete method. Please, use profileAPI object.')\r\n    return profileAPI.getProfile(id)\r\n  },\r\n};\r\n\r\n\r\n\r\n\r\nexport const profileAPI = {\r\n  getProfile(id) {\r\n    return instance.get(`profile/${id}`)\r\n  },\r\n  getStatus(id) {\r\n    return instance.get(`profile/status/${id}`)\r\n  },\r\n  updateStatus(status) {\r\n    return instance.put(`profile/status`, { status: status })\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\nexport const authAPI = {\r\n  me() {\r\n    return instance.get(`auth/me`)\r\n  },\r\n  login(email, password, rememberMe = false) {\r\n    return instance.post('/auth/login', { email, password, rememberMe })\r\n  },\r\n  logout() {\r\n    return instance.delete('/auth/login')\r\n  }\r\n};","export default __webpack_public_path__ + \"static/media/logo.cebb0f3e.svg\";","import React from 'react';\r\nimport logo from '../../img/icons/logo.svg';\r\nimport s from './Header.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Header = (props) => {\r\n\r\n  return (\r\n    <header className={s.header}>\r\n      <img src={logo} alt='logo' />\r\n      <div className={s.loginBlock}>\r\n        {props.isAuth\r\n          ? <>\r\n            <span className={s.login_name}>{props.login}</span>\r\n            <button className={s.logout} onClick={props.logoutThunk}>Выйти</button>\r\n          </>\r\n          : <NavLink className={s.login_link} to={'/login'}>Login</NavLink>}\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;","import { authAPI } from '../api/api';\r\nimport { stopSubmit } from 'redux-form';\r\n\r\nconst SET_USER_DATA = 'auth/SET-USER-DATA';\r\n\r\nlet initialState = {\r\n  userID: null,\r\n  email: null,\r\n  login: null,\r\n  isAuth: false,\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case SET_USER_DATA: {\r\n      return {\r\n        ...state,\r\n        ...action.payload, // перезатрёт данные в state\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// это action creators\r\nconst setAuthUserData = (id, email, login, isAuth) => ({\r\n  type: SET_USER_DATA,\r\n  payload: { id, email, login, isAuth }\r\n});\r\n\r\n// это thunks\r\nexport const getAuthUserData = () => async (dispatch) => {\r\n  // return выкинет промис после then наружу в initializeAppThunk\r\n  let response = await authAPI.me();\r\n  \r\n  if (response.data.resultCode === 0) {\r\n    let { id, email, login } = response.data.data;\r\n    // диспатчим тогда наши авторизационные данные\r\n    dispatch(setAuthUserData(id, email, login, true))\r\n  }\r\n}\r\n\r\n\r\nexport const loginThunk = (email, password, rememberMe) => (dispatch) => {\r\n  authAPI.login(email, password, rememberMe)\r\n    .then(response => {\r\n      if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData())\r\n      } else {\r\n        let message = response.data.messages;\r\n        let action = stopSubmit(\r\n          'loginForm',\r\n          { _error: message.length > 0 ? message[0] : 'Some error' }); // stopSubmit - функция от redux-form, loginForm - имя формы из Login, Some error - на всякий случай, если с сервера придёт путое сообщение при ошибке\r\n        dispatch(action);\r\n      }\r\n    })\r\n}\r\n\r\n\r\nexport const logoutThunk = () => (dispatch) => {\r\n  authAPI.logout()\r\n    .then(response => {\r\n      if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false))\r\n      }\r\n    })\r\n}\r\n\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport Header from './Header';\r\nimport { connect } from 'react-redux';\r\nimport { logoutThunk } from '../../redux/auth-reducer';\r\n\r\nclass HeaderContainer extends React.Component {\r\n  render = () => <Header {...this.props} />\r\n}\r\n\r\n// это то, что придёт в контейнерную компоненту HeaderContainer, она прокинет через пропсы в функциональную компоненту Header, которая достанет их из пропсов и использует как-то\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n  }\r\n};\r\nexport default connect(mapStateToProps, {\r\n  logoutThunk\r\n})(HeaderContainer);","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Navbar.module.css';\r\n\r\nconst Navbar = () => {\r\n  return(\r\n    <nav className={s.nav}>\r\n      <NavLink to=\"/profile\" activeClassName={s.active}>Profile</NavLink>\r\n      <NavLink to=\"/dialogs\" activeClassName={s.active}>Messages</NavLink>\r\n      <NavLink to=\"/users\" activeClassName={s.active}>Find Users</NavLink>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar;","import { usersAPI, profileAPI } from '../api/api';\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst SET_USER = 'SET-USER';\r\nconst SET_STATUS = 'SET-STATUS';\r\nconst DELETE_POST = 'DELETE-POST;'\r\n\r\n// если state не придёт в reducer, то initialState будет этим начальным state (как параметр по умолчанию у функции func(a=initialState, b))\r\nlet initialState = {\r\n  posts: [\r\n    { id: '1', message: 'Стена Привет!', likesCount: 12 },\r\n    { id: '2', message: 'Стена Как дела?', likesCount: 4 },\r\n  ],\r\n\r\n  profile: null,\r\n  status: '',\r\n};\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n\r\n    case ADD_POST: {\r\n      let newPost = {\r\n        id: 5,\r\n        message: action.newPostText,\r\n        likesCount: 0,\r\n      };\r\n      return {\r\n        ...state,\r\n        posts: [\r\n          ...state.posts, \r\n          newPost\r\n        ],\r\n      }\r\n    }\r\n\r\n    case SET_USER: {\r\n      return {\r\n        ...state,\r\n        profile: action.profile\r\n      }\r\n    }\r\n\r\n    case SET_STATUS: {\r\n      return {\r\n        ...state,\r\n        status: action.status\r\n      }\r\n    }\r\n\r\n    case DELETE_POST: {\r\n      return {\r\n        ...state,\r\n        posts: state.posts.filter(p => p.id !== action.postID)\r\n      }\r\n    }\r\n\r\n    default:\r\n      return state; \r\n  }\r\n};\r\n\r\n\r\n// action creator\r\nexport const addPost = (newPostText) => ({ type: ADD_POST, newPostText });\r\nexport const deletePost = (postID) => ({ type: DELETE_POST, postID });\r\n\r\nconst setUserProfile = (profile) => ({ type: SET_USER, profile });\r\nconst setStatus = (status) => ({ type: SET_STATUS, status });\r\n\r\n\r\n\r\n\r\n// thunk\r\nexport const getUserProfile = (userId) => {\r\n  return (dispatch) => {\r\n    usersAPI.getProfile(userId)\r\n      .then(response => {\r\n        dispatch(setUserProfile(response.data));\r\n      });\r\n  }\r\n};\r\n\r\nexport const getStatus = (id) => { // получить текущий статус\r\n  return (dispatch) => {\r\n    profileAPI.getStatus(id)\r\n      .then(response => {\r\n        dispatch(setStatus(response.data));\r\n      });\r\n  }\r\n};\r\n\r\nexport const updateStatus = (status) => { // обновить статус на новый\r\n  return (dispatch) => {\r\n    profileAPI.updateStatus(status)\r\n      .then(response => {\r\n        if(response.data.resultCode === 0) {\r\n          dispatch(setStatus(status));\r\n        }\r\n      });\r\n  }\r\n};\r\n\r\nexport default profileReducer;","export default __webpack_public_path__ + \"static/media/avatar_2.e0878a2c.jpg\";","import React from 'react';\r\nimport s from './Post.module.css';\r\nimport avatar from '../../../../img/avatar_2.jpg';\r\n\r\nconst Post = (props) => {\r\n  return(\r\n\r\n    <div className={s.pageWall__newPost}>\r\n      <img src={avatar} alt=\"avatar\"/>\r\n      {props.message}\r\n      {props.likesCount} <button>like</button>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport Post from './Post/Post';\r\nimport s from './Wall.module.css';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator } from '../../../utils/validators/validators';\r\nimport { Element } from '../../common/FormsControls/FormsControls';\r\n\r\nconst Wall = (props) => {\r\n\r\n  let postsElements = props.posts.map(p =>\r\n    <Post key={p.id} message={p.message} likesCount={p.likesCount} />);\r\n\r\n  let handleAddPost = (values) => {\r\n    // values - введённые данные в форме (name='newPostText' см. у Field)\r\n    props.addPost(values.newPostText);\r\n  }\r\n\r\n  return (\r\n    <div className={s.pageWall}>\r\n      <span className={s.pageWall__title}>Стена</span>\r\n      <PostReduxForm onSubmit={handleAddPost} />\r\n      {postsElements}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nconst maxLength30 = maxLengthCreator(30);\r\nconst Textarea = Element(\"textarea\");\r\n\r\nconst AddNewPostForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field\r\n        name='newPostText'\r\n        component={Textarea}\r\n        validate={[maxLength30]}\r\n        placeholder='Write post...'\r\n      />\r\n      <button>Добавить пост</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst PostReduxForm = reduxForm({ form: 'profileNewPostForm' })(AddNewPostForm);\r\n\r\nexport default Wall;","import { connect } from 'react-redux';\r\nimport { addPost } from '../../../redux/profile-reducer';\r\nimport Wall from './Wall';\r\n\r\n// class WallContainer extends React.Component {\r\n\r\n  // componentDidMount() {\r\n    // this.props.getUsersThunkCreator(this.props.currentPage, this.props.pageSize);\r\n  // }\r\n\r\n  // пишем через стрелочную функцию, чтобы сохранить контекст вызова, чтобы не использовать bind\r\n  // onPageChanged = (pageNumber) => {\r\n  //   this.props.getUsersThunkCreator(pageNumber, this.props.pageSize);\r\n  //   this.props.setCurrentPage(pageNumber);\r\n  // }\r\n\r\n//   render() {\r\n//     return <>\r\n//       {this.props.isFetching ? <Preloader /> : null}\r\n\r\n//       <Wall\r\n//         totalUsersCount={this.props.totalUsersCount}\r\n//         pageSize={this.props.pageSize}\r\n//         currentPage={this.props.currentPage}\r\n//         onPageChanged={this.onPageChanged}\r\n//         users={this.props.users}\r\n\r\n//         follow={this.props.follow}\r\n//         unfollow={this.props.unfollow}\r\n//         followingInProgress={this.props.followingInProgress}\r\n//       />\r\n//     </>\r\n//   }\r\n// }\r\n\r\n\r\n// эта функция запускается при каждом изменнеии, создается новый объект и затем сравнивается со старым объектом. если бы мы не делали копию объекта в reducer, то ничего бы не перерисовывалось\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n  }\r\n};\r\n\r\n// перерисовка происходит после обнаружения, что появился новый объект. А он создастся после изменений, т.к. мы придерживаемся иммутабельности и старые объекты не меняем\r\nexport default connect(mapStateToProps, {\r\n  addPost\r\n})(Wall);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ProfileStatus extends React.Component {\r\n\r\n  state = {\r\n    // режима редактирования статуса по умолчанию выключен\r\n    editMode: false,\r\n    status: this.props.status\r\n  }\r\n\r\n  activateEditMode = () => {\r\n    this.setState({\r\n      editMode: true // меняем span на input\r\n    })\r\n\r\n    // this.state.editMode = true +\r\n    // this.forceUpdate() - хак, который перерисует UI, но лучше его избегать\r\n  }\r\n\r\n  deactivateEditMode = () => {\r\n    this.setState({\r\n      editMode: false\r\n    })\r\n    this.props.updateStatus(this.state.status); // синхронизация локального состояния с \"глобальным\" (на сервере)\r\n  }\r\n\r\n  handleFocus = (event) => {\r\n    event.target.select(); // выделяем весь текст при входе в \"режим редактирования\"\r\n  }\r\n\r\n  onStatusChange = (e) => {\r\n    this.setState({ status: e.currentTarget.value }) // меняем локальное состояние\r\n    // this.setState({ status: e.target.value })\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.status !== this.props.status) { // если предыдущий статус (локальный, он равен изначально '' из profileReducerr) !== статусу из пропсов\r\n      this.setState({\r\n        status: this.props.status // то обновить его\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {\r\n          this.state.editMode\r\n            ? <input\r\n              autoFocus\r\n              onFocus={this.handleFocus}\r\n\r\n              onChange={this.onStatusChange}\r\n              onBlur={this.deactivateEditMode}\r\n              \r\n              value={this.state.status} />\r\n            : <span\r\n              onClick={this.activateEditMode}>{this.props.status}</span> // в this.props.status увидим после редактирования статуса с задержкой новый статус, когда он обновится на сервере\r\n        }\r\n      </>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nProfileStatus.propTypes = {\r\n  updateStatus: PropTypes.func.isRequired, // isReauired = функция необходима для работы данного компонента; если не будет передан, то выйдет предупреждение\r\n  // test: PropTypes.arrayOf(PropTypes.object) --> массив из объектов (см. все варианты в файле)\r\n}\r\n\r\nexport default ProfileStatus;","import React from 'react';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport ProfileStatusWithHooks from './ProfileStatus';\r\nimport s from './ProfileInfo.module.css';\r\nimport unknown from '../../../img/no_photo.png';\r\n\r\nconst ProfileInfo = (props) => {\r\n  if (!props.profile) {\r\n    return <Preloader />\r\n  }\r\n\r\n  const photo = props.profile.photos.small;\r\n\r\n  return (\r\n    <div className={`${s.pageInfo__data} ${s.dataRow}`}>\r\n      <img src={photo !== null ? photo : unknown} alt=\"avatar\" />\r\n\r\n      <ProfileStatusWithHooks\r\n        status={props.status}\r\n        updateStatus={props.updateStatus} />\r\n\r\n      <div className={s.about}>\r\n        <p>{props.profile.aboutMe}</p>\r\n        <a href={props.profile.contacts.facebook}>facebook</a>\r\n        <a href={props.profile.contacts.website}>website</a>\r\n        <a href={props.profile.contacts.vk}>vk</a>\r\n        <a href={props.profile.contacts.twitter}>twitter</a>\r\n        <a href={props.profile.contacts.instagram}>instagram</a>\r\n        <a href={props.profile.contacts.youtube}>youtube</a>\r\n        <a href={props.profile.contacts.github}>github</a>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport { getUserProfile, getStatus, updateStatus } from '../../redux/profile-reducer';\r\nimport WallContainer from './Wall/WallContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router';\r\n// import withAuthRedirect from '../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\nclass ProfileContainer extends React.Component {\r\n  componentDidMount() {\r\n    // параметр usetId обозначили в App, работает благодаря withRouter\r\n    let userId = this.props.match.params.userId;\r\n\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserID;\r\n      if (!userId) {\r\n        this.props.history.push('/login')\r\n      }\r\n    }\r\n\r\n    this.props.getUserProfile(userId);\r\n    this.props.getStatus(userId); // (1) получаем статус с сервера при первичной отрисовке, getStatus взят из контекста. Затем перекидываем статус через пропсы (см. (2))\r\n  }\r\n\r\n  render() {\r\n    return <>\r\n      <ProfileInfo\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus} />\r\n      <WallContainer />\r\n    </>\r\n  }\r\n}\r\n\r\n\r\n// пропсы для Profile\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status, // (2) - берём из контекста данные\r\n    authorizedUserID: state.auth.userID,\r\n    isAuth: state.auth.isAuth,\r\n  }\r\n};\r\n\r\n// это HOC, снабжающий редиректом ProfileContainer, т.е. при отсутсвии регистрации у пользователя его будет кидать на страницу login\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer);\r\n// withRouter работает также как и connact - возвращает компоненту, но withRouter прикрутит еще данные из URL\r\n// export default connect(mapStateToProps, {\r\n//   getUserProfile\r\n// })(withRouter(AuthRedirectComponent));\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, { // (3) - берём из импорта функции thunk-и\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n  }),\r\n  withRouter,\r\n  // withAuthRedirect\r\n)(ProfileContainer)","import React from 'react';\r\nimport s from './Login.module.css'\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Element } from '../common/FormsControls/FormsControls';\r\nimport { maxLengthCreator, required } from '../../utils/validators/validators';\r\nimport { connect } from 'react-redux';\r\nimport { loginThunk, logoutThunk } from '../../redux/auth-reducer';\r\nimport { Redirect } from 'react-router';\r\n\r\nconst Login = (props) => {\r\n\r\n  const onSubmit = (formData) => {\r\n    props.loginThunk(formData.email, formData.password, formData.rememberMe)\r\n  }\r\n\r\n  if (props.isAuth) {\r\n    return <Redirect to={`/profile/${props.id}`} />\r\n  }\r\n\r\n  return <>\r\n    <h1>Авторизация</h1>\r\n    <LoginReduxForm onSubmit={onSubmit} logoutThunk={logoutThunk}/>\r\n  </>\r\n}\r\n\r\nconst maxLength30 = maxLengthCreator(30);\r\nconst Input = Element(\"input\");\r\n\r\n// Field передаст через пропсы в input атрибуты\r\nconst LoginForm = ({ handleSubmit, error }) => {\r\n  return <>\r\n    <form onSubmit={handleSubmit}>\r\n      <div className=\"form\">\r\n        <div className={s.row}>\r\n          <label for='email'>Логин</label>\r\n          <Field\r\n            id='email'\r\n            type=\"email\"\r\n            name='email'\r\n            component={Input}\r\n            validate={[required, maxLength30]} />\r\n        </div>\r\n        <div className={s.row}>\r\n          <label for='password'>Пароль</label>\r\n          <Field\r\n            id='password'\r\n            type=\"password\"\r\n            name='password'\r\n            component={Input}\r\n            validate={[required, maxLength30]} />\r\n        </div>\r\n        <div className={s.row}>\r\n          <label for='save'>\r\n            <Field\r\n              id='save'\r\n              type=\"checkbox\"\r\n              name='rememberMe'\r\n              component={Input}\r\n              validate={[]} />\r\n            Запомнить меня\r\n          </label>\r\n        </div>\r\n        <div className={s.row}>\r\n          <button>Войти</button>\r\n          {error && <span className={s.formError}>{error}</span>}\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </>\r\n}\r\n\r\n\r\nconst LoginReduxForm = reduxForm({\r\n  form: 'loginForm' // form никак не связан с form в redux-store\r\n})(LoginForm);\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n  id: state.auth.id,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  loginThunk,\r\n  logoutThunk\r\n})(Login);","import { getAuthUserData } from './auth-reducer';\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\r\n\r\nlet initialState = {\r\n  initialized: false\r\n};\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case INITIALIZED_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        initialized: true\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// это action creators\r\nconst initializedSuccess = () => ({ type: INITIALIZED_SUCCESS });\r\n\r\n// это thunks\r\nexport const initializeAppThunk = () => (dispatch) => {\r\n  // когда все асинх запросы выполняться, задиспатчить initializedSuccess\r\n  Promise.all([\r\n    dispatch(getAuthUserData()),\r\n    // ...\r\n  ]).then(() => {\r\n    dispatch(initializedSuccess())\r\n  })\r\n}\r\n\r\n\r\nexport default appReducer;","import {applyMiddleware, combineReducers, createStore, compose} from 'redux';\r\nimport authReducer from './auth-reducer';\r\nimport messagesReducer from './messages-reducer';\r\nimport profileReducer from './profile-reducer';\r\nimport usersReducer from './users-reducer';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport appReducer from './app-reducer';\r\n\r\n// по сути это сейчас наш state, store. getState, dispatch и subscribe встроены в Redux и называются точно также, поэтому переписывать ничего не надо в index.js и далее\r\nlet reducers = combineReducers({\r\n  profilePage: profileReducer,\r\n  messagesPage: messagesReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  app: appReducer,\r\n  form: formReducer,\r\n});\r\n\r\n// создание store и передача в него reducers\r\n// let store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\n// подключение расширения от браузера гугл Redux devtools\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n// window.store = store;\r\n\r\nexport default store;","import React, { Suspense } from 'react';\r\nimport Preloader from '../common/Preloader/Preloader';\r\n\r\nexport const withSuspense = (Component) => {\r\n  return (props) => {\r\n    return <Suspense fallback={<Preloader />}>\r\n      <Component {...props} />\r\n    </Suspense>\r\n  }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport { Route, withRouter, Switch, Redirect } from 'react-router-dom';\r\nimport ProfileContainer from './components/Profile/ProfileContainer';\r\nimport Login from './components/Login/Login';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { initializeAppThunk } from './redux/app-reducer';\r\nimport Preloader from './components/common/Preloader/Preloader';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport store from './redux/redux-store';\r\nimport { withSuspense } from './components/hoc/withSuspense';\r\n\r\n// import DialogsContainer from './components/Dialogs/DialogsContainer';\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer')); // в конечный bundle эта компонента не попадёт, а подгрузится, если будет надо, при переходе на диалоги\r\n// import UsersContainer from './components/Users/UsersContainer';\r\nconst UsersContainer = React.lazy(() => import('./components/Users/UsersContainer'));\r\n// увеличиваем скорость стартовой загрузки и замедляем затем использование\r\n\r\nclass App extends React.Component {\r\n  componentDidMount() {\r\n    this.props.initializeAppThunk();\r\n  }\r\n  // (2)\r\n\r\n  render() {\r\n    // сначала сработает Preloader, даст время проининциализироваться initializeAppThunk (см. componentDidMount), затем пойдем в JSX\r\n    // (1)\r\n    if (!this.props.initialized) {\r\n      return <Preloader />\r\n    }\r\n\r\n    // (3)\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"app-wrapper\">\r\n          <HeaderContainer />\r\n          <Navbar />\r\n          <div className='app-wrapper-content'>\r\n            <Switch>\r\n\r\n              {/* редирект подставляет в урл свою часть (т.е. перенаправялет на нужную страницу), а роут с таким-то адресом отрисовывает ту компоненту, которая указана в render */}\r\n\r\n              {/* <Route path='/' exact\r\n                     render={() => <ProfileContainer />} /> */}\r\n              <Redirect exact from=\"/\" to=\"/profile\" />\r\n\r\n              <Route path='/dialogs'\r\n                render={withSuspense(DialogsContainer)} />\r\n\r\n                  {/* // return <Suspense fallback={<div>Загрузка...</div>}>\r\n                  //   <DialogsContainer />\r\n                  // </Suspense> */}\r\n                \r\n\r\n              {/* userId - параметр, мы можем его достать благодаря import { withRouter } from 'react-router'; в контейнерной компоненте ProfileContainer, ? - значит что параметр необязательный; текущий URL - это второй источник истины после store*/}\r\n\r\n              <Route path='/profile/:userId?'\r\n                render={() => <ProfileContainer />} />\r\n\r\n              <Route path='/users'\r\n                render={withSuspense(UsersContainer)} />\r\n\r\n              {/* <Route path='/users'\r\n                render={() => {\r\n                  return <Suspense fallback={<div>Загрузка...</div>}>\r\n                    <UsersContainer />\r\n                  </Suspense>\r\n                }} /> */}\r\n\r\n              <Route path='/login'\r\n                render={() => <Login login={this.props.login} />} />\r\n\r\n              {/* <Route exact path='/login' render={() => <Login login={this.props.login} />} /> */}\r\n              {/* exact означает что урл должен быть точь в точь такой, как указан. Если после login что-то еще будет, то Route не сработает. Без exact будет срабатывать и при урл login и при login/что-то еще */}\r\n              {/* или можно Route в Switch: <Switch> <Route ... </Switch>. Он как только находит нужный url просто дальше (ниже) не проверяет и выводит первое, что нашёл */}\r\n\r\n              {/* <Route patch='*' \r\n                     render={() => <div> 404 </div>} /> */}\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  initialized: state.app.initialized,\r\n});\r\n\r\n// compose - функция, которая одним за одним выполняет HOC, оборачивая всё больше и больше нашу презентационную компоненту, наделяя её какой-то функциональностью, данными\r\nlet AppContainer = compose(\r\n  withRouter, // берем инфу из урла\r\n  connect(mapStateToProps, {\r\n    initializeAppThunk\r\n  })\r\n)(App)\r\n\r\nlet SamuraiJSApp = (props) => {\r\n  // провайдер создает контекст; компонента может брать инфу из пропсов, своего состояния и контекста\r\n  // HashRouter добавляет # в url перед путём. Сервер отбрасывает всё, что после #. Для данного случая это то, что надо. Но вообще HashRouter при использовании полноценных серверов (не github) не нужен и бесполезен.\r\n  return (\r\n    <HashRouter basename={process.env.PUBLIC_URL}>\r\n      <Provider store={store}>\r\n        <AppContainer />\r\n      </Provider>\r\n    </HashRouter>\r\n  )\r\n}\r\n\r\nexport default SamuraiJSApp;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom'; // вместо ReactDOM можно использовать React Native и превратить реакт-компоненты и js в java-код для андроида и айфона\r\nimport SamuraiJSApp from './App';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\n// убрали rerenderEntireTree потому что у функции connect усть внутренний свой subscribe\r\n// let rerenderEntireTree = (state) => {\r\n\r\n// Provider - компонента из библиотеки react-redux, использующая context API\r\n// <React.StrictMode> здесь был Provider и App</React.StrictMode> - убрал, т.к. на странице users два раза отрисовывал пользователей (вместо 2х - четыре), сделал на 49-ом уроке\r\nReactDOM.render(<SamuraiJSApp />, document.getElementById('root'));\r\n\r\n// первичная отрисовка страницы\r\n// rerenderEntireTree(store.getState());\r\n\r\n// передали rerenderEntireTree функции в state.js, т.е. создаём callback\r\n// redux при вызове reduсers не передаёт им обновлённый state, поэтому store.subscribe(rerenderEntireTree); заменяем на:\r\n// store.subscribe(() => {\r\n//   let state = store.getState();\r\n//   rerenderEntireTree(state);\r\n// });\r\n\r\nreportWebVitals();","export default __webpack_public_path__ + \"static/media/preloader.4ae1bcf5.svg\";","import React from 'react';\r\nimport preloader from '../../../img/preloader.svg';\r\n\r\nconst Preloader = () => {\r\n  return (\r\n    <img src={preloader} alt='preloader'/>\r\n  )\r\n};\r\n\r\nexport default Preloader;","export const required = value => {\r\n  return value ? undefined : 'Field required'\r\n}\r\n\r\nexport const maxLengthCreator = maxLength => value => {\r\n  return (value && value.length > maxLength) ? `Max length is ${maxLength} symbols` : undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3vTSi\",\"loginBlock\":\"Header_loginBlock__6uxXp\",\"login_name\":\"Header_login_name__wMDmp\",\"logout\":\"Header_logout__1ZICm\",\"login_link\":\"Header_login_link__27bgb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Login_form__2iBfo\",\"row\":\"Login_row__3d41Y\",\"formError\":\"Login_formError__3j1Nj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3R0rh\",\"active\":\"Navbar_active__2b-XZ\"};","import React from 'react';\r\nimport s from './FormsControls.module.css'\r\n\r\nexport const Element = Element => ({ input, meta: { touched, error }, ...props }) => {\r\n  const showError = touched && error;\r\n  return (\r\n    <div className={s.formControl + \" \" + (showError ? s.error : \"\")}>\r\n      <Element {...input} {...props} />\r\n      { showError && <span>{error}</span> }\r\n    </div>\r\n  )\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageInfo__data\":\"ProfileInfo_pageInfo__data__1OoU4\",\"about\":\"ProfileInfo_about__3U-jH\",\"dataRow\":\"ProfileInfo_dataRow__UsqXF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageWall\":\"Wall_pageWall__1-MWp\",\"pageWall__title\":\"Wall_pageWall__title__2QIQW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3IH-n\",\"error\":\"FormsControls_error__3Y1wO\"};"],"sourceRoot":""}