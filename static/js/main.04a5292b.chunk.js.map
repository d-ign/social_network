{"version":3,"sources":["img/no_photo.svg","components/common/hoc/withAuthRedirect.tsx","api/api.ts","api/users-api.ts","redux/reducers/users-reducer.ts","api/chat-api.ts","redux/reducers/chat-reducer.ts","components/Profile/Info/InfoData/InfoData.module.scss","redux/selectors/app-selectors.ts","components/Navbar/Navbar.module.scss","components/Profile/Info/InfoDataForm/InfoDataForm.module.scss","components/Profile/Wall/Post/Post.module.scss","redux/selectors/auth-selectors.ts","api/auth-api.ts","api/security-api.ts","api/profile-api.ts","redux/reducers/auth-reducer.ts","redux/reducers/app-reducer.ts","components/common/hoc/withSuspense.tsx","img/icons/logo.svg","components/Header/Header.tsx","components/Navbar/Navbar.tsx","redux/reducers/profile-reducer.ts","components/common/ElementCustom/renderTextField.jsx","redux/selectors/profile-selectors.ts","components/Profile/Wall/Post/Post.tsx","components/Profile/Wall/Wall.tsx","img/icons/camera.svg","components/Profile/Info/Status/stylesCustomMaterialUI.jsx","components/common/inputCount/inputCount.js","components/Profile/Info/Status/Status.tsx","components/common/ElementCustom/renderCheckbox.jsx","components/Profile/Info/InfoDataForm/InfoDataForm.tsx","components/Profile/Info/InfoData/InfoData.tsx","components/Profile/Info/InfoContainer.tsx","components/Profile/ProfileContainer.tsx","components/Login/Login.tsx","App.tsx","redux/redux-store.ts","index.tsx","components/Header/Header.module.scss","components/Login/Login.module.scss","components/Profile/Info/InfoContainer.module.scss","components/Profile/Info/Status/Status.module.scss","components/Profile/Wall/Wall.module.scss","components/common/Avatar/Avatar.tsx","img/preloaderTheme1.svg","img/preloaderTheme2.svg","components/common/Preloader/Preloader.jsx","components/common/Avatar/Avatar.module.scss","App.module.scss"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","ResultCodesEnum","ResultCodeForCaptcha","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","term","friend","get","response","data","followUser","id","post","unfollowUser","delete","initialState","users","totalUsersCount","isFetching","followingInProgress","actions","followSuccess","userID","type","unfollowSuccess","setUsers","addUsers","setTotalUsersCount","count","clearUsers","toggleIsFetching","toggleFollowingProgress","page","dispatch","getState","a","usersPage","length","items","totalCount","_followUnfollowFlow","apiMethod","actionCreator","resultCode","Success","follow","bind","unfollow","usersReducer","action","map","u","followed","filter","ws","subscribers","notifySubscribersAboutStatus","status","forEach","s","reconnect","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","openHandler","errorHandler","console","error","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","message","send","messages","payload","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","stopMessagesListening","sendMessage","chatReducer","m","v1","item","index","array","module","exports","getInitialized","app","initialized","getTheme","theme","getLogin","login","getIsAuth","getAuthorizedUserID","getCaptchaURL","captchaURL","getMyPhoto","myPhoto","authAPI","me","email","password","rememberMe","captcha","logout","securityAPI","profileAPI","getProfile","getStatus","updateStatus","put","savePhotoAPI","photoFile","formData","FormData","append","saveProfileAPI","profile","photo","getAuthUserDataThunk","Error","stopSubmit","_error","Object","keys","myProfile","photos","large","loginThunk","CaptchaIsRequired","url","logoutThunk","authReducer","appReducer","withSuspense","fallback","Preloader","Header","useSelector","myID","useDispatch","React","useState","themeLocal","setThemeLocal","toggleTheme","useEffect","colors","cyan","cyanLight","cyanMedium","cyanDark","darkBlue","darkBlueTransparent","values","i","document","body","style","setProperty","themeFromLocalStorage","localStorage","getItem","setItem","stringify","className","header","logoAndTitle","src","logo","alt","headerTitleDesctop","hidden","headerTitleMobile","rightColumn","loginAndPhoto","Avatar","size","loginName","buttonThemeDesctop","Button","color","padding","marginRight","onClick","startIcon","buttonThemeMobile","IconButton","aria-label","margin","buttonLogoutDesctop","variant","buttonLogoutMobile","IconProfile","pathname","profileUrl","width","height","viewBox","cn","navLinkImg","activeIcon","d","IconChat","IconFriends","IconUsers","withRouter","location","authorizedUserID","nav","exact","activeClassName","active","navLink","replace","posts","author","idPost","likesCount","isLikeClick","postsForDelete","isSelectedPost","isClickDeleteSelectedPosts","showSuccessSave","errorProfileContacts","isEditModeProfile","isEditInputProfileForm","initializePosts","addPost","newPostText","deletePost","setLikeOnPost","deletetLikeOnPost","setPostForDeleting","deletePostForDeleting","clearPostsForDelete","toggleIsSelectedPost","bool","toggleIsClickDeleteSelectedPosts","setUserProfile","setStatus","savePhotoSuccess","showSuccessSaveProfile","showErrorProfileContacts","setEditModeProfile","setEditInputProfileForm","getUserProfile","userId","profileReducer","newPost","fullName","p","RenderTextField","label","input","placeholder","multiline","inputProps","onInput","onFocus","meta","touched","warning","fullWidth","custom","TextField","profilePage","getStatusSelector","getShowSuccessSave","getErrorProfileContacts","getPosts","getPostsForDelete","getToggleClickDeleteSelectedPosts","getIsSelectedPost","getEditModeProfile","getEditInputProfileForm","Post","handleDeleteOnePost","addIdPostBeforeDeleting","deleteIdPostBeforeDeleting","isClickDeletePost","setIsClickDeletePost","isSelectedPostLocal","setIsSelectedPostLocal","postContainer","postDelete","includes","columnLeft","aria-hidden","avatar","postSelectedTheme1","postSelectedTheme2","unknown","columnCenter","name","columnRight","wrapLike","like","noLike","PostReduxForm","reduxForm","form","handleSubmit","onSubmit","Field","component","renderTextField","maxLength","buttonBig","endIcon","buttonIcon","Wall","arr","postsElements","container","basket","reset","noPosts","useStyles","makeStyles","stylesStatus","minHeight","lineHeight","spacing","backgroundColor","borderRadius","handleFocusCount","target","select","getElementById","textContent","value","elem","display","fontSize","position","right","top","handleBlurCount","handleInputCount","num","wrap","Status","isOwner","classes","editMode","setEditMode","isEditInputStatusForm","setIsEditInputStatusForm","statusLocal","setStatusLocal","ref","statusRef","useRef","handleClickOutside","event","current","contains","Input","autoFocus","onBlur","onChange","currentTarget","buttons","buttonWrap","disabled","plug","noStatus","statusNotMy","RenderCheckbox","FormControlLabel","control","Checkbox","checked","labelPlacement","marginLeft","InfoDataForm","initialValues","handleEditInputProfileForm","titleForm","wrapForCount","countStyle","renderCheckbox","titleAllContacts","contacts","key","contact","titleContact","Contact","memo","contactTitle","contactValue","contactTextWrap","contactText","href","InfoData","containerForm","aboutMe","title","text","job","lookingForAJob","lookingForAJobDescription","some","el","ScrollToTopOnMount","window","scrollTo","InfoContainer","stylesSaveAndCancelButton","containerMain","camera","htmlFor","wrapImg","editPhotoInput","file","files","marginTop","buttonsSaveAndCancelProfile","submit","successSave","saveProfileThunk","ProfileContainer","this","refreshProfile","prevProps","match","params","history","PureComponent","compose","LoginReduxForm","validate","errors","test","loginBlockSubstrate","loginBlock","row","rowCheckbox","fontWeight","formError","marginBottom","Login","ChatContainer","lazy","UsersContainer","SuspendedChat","SuspendedUsers","AppContainer","fon","appWrapper","appWrapperContent","from","path","render","rootReducer","combineReducers","formReducer","chat","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","createMuiTheme","palette","primary","main","secondary","responsiveFontSizes","ReactDOM","ThemeProvider","CssBaseline","children","avatarWrap","medium","small","stylesContainer","left","stylesWrap","justifyContent","preloaderTheme1","preloaderTheme2"],"mappings":"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","file":"static/js/main.04a5292b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/no_photo.8bf0768a.svg\";","import React from 'react'\nimport { Redirect } from 'react-router'\nimport { connect } from 'react-redux'\nimport { AppStateType } from '../../../redux/redux-store'\n\nconst mapStateToPropsForRedirect = (state: AppStateType) => ({\n  isAuth: state.auth.isAuth,\n})\n\ntype MapStatePropsType = {\n  isAuth: boolean\n}\n\n// WCP - пропсы WrappedComponent\nexport default function withAuthRedirect<WCP>(\n  WrappedComponent: React.ComponentType<WCP>\n) {\n  const RedirectComponent: React.FC<MapStatePropsType & unknown> = (props) => {\n    const { isAuth, ...restProps } = props\n    if (!isAuth) return <Redirect to='/login' />\n    return <WrappedComponent {...(restProps as WCP)} />\n  }\n\n  return connect<MapStatePropsType, never, WCP, AppStateType>(\n    mapStateToPropsForRedirect\n  )(RedirectComponent)\n}\n","import axios from 'axios'\n\nexport const instance = axios.create({\n  withCredentials: true, // цепляем cookie к запросу\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n  headers: {\n    'API-KEY': 'ddfbc45b-6923-498e-99d5-3a4897cbb31f',\n  },\n})\n\nexport enum ResultCodesEnum {\n  Success = 0,\n  Error = 1,\n}\n\nexport enum ResultCodeForCaptcha {\n  CaptchaIsRequired = 10,\n}\n\nexport type DefaultResponseType<D = never, RC = ResultCodesEnum> = {\n  data: D\n  resultCode: RC\n  messages: Array<string> | string\n}\n","import { UserType } from '../types/types'\nimport { DefaultResponseType, instance } from './api'\n\ntype GetUsersType = {\n  items: Array<UserType>\n  totalCount: number\n  error: string\n}\n\nconst usersAPI = {\n  async getUsers(\n    currentPage = 1,\n    pageSize: number,\n    term?: string,\n    friend?: boolean\n  ) {\n    const response = await instance.get<GetUsersType>(\n      `users?page=${currentPage}&count=${pageSize}&term=${term}&friend=${friend}`\n    )\n    return response.data\n  },\n  async followUser(id: number) {\n    const response = await instance.post<DefaultResponseType>(\n      `follow/${id}`,\n      {}\n    )\n    return response.data\n  },\n  async unfollowUser(id: number) {\n    const response = await instance.delete<DefaultResponseType>(`follow/${id}`)\n    return response.data\n  },\n}\n\nexport default usersAPI\n","import { Dispatch } from 'redux'\nimport { DefaultResponseType, ResultCodesEnum } from '../../api/api'\nimport usersAPI from '../../api/users-api'\nimport { UserType } from '../../types/types'\nimport { BaseThunkType, InferActionsTypes } from '../redux-store'\n\nconst initialState = {\n  users: [] as Array<UserType>,\n\n  pageSize: 10,\n  totalUsersCount: 0,\n\n  isFetching: true,\n  // disabling the button after pressing\n  followingInProgress: [] as Array<number>, // array of users ID\n}\n\nconst usersReducer = (\n  state = initialState,\n  action: ActionsTypes\n): InitialStateType => {\n  switch (action.type) {\n    case 'FOLLOW': {\n      return {\n        ...state,\n        users: state.users.map((u) => {\n          if (u.id === action.userID) {\n            return { ...u, followed: true }\n          }\n          return u\n        }),\n      }\n    }\n    case 'UNFOLLOW': {\n      return {\n        ...state,\n        users: state.users.map((u) => {\n          if (u.id === action.userID) {\n            return { ...u, followed: false }\n          }\n          return u\n        }),\n      }\n    }\n    case 'SET_USERS': {\n      return {\n        ...state,\n        users: [...action.users],\n      }\n    }\n    case 'ADD_USERS': {\n      return {\n        ...state,\n        users: [...state.users, ...action.users],\n      }\n    }\n    case 'CLEAR_USERS': {\n      return {\n        ...state,\n        users: [],\n      }\n    }\n    case 'SET_TOTAL_USERS_COUNT': {\n      return {\n        ...state,\n        totalUsersCount: action.count,\n      }\n    }\n    case 'TOGGLE_IS_FETCHING': {\n      return {\n        ...state,\n        isFetching: action.isFetching,\n      }\n    }\n    case 'TOGGLE_IS_FOLLOWING_PROGRESS': {\n      return {\n        ...state,\n        followingInProgress: action.isFetching\n          ? [...state.followingInProgress, action.userID]\n          : state.followingInProgress.filter((id) => id !== action.userID),\n      }\n    }\n    default:\n      return state\n  }\n}\n\nexport const actions = {\n  followSuccess: (userID: number) => ({ type: 'FOLLOW', userID } as const),\n  unfollowSuccess: (userID: number) => ({ type: 'UNFOLLOW', userID } as const),\n\n  setUsers: (users: Array<UserType>) => ({ type: 'SET_USERS', users } as const),\n  addUsers: (users: Array<UserType>) => ({ type: 'ADD_USERS', users } as const),\n  setTotalUsersCount: (totalUsersCount: number) =>\n    ({\n      type: 'SET_TOTAL_USERS_COUNT',\n      count: totalUsersCount,\n    } as const),\n  clearUsers: () => ({ type: 'CLEAR_USERS' } as const),\n\n  toggleIsFetching: (isFetching: boolean) =>\n    ({ type: 'TOGGLE_IS_FETCHING', isFetching } as const),\n  toggleFollowingProgress: (isFetching: boolean, userID: number) =>\n    ({\n      type: 'TOGGLE_IS_FOLLOWING_PROGRESS',\n      isFetching,\n      userID,\n    } as const),\n}\n\nexport const getUsers =\n  (page: number, term: string, friend?: boolean): ThunkType =>\n  async (dispatch, getState) => {\n    dispatch(actions.toggleIsFetching(true))\n\n    const response = await usersAPI.getUsers(\n      page,\n      getState().usersPage.pageSize,\n      term,\n      friend\n    )\n\n    // первичная загрузка\n    if (term.length === 0 && page === 1) {\n      dispatch(actions.setUsers(response.items))\n    }\n    // получение больше пользователей\n    if (page > 1) {\n      dispatch(actions.addUsers(response.items))\n    }\n    // первичный поиск\n    if (term.length > 0 && page === 1) {\n      dispatch(actions.clearUsers())\n      dispatch(actions.setUsers(response.items))\n    }\n\n    dispatch(actions.setTotalUsersCount(response.totalCount))\n    dispatch(actions.toggleIsFetching(false))\n  }\n\ntype DispatchType = Dispatch<ActionsTypes>\nconst _followUnfollowFlow = async (\n  dispatch: DispatchType,\n  id: number,\n  apiMethod: (id: number) => Promise<DefaultResponseType>,\n  actionCreator: (id: number) => ActionsTypes\n) => {\n  dispatch(actions.toggleFollowingProgress(true, id))\n  const response = await apiMethod(id)\n\n  if (response.resultCode === ResultCodesEnum.Success) {\n    dispatch(actionCreator(id))\n  }\n  dispatch(actions.toggleFollowingProgress(false, id))\n}\n\nexport const follow =\n  (id: number): ThunkType =>\n  async (dispatch) => {\n    await _followUnfollowFlow(\n      dispatch,\n      id,\n      usersAPI.followUser.bind(usersAPI),\n      actions.followSuccess\n    )\n  }\n\nexport const unfollow =\n  (id: number): ThunkType =>\n  async (dispatch) => {\n    await _followUnfollowFlow(\n      dispatch,\n      id,\n      usersAPI.unfollowUser.bind(usersAPI),\n      actions.unfollowSuccess\n    )\n  }\n\nexport default usersReducer\n\nexport type InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>\n","let ws: WebSocket | null = null\n\nlet subscribers = {\n  'messages-received': [] as Array<MessagesReceivedSubscriberType>,\n  'status-changed': [] as Array<StatusChangedSubscriberType>,\n}\n\ntype EventsCustomNamesType = 'messages-received' | 'status-changed'\n\nconst notifySubscribersAboutStatus = (status: StatusType) => {\n  if (subscribers) {\n    subscribers['status-changed'].forEach((s) => s(status))\n  }\n}\n\nconst reconnect = () => {\n  notifySubscribersAboutStatus('pending')\n  setTimeout(createChannel, 3000)\n}\n\nconst messageHandler = (e: MessageEvent) => {\n  const newMessages = JSON.parse(e.data)\n  if (subscribers) {\n    subscribers['messages-received'].forEach((s) => s(newMessages))\n  }\n}\n\nconst openHandler = () => {\n  notifySubscribersAboutStatus('ready')\n}\n\nconst errorHandler = () => {\n  notifySubscribersAboutStatus('error')\n  // eslint-disable-next-line no-console\n  console.error('REFRESH PAGE')\n}\n\nconst cleanUp = () => {\n  ws?.removeEventListener('close', reconnect)\n  ws?.removeEventListener('message', messageHandler)\n  ws?.removeEventListener('open', openHandler)\n  ws?.removeEventListener('error', errorHandler)\n}\n\nfunction createChannel() {\n  cleanUp()\n  ws?.close()\n\n  ws = new WebSocket(\n    'wss://social-network.samuraijs.com/handlers/ChatHandler.ashx'\n  )\n\n  notifySubscribersAboutStatus('pending')\n\n  ws.addEventListener('close', reconnect)\n  ws.addEventListener('message', messageHandler)\n  ws.addEventListener('open', openHandler)\n  ws.addEventListener('error', errorHandler)\n}\n\nexport const chatAPI = {\n  start() {\n    createChannel()\n  },\n  stop() {\n    if (subscribers) {\n      subscribers['messages-received'] = []\n      subscribers['status-changed'] = []\n    }\n    cleanUp()\n    ws?.close()\n  },\n  subscribe(\n    eventName: EventsCustomNamesType,\n    callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType\n  ) {\n    if (subscribers) {\n      // @ts-ignore\n      subscribers[eventName].push(callback)\n    }\n  },\n\n  // отписка (забираем возможность api уведомлять store)\n  unsubscribe(\n    eventName: EventsCustomNamesType,\n    callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType\n  ) {\n    if (subscribers) {\n      // @ts-ignore\n      subscribers = subscribers[eventName]?.filter((s) => s !== callback)\n      // оставляем всех, кроме callback\n    }\n  },\n\n  sendMessage(message: string) {\n    ws?.send(message)\n  },\n}\n\nexport type ChatMessageAPIType = {\n  message: string\n  photo: string\n  userId: number\n  userName: string\n}\n\nexport type StatusType = 'pending' | 'ready' | 'error'\n\ntype MessagesReceivedSubscriberType = (\n  messages: Array<ChatMessageAPIType>\n) => void\n\ntype StatusChangedSubscriberType = (status: StatusType) => void\n","import { FormAction } from 'redux-form'\nimport { Dispatch } from 'redux'\nimport { v1 } from 'uuid'\nimport { BaseThunkType, InferActionsTypes } from '../redux-store'\nimport { chatAPI, ChatMessageAPIType, StatusType } from '../../api/chat-api'\n\nexport type ChatMessageType = ChatMessageAPIType & { id: string }\n\nconst initialState = {\n  messages: [] as ChatMessageType[],\n  status: 'pending' as StatusType,\n}\n\nconst chatReducer = (\n  state = initialState,\n  action: ActionsTypes\n): InitialStateType => {\n  switch (action.type) {\n    case 'MESSAGES_RECEIVED': {\n      return {\n        ...state,\n        messages: [\n          ...state.messages,\n          ...action.payload.messages.map((m) => ({ ...m, id: v1() })),\n        ].filter((item, index, array) => index >= array.length - 100),\n        // TODO v1() - вызов не чистой функции\n      }\n    }\n    case 'STATUS_CHANGED': {\n      return {\n        ...state,\n        status: action.payload.status,\n      }\n    }\n    default:\n      return state\n  }\n}\n\nconst actions = {\n  messagesReceived: (messages: ChatMessageAPIType[]) =>\n    ({\n      type: 'MESSAGES_RECEIVED',\n      payload: { messages },\n    } as const),\n  statusChanged: (status: StatusType) =>\n    ({\n      type: 'STATUS_CHANGED',\n      payload: { status },\n    } as const),\n}\n\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\n  // чтобы два раза не вызывалась одна и та же функция,\n  // сначала при подписке, потом при отписке\n  if (_newMessageHandler === null) {\n    _newMessageHandler = (messages) => {\n      dispatch(actions.messagesReceived(messages))\n    }\n  }\n  return _newMessageHandler\n}\n\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\n  // чтобы два раза не вызывалась одна и та же функция,\n  // сначала при подписке, потом при отписке\n  if (_statusChangedHandler === null) {\n    _statusChangedHandler = (status) => {\n      dispatch(actions.statusChanged(status))\n    }\n  }\n  return _statusChangedHandler\n}\n\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\n  chatAPI.start()\n  chatAPI.subscribe('messages-received', newMessageHandlerCreator(dispatch))\n  chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\n}\n\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\n  chatAPI.unsubscribe('messages-received', newMessageHandlerCreator(dispatch))\n  chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch))\n  chatAPI.stop()\n}\n\nexport const sendMessage = (message: string): ThunkType => {\n  return async () => {\n    chatAPI.sendMessage(message)\n  }\n}\n\nexport default chatReducer\n\ntype InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerForm\":\"InfoData_containerForm__4u5ww\",\"wrap\":\"InfoData_wrap__2PdAB\",\"aboutMe\":\"InfoData_aboutMe__1mAal\",\"job\":\"InfoData_job__3P8SV\",\"contacts\":\"InfoData_contacts__23mm2\",\"title\":\"InfoData_title__iejTT\",\"text\":\"InfoData_text__3UZdr\",\"contact\":\"InfoData_contact__1qGtW\",\"contactTitle\":\"InfoData_contactTitle__1ewog\",\"contactTextWrap\":\"InfoData_contactTextWrap__2_ZWp\",\"contactText\":\"InfoData_contactText__wM_du\"};","import { AppStateType } from '../redux-store'\n\nexport const getInitialized = (state: AppStateType) => state.app.initialized\n\nexport const getTheme = (state: AppStateType) => state.app.theme\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__27m-F\",\"navLink\":\"Navbar_navLink__1Hvqf\",\"navLinkImg\":\"Navbar_navLinkImg__1h1CV\",\"active\":\"Navbar_active__10_7D\",\"activeIcon\":\"Navbar_activeIcon__kRwHU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"InfoDataForm_form__14vyY\",\"titleForm\":\"InfoDataForm_titleForm__184eL\",\"wrap\":\"InfoDataForm_wrap__15fpP\",\"contact\":\"InfoDataForm_contact__1TXbJ\",\"titleAllContacts\":\"InfoDataForm_titleAllContacts__1H2gR\",\"titleContact\":\"InfoDataForm_titleContact__JPxik\",\"countStyle\":\"InfoDataForm_countStyle__rFGFZ\",\"wrapForCount\":\"InfoDataForm_wrapForCount__mwZRA\",\"errorProfileContacts\":\"InfoDataForm_errorProfileContacts__mM_VA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postContainer\":\"Post_postContainer__10ly9\",\"post\":\"Post_post__2ijsE\",\"postDelete\":\"Post_postDelete__1zb6x\",\"holeOut\":\"Post_holeOut__OBFMR\",\"columnLeft\":\"Post_columnLeft__1-P3G\",\"avatar\":\"Post_avatar__f8b4a\",\"postSelectedTheme1\":\"Post_postSelectedTheme1__wJgh8\",\"postSelectedTheme2\":\"Post_postSelectedTheme2__3Jl1F\",\"columnCenter\":\"Post_columnCenter__3f7A1\",\"name\":\"Post_name__Gp3iW\",\"message\":\"Post_message__tEL5H\",\"columnRight\":\"Post_columnRight__2b-zX\",\"wrapLike\":\"Post_wrapLike__2FL8E\",\"likesCount\":\"Post_likesCount__1-MqZ\",\"like\":\"Post_like__3m_KI\",\"noLike\":\"Post_noLike__33n8X\"};","import { AppStateType } from '../redux-store'\n\nexport const getLogin = (state: AppStateType) => state.auth.login\n\nexport const getIsAuth = (state: AppStateType) => state.auth.isAuth\n\nexport const getAuthorizedUserID = (state: AppStateType) => state.auth.userID\n\nexport const getCaptchaURL = (state: AppStateType) => state.auth.captchaURL\n\nexport const getMyPhoto = (state: AppStateType) => state.auth.myPhoto\n","import {\n  DefaultResponseType,\n  instance,\n  ResultCodeForCaptcha,\n  ResultCodesEnum,\n} from './api'\n\ntype MeDataType = {\n  id: number\n  email: string\n  login: string\n}\n\nconst authAPI = {\n  async me() {\n    const response = await instance.get<DefaultResponseType<MeDataType>>(\n      'auth/me'\n    )\n    return response.data\n  },\n  async login(\n    email: string,\n    password: string,\n    rememberMe = false,\n    captcha: null | string = null\n  ) {\n    const response = await instance.post<\n      DefaultResponseType<\n        { userId: number },\n        ResultCodesEnum | ResultCodeForCaptcha\n      >\n    >('/auth/login', {\n      email,\n      password,\n      rememberMe,\n      captcha,\n    })\n    return response.data\n  },\n  async logout() {\n    const response = await instance.delete<DefaultResponseType>('/auth/login')\n    return response.data\n  },\n}\n\nexport default authAPI\n","import { instance } from './api'\n\ntype GetCaptchaResponseType = {\n  url: string\n}\n\nconst securityAPI = {\n  async getCaptchaURL() {\n    const response = await instance.get<GetCaptchaResponseType>(\n      'security/get-captcha-url'\n    )\n    return response.data\n  },\n}\n\nexport default securityAPI\n","import { PhotosType, ProfileType } from '../types/types'\nimport { DefaultResponseType, instance } from './api'\n\ntype SavePhotoDataType = {\n  photos: PhotosType\n}\n\nconst profileAPI = {\n  async getProfile(id: number | null) {\n    const response = await instance.get<ProfileType>(`profile/${id}`)\n    return response.data\n  },\n\n  async getStatus(id: number) {\n    const response = await instance.get<string>(`profile/status/${id}`)\n    return response.data\n  },\n\n  async updateStatus(status: string) {\n    const response = await instance.put<DefaultResponseType>('profile/status', {\n      status,\n    })\n    return response.data\n  },\n\n  async savePhotoAPI(photoFile: File) {\n    const formData = new FormData()\n    formData.append('image', photoFile)\n    const response = await instance.put<DefaultResponseType<SavePhotoDataType>>(\n      'profile/photo',\n      formData,\n      {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      }\n    )\n    return response.data\n  },\n\n  async saveProfileAPI(profile: ProfileType) {\n    const response = await instance.put<DefaultResponseType>('profile', profile)\n    return response.data\n  },\n}\n\nexport default profileAPI\n","import { FormAction, stopSubmit } from 'redux-form'\nimport { ResultCodesEnum, ResultCodeForCaptcha } from '../../api/api'\nimport authAPI from '../../api/auth-api'\nimport securityAPI from '../../api/security-api'\n\nimport { BaseThunkType, InferActionsTypes } from '../redux-store'\nimport profileAPI from '../../api/profile-api'\n\nconst initialState = {\n  userID: null as number | null,\n  email: null as string | null,\n  login: null as string | null,\n  isAuth: false,\n  captchaURL: null as string | null,\n  myPhoto: null as string | null,\n}\n\nconst authReducer = (\n  state = initialState,\n  action: ActionsTypes\n): InitialStateType => {\n  switch (action.type) {\n    case 'SET_USER_DATA':\n    case 'GET_CAPTCHA_URL_SUCCESS': {\n      return {\n        ...state,\n        ...action.payload,\n      }\n    }\n    case 'SET_MY_PHOTO': {\n      return {\n        ...state,\n        // @ts-ignore\n        myPhoto: action.payload.photo,\n      }\n    }\n    default:\n      return state\n  }\n}\n\nconst actions = {\n  setAuthUserData: (\n    userID: number | null,\n    email: string | null,\n    login: string | null,\n    isAuth: boolean\n  ) => ({\n    type: 'SET_USER_DATA',\n    payload: {\n      userID,\n      email,\n      login,\n      isAuth,\n    } as const,\n  }),\n\n  setCaptcha: (captchaURL: string | null) => ({\n    type: 'GET_CAPTCHA_URL_SUCCESS',\n    payload: { captchaURL } as const,\n  }),\n\n  setMyPhoto: (photo: string | null) => ({\n    type: 'SET_MY_PHOTO',\n    payload: { photo } as const,\n  }),\n}\n\nexport const getAuthUserDataThunk = (): ThunkType => async (dispatch) => {\n  const response = await authAPI.me()\n\n  if (response.resultCode === ResultCodesEnum.Success) {\n    const { id, email, login } = response.data\n    dispatch(actions.setAuthUserData(id, email, login, true))\n  }\n\n  if (response.resultCode === ResultCodesEnum.Error) {\n    const message = response.messages\n    const action = stopSubmit('loginForm', {\n      _error: message.length > 0 ? message[0] : 'Some error',\n    })\n    // Some error - на всякий случай, если с сервера придёт пустое сообщение\n    // при ошибке\n    dispatch(action)\n  }\n\n  if (Object.keys(response.data).length !== 0) {\n    const myProfile = await profileAPI.getProfile(response.data.id)\n    dispatch(actions.setMyPhoto(myProfile.photos.large))\n  }\n}\n\nconst setCaptchaThunk = (): ThunkType => async (dispatch) => {\n  const response = await securityAPI.getCaptchaURL()\n  const captcha = response.url\n  dispatch(actions.setCaptcha(captcha))\n}\n\nexport const loginThunk =\n  (\n    email: string,\n    password: string,\n    rememberMe: boolean,\n    captcha: string | null\n  ): ThunkType =>\n  async (dispatch) => {\n    const response = await authAPI.login(email, password, rememberMe, captcha)\n\n    if (response.resultCode === ResultCodesEnum.Success) {\n      dispatch(getAuthUserDataThunk())\n      dispatch(actions.setCaptcha(null))\n    }\n\n    if (response.resultCode === ResultCodesEnum.Error) {\n      const message = response.messages\n      const action = stopSubmit('loginForm', {\n        _error: message.length > 0 ? message[0] : 'Some error',\n      })\n      // Some error - на всякий случай, если с сервера придёт пустое сообщение\n      // при ошибке\n      dispatch(action)\n    }\n\n    if (response.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\n      dispatch(setCaptchaThunk())\n    }\n  }\n\nexport const logoutThunk = (): ThunkType => async (dispatch) => {\n  const response = await authAPI.logout()\n\n  if (response.resultCode === ResultCodesEnum.Success) {\n    dispatch(actions.setAuthUserData(null, null, null, false))\n    dispatch(actions.setMyPhoto(null))\n  }\n}\n\nexport default authReducer\n\ntype InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>\n","import { BaseThunkType, InferActionsTypes } from '../redux-store'\nimport { getAuthUserDataThunk } from './auth-reducer'\n\ntype themeType = 'theme1' | 'theme2'\n\nconst initialState = {\n  initialized: false,\n  theme: 'theme1',\n}\n\nconst appReducer = (\n  state = initialState,\n  action: ActionsTypes\n): InitialStateType => {\n  switch (action.type) {\n    case 'INITIALIZED_SUCCESS': {\n      return {\n        ...state,\n        initialized: true,\n      }\n    }\n    case 'TOGGLE_THEME': {\n      return {\n        ...state,\n        theme: action.theme,\n      }\n    }\n    default:\n      return state\n  }\n}\n\nexport const actions = {\n  initializedSuccess: () => ({ type: 'INITIALIZED_SUCCESS' } as const),\n  setTheme: (theme: themeType) => ({ type: 'TOGGLE_THEME', theme } as const),\n}\n\nexport const initializeAppThunk = (): ThunkType => async (dispatch) => {\n  await dispatch(getAuthUserDataThunk())\n  dispatch(actions.initializedSuccess())\n}\n\nexport default appReducer\n\ntype InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>\n","import React, { Suspense } from 'react'\nimport Preloader from '../Preloader/Preloader.jsx'\n\nfunction withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\n  return (props: WCP) => (\n    <Suspense fallback={<Preloader />}>\n      <WrappedComponent {...props} />\n    </Suspense>\n  )\n}\nexport default withSuspense\n","export default __webpack_public_path__ + \"static/media/logo.cebb0f3e.svg\";","import React from 'react'\nimport { NavLink, Redirect } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport Button from '@material-ui/core/Button'\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp'\nimport InvertColorsIcon from '@material-ui/icons/InvertColors'\nimport { IconButton } from '@material-ui/core'\nimport s from './Header.module.scss'\nimport logo from '../../img/icons/logo.svg'\nimport Avatar from '../common/Avatar/Avatar'\n\nimport {\n  getAuthorizedUserID,\n  getIsAuth,\n  getLogin,\n  getMyPhoto,\n} from '../../redux/selectors/auth-selectors'\nimport { getTheme } from '../../redux/selectors/app-selectors'\nimport { logoutThunk } from '../../redux/reducers/auth-reducer'\nimport { actions } from '../../redux/reducers/app-reducer'\n\nconst Header: React.FC = () => {\n  const isAuth = useSelector(getIsAuth)\n  const login = useSelector(getLogin)\n  const myID = useSelector(getAuthorizedUserID)\n  const myPhoto = useSelector(getMyPhoto)\n  const theme = useSelector(getTheme)\n  const dispatch = useDispatch()\n\n  const [themeLocal, setThemeLocal] = React.useState(theme)\n\n  const toggleTheme = () => {\n    dispatch(actions.setTheme(themeLocal === 'theme1' ? 'theme2' : 'theme1'))\n    setThemeLocal(themeLocal === 'theme1' ? 'theme2' : 'theme1')\n  }\n\n  React.useEffect(() => {\n    const colors = {\n      cyan: `var(--color-cyan-${themeLocal})`,\n      cyanLight: `var(--color-cyanLight-${themeLocal})`,\n      cyanMedium: `var(--color-cyanMedium-${themeLocal})`,\n      cyanDark: `var(--color-cyanDark-${themeLocal})`,\n      darkBlue: `var(--color-darkBlue-${themeLocal})`,\n      darkBlueTransparent: `var(--color-darkBlueTransparent-${themeLocal})`,\n    }\n\n    const keys = Object.keys(colors)\n    const values = Object.values(colors)\n\n    for (let i = 0; i < keys.length; i++) {\n      document.body.style.setProperty(`--color-${keys[i]}`, values[i])\n    }\n  }, [theme, themeLocal])\n\n  // чтение и применение темы из Local Storage\n  React.useEffect(() => {\n    // @ts-ignore\n    const themeFromLocalStorage = JSON.parse(localStorage.getItem('theme'))\n\n    if (themeFromLocalStorage) {\n      dispatch(actions.setTheme(themeFromLocalStorage))\n      setThemeLocal(themeFromLocalStorage)\n    }\n  }, [dispatch])\n\n  // запись темы в Local Storage\n  React.useEffect(() => {\n    localStorage.setItem('theme', JSON.stringify(theme))\n  }, [theme])\n\n  return (\n    <header className={s.header}>\n      <NavLink className={s.logoAndTitle} to='/profile'>\n        <img src={logo} alt='logo' />\n        <span className={s.headerTitleDesctop}>Social network</span>\n        <span hidden className={s.headerTitleMobile}>\n          SN\n        </span>\n      </NavLink>\n\n      <div className={s.rightColumn}>\n        {isAuth ? (\n          <>\n            <NavLink className={s.loginAndPhoto} to={`/profile/${myID}`}>\n              <Avatar photo={myPhoto} size='small' />\n              <span className={s.loginName}>{login}</span>\n            </NavLink>\n\n            <span className={s.buttonThemeDesctop}>\n              <Button\n                color={theme === 'theme1' ? 'primary' : 'secondary'}\n                style={{ padding: '6px 12px', marginRight: '12px' }}\n                onClick={toggleTheme}\n                startIcon={<InvertColorsIcon />}\n              >\n                Change theme\n              </Button>\n            </span>\n            <span hidden className={s.buttonThemeMobile}>\n              <IconButton\n                onClick={toggleTheme}\n                aria-label='changeTheme'\n                type='submit'\n                style={{ margin: '0 12px' }}\n              >\n                <InvertColorsIcon\n                  color={theme === 'theme1' ? 'primary' : 'secondary'}\n                />\n              </IconButton>\n            </span>\n\n            <span className={s.buttonLogoutDesctop}>\n              <Button\n                onClick={() => dispatch(logoutThunk())}\n                variant='outlined'\n                style={{ marginRight: '12px' }}\n                startIcon={<ExitToAppIcon />}\n              >\n                Log out\n              </Button>\n            </span>\n            <span hidden className={s.buttonLogoutMobile}>\n              <IconButton\n                onClick={() => dispatch(logoutThunk())}\n                aria-label='logout'\n                type='submit'\n              >\n                <ExitToAppIcon />\n              </IconButton>\n            </span>\n          </>\n        ) : (\n          <Redirect to='/login' />\n        )}\n      </div>\n    </header>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { NavLink, RouteComponentProps, withRouter } from 'react-router-dom'\n\nimport cn from 'classnames'\nimport s from './Navbar.module.scss'\nimport { getAuthorizedUserID } from '../../redux/selectors/auth-selectors'\n\ntype PathParamsType = {\n  pathname: string\n  profileUrl?: string\n}\n\nconst Navbar: React.FC<RouteComponentProps<PathParamsType>> = ({\n  location: { pathname },\n}) => {\n  const authorizedUserID = useSelector(getAuthorizedUserID)\n  const profileUrl = `/profile/${authorizedUserID}`\n\n  return (\n    <nav className={s.nav} id='navbar'>\n      <NavLink\n        exact\n        to={profileUrl}\n        activeClassName={s.active}\n        className={s.navLink}\n        replace\n      >\n        <IconProfile pathname={pathname} profileUrl={profileUrl} />\n        Profile\n      </NavLink>\n\n      <NavLink\n        to='/chat'\n        activeClassName={s.active}\n        className={s.navLink}\n        replace\n      >\n        <IconChat pathname={pathname} />\n        Chat\n      </NavLink>\n\n      <NavLink\n        to='/friends'\n        activeClassName={s.active}\n        className={s.navLink}\n        replace\n      >\n        <IconFriends pathname={pathname} />\n        Friends\n      </NavLink>\n\n      <NavLink\n        to='/users'\n        activeClassName={s.active}\n        className={s.navLink}\n        replace\n      >\n        <IconUsers pathname={pathname} />\n        Find Users\n      </NavLink>\n    </nav>\n  )\n}\n\nconst IconProfile: React.FC<PathParamsType> = ({ pathname, profileUrl }) => {\n  return (\n    <svg\n      width='24'\n      height='24'\n      viewBox='0 0 24 24'\n      className={cn(s.navLinkImg, {\n        [s.activeIcon]: pathname === profileUrl,\n      })}\n    >\n      {/* eslint-disable-next-line max-len */}\n      <path d='M12,4A4,4 0 0,1 16,8A4,4 0 0,1 12,12A4,4 0 0,1 8,8A4,4 0 0,1 12,4M12,14C16.42,14 20,15.79 20,18V20H4V18C4,15.79 7.58,14 12,14Z' />\n    </svg>\n  )\n}\n\nconst IconChat: React.FC<PathParamsType> = ({ pathname }) => {\n  return (\n    <svg\n      width='24'\n      height='24'\n      viewBox='0 0 24 24'\n      className={cn(s.navLinkImg, {\n        [s.activeIcon]: pathname === '/chat',\n      })}\n    >\n      {/* eslint-disable-next-line max-len */}\n      <path d='M20,2H4A2,2 0 0,0 2,4V22L6,18H20A2,2 0 0,0 22,16V4C22,2.89 21.1,2 20,2Z' />\n    </svg>\n  )\n}\n\nconst IconFriends: React.FC<PathParamsType> = ({ pathname }) => {\n  return (\n    <svg\n      width='24'\n      height='24'\n      viewBox='0 0 24 24'\n      className={cn(s.navLinkImg, {\n        [s.activeIcon]: pathname === '/friends',\n      })}\n    >\n      {/* eslint-disable-next-line max-len */}\n      <path d='M12,5.5A3.5,3.5 0 0,1 15.5,9A3.5,3.5 0 0,1 12,12.5A3.5,3.5 0 0,1 8.5,9A3.5,3.5 0 0,1 12,5.5M5,8C5.56,8 6.08,8.15 6.53,8.42C6.38,9.85 6.8,11.27 7.66,12.38C7.16,13.34 6.16,14 5,14A3,3 0 0,1 2,11A3,3 0 0,1 5,8M19,8A3,3 0 0,1 22,11A3,3 0 0,1 19,14C17.84,14 16.84,13.34 16.34,12.38C17.2,11.27 17.62,9.85 17.47,8.42C17.92,8.15 18.44,8 19,8M5.5,18.25C5.5,16.18 8.41,14.5 12,14.5C15.59,14.5 18.5,16.18 18.5,18.25V20H5.5V18.25M0,20V18.5C0,17.11 1.89,15.94 4.45,15.6C3.86,16.28 3.5,17.22 3.5,18.25V20H0M24,20H20.5V18.25C20.5,17.22 20.14,16.28 19.55,15.6C22.11,15.94 24,17.11 24,18.5V20Z' />\n    </svg>\n  )\n}\n\nconst IconUsers: React.FC<PathParamsType> = ({ pathname }) => {\n  return (\n    <svg\n      width='24'\n      height='24'\n      viewBox='0 0 24 24'\n      className={cn(s.navLinkImg, {\n        [s.activeIcon]: pathname === '/users',\n      })}\n    >\n      {/* eslint-disable-next-line max-len */}\n      <path d='M15.5,12C18,12 20,14 20,16.5C20,17.38 19.75,18.21 19.31,18.9L22.39,22L21,23.39L17.88,20.32C17.19,20.75 16.37,21 15.5,21C13,21 11,19 11,16.5C11,14 13,12 15.5,12M15.5,14A2.5,2.5 0 0,0 13,16.5A2.5,2.5 0 0,0 15.5,19A2.5,2.5 0 0,0 18,16.5A2.5,2.5 0 0,0 15.5,14M10,4A4,4 0 0,1 14,8C14,8.91 13.69,9.75 13.18,10.43C12.32,10.75 11.55,11.26 10.91,11.9L10,12A4,4 0 0,1 6,8A4,4 0 0,1 10,4M2,20V18C2,15.88 5.31,14.14 9.5,14C9.18,14.78 9,15.62 9,16.5C9,17.79 9.38,19 10,20H2Z' />\n    </svg>\n  )\n}\n\nexport default withRouter(Navbar)\n","import { v1 } from 'uuid'\nimport { BaseThunkType, InferActionsTypes } from '../redux-store'\n\nimport { PostType, ProfileType, PhotosType } from '../../types/types'\n\nimport { ResultCodesEnum } from '../../api/api'\nimport profileAPI from '../../api/profile-api'\n\nconst initialState = {\n  posts: [\n    {\n      author: 'Denis Ignatov',\n      idPost: '1',\n      message: `Lorem ipsum dolor sit amet consectetur adipisicing elit.\n        Facilis ut quo maiores neque laboriosam. Ratione adipisci\n        reiciendis autem placeat alias necessitatibus pariatur saepe\n        ipsum, temporibus animi, facilis minus doloribus ducimus.`,\n      likesCount: 0,\n      isLikeClick: false,\n    },\n    {\n      author: 'Denis Ignatov',\n      idPost: '2',\n      message: 'Lorem ipsum dolor sit amet consectetur adipisicing elit.',\n      likesCount: 0,\n      isLikeClick: false,\n    },\n    {\n      author: 'Denis Ignatov',\n      idPost: '3',\n      message: `Lorem ipsum dolor sit amet consectetur adipisicing elit.\n        Facilis ut quo maiores neque laboriosam. Ratione adipisci\n        reiciendis autem placeat alias necessitatibus...`,\n      likesCount: 0,\n      isLikeClick: false,\n    },\n  ] as Array<PostType>,\n  postsForDelete: [] as Array<string>,\n  isSelectedPost: false,\n  isClickDeleteSelectedPosts: false, // для анимации поста при удалении\n\n  profile: null as ProfileType | null,\n  status: '',\n  showSuccessSave: '',\n  errorProfileContacts: '',\n  isEditModeProfile: false,\n  isEditInputProfileForm: false,\n}\n\nconst profileReducer = (\n  state = initialState,\n  action: ActionsTypes\n): InitialStateType => {\n  switch (action.type) {\n    case 'SET_USER': {\n      return {\n        ...state,\n        profile: action.profile,\n      }\n    }\n    case 'SET_STATUS': {\n      return {\n        ...state,\n        status: action.status,\n      }\n    }\n    case 'INITIALIZE_POSTS': {\n      return {\n        ...state,\n        posts: action.posts,\n      }\n    }\n    case 'ADD_POST': {\n      const newPost = {\n        author: state.profile?.fullName,\n        idPost: v1(), // TODO вызов не чистой функции\n        message: action.newPostText,\n        likesCount: 0,\n        isLikeClick: false,\n      }\n      return {\n        ...state,\n        posts: [newPost, ...state.posts],\n      }\n    }\n    case 'IS_SELECTED_POST': {\n      return {\n        ...state,\n        isSelectedPost: action.bool,\n      }\n    }\n    case 'SET_POST_FOR_DELETE': {\n      return {\n        ...state,\n        postsForDelete: [...state.postsForDelete, action.idPost],\n      }\n    }\n    case 'DELETE_POST_FOR_DELETE': {\n      return {\n        ...state,\n        postsForDelete: [\n          ...state.postsForDelete.filter((id) => id !== action.idPost),\n        ],\n      }\n    }\n    case 'CLEAR_POSTS_FOR_DELETE': {\n      return {\n        ...state,\n        postsForDelete: [],\n      }\n    }\n    case 'TOGGLE_CLICK_DELETE_SELECTED_POST': {\n      return {\n        ...state,\n        isClickDeleteSelectedPosts: action.bool,\n      }\n    }\n    case 'DELETE_POST': {\n      return {\n        ...state,\n        posts: state.posts.filter((p) => p.idPost !== action.idPost),\n      }\n    }\n    case 'SET_LIKE_ON_POST': {\n      return {\n        ...state,\n        posts: [\n          ...state.posts.map((p) => {\n            if (p.idPost === action.idPost) {\n              return {\n                ...p,\n                likesCount: ++p.likesCount,\n                isLikeClick: true,\n              }\n            }\n            return p\n          }),\n        ],\n      }\n    }\n    case 'DELETE_LIKE_ON_POST': {\n      return {\n        ...state,\n        posts: [\n          ...state.posts.map((p) => {\n            if (p.idPost === action.idPost) {\n              return {\n                ...p,\n                likesCount: --p.likesCount,\n                isLikeClick: false,\n              }\n            }\n            return p\n          }),\n        ],\n      }\n    }\n    case 'SAVE_PHOTO_SUCCESS': {\n      return {\n        ...state,\n        profile: { ...state.profile, photos: action.photos } as ProfileType,\n      }\n    }\n    case 'SHOW_SUCCESS_SAVE': {\n      return {\n        ...state,\n        showSuccessSave: action.message,\n      }\n    }\n    case 'SHOW_ERROR_PROFILE_CONTACTS': {\n      return {\n        ...state,\n        errorProfileContacts: action.message,\n      }\n    }\n    case 'TOGGLE_EDIT_MODE_PROFILE': {\n      return {\n        ...state,\n        isEditModeProfile: action.bool,\n      }\n    }\n    case 'TOGGLE_EDIT_INPUT_PROFILE_FORM': {\n      return {\n        ...state,\n        isEditInputProfileForm: action.bool,\n      }\n    }\n    default:\n      return state\n  }\n}\n\nexport const actions = {\n  initializePosts: (posts: Array<PostType>) =>\n    ({ type: 'INITIALIZE_POSTS', posts } as const),\n  addPost: (newPostText: string) =>\n    ({ type: 'ADD_POST', newPostText } as const),\n  deletePost: (idPost: string) => ({ type: 'DELETE_POST', idPost } as const),\n  // лайки-лайки-лайки\n  setLikeOnPost: (idPost: string) =>\n    ({ type: 'SET_LIKE_ON_POST', idPost } as const),\n  deletetLikeOnPost: (idPost: string) =>\n    ({ type: 'DELETE_LIKE_ON_POST', idPost } as const),\n  // удаление нескольких постов\n  setPostForDeleting: (idPost: string) =>\n    ({ type: 'SET_POST_FOR_DELETE', idPost } as const),\n  deletePostForDeleting: (idPost: string) =>\n    ({ type: 'DELETE_POST_FOR_DELETE', idPost } as const),\n  clearPostsForDelete: () => ({ type: 'CLEAR_POSTS_FOR_DELETE' } as const),\n  // для убирания иконок-крестиков у всех постов при выборе нескольких постов\n  toggleIsSelectedPost: (bool: boolean) =>\n    ({ type: 'IS_SELECTED_POST', bool } as const),\n  // для анимации удаления постов\n  toggleIsClickDeleteSelectedPosts: (bool: boolean) =>\n    ({ type: 'TOGGLE_CLICK_DELETE_SELECTED_POST', bool } as const),\n\n  setUserProfile: (profile: ProfileType) =>\n    ({ type: 'SET_USER', profile } as const),\n  setStatus: (status: string) => ({ type: 'SET_STATUS', status } as const),\n  savePhotoSuccess: (photos: PhotosType) =>\n    ({ type: 'SAVE_PHOTO_SUCCESS', photos } as const),\n  showSuccessSaveProfile: (message: string) =>\n    ({ type: 'SHOW_SUCCESS_SAVE', message } as const),\n  showErrorProfileContacts: (message: string) =>\n    ({ type: 'SHOW_ERROR_PROFILE_CONTACTS', message } as const),\n  setEditModeProfile: (bool: boolean) =>\n    ({ type: 'TOGGLE_EDIT_MODE_PROFILE', bool } as const),\n  setEditInputProfileForm: (bool: boolean) =>\n    ({ type: 'TOGGLE_EDIT_INPUT_PROFILE_FORM', bool } as const),\n}\n\nexport const getUserProfile =\n  (userId: number | null): ThunkType =>\n  async (dispatch) => {\n    const response = await profileAPI.getProfile(userId)\n    dispatch(actions.setUserProfile(response))\n  }\n\nexport const getStatus =\n  (id: number): ThunkType =>\n  async (dispatch) => {\n    const response = await profileAPI.getStatus(id)\n    dispatch(actions.setStatus(response))\n  }\n\nexport const updateStatus =\n  (status: string): ThunkType =>\n  async (dispatch) => {\n    const response = await profileAPI.updateStatus(status)\n    if (response.resultCode === ResultCodesEnum.Success) {\n      dispatch(actions.setStatus(status))\n    }\n  }\n\nexport const savePhotoThunk =\n  (file: File): ThunkType =>\n  async (dispatch) => {\n    const response = await profileAPI.savePhotoAPI(file)\n    if (response.resultCode === ResultCodesEnum.Success) {\n      dispatch(actions.savePhotoSuccess(response.data.photos))\n    }\n  }\n\nexport const saveProfileThunk =\n  (profile: ProfileType): ThunkType =>\n  async (dispatch, getState) => {\n    const response = await profileAPI.saveProfileAPI(profile)\n    const { userID } = getState().auth\n\n    if (response.resultCode === ResultCodesEnum.Success) {\n      dispatch(getUserProfile(userID))\n      dispatch(actions.showSuccessSaveProfile('Data saved successfully!'))\n      setTimeout(dispatch, 4000, actions.showSuccessSaveProfile(''))\n      dispatch(actions.showErrorProfileContacts(''))\n    }\n\n    if (response.resultCode === ResultCodesEnum.Error) {\n      // заготовка для показа ошибки конкретного поля\n      // const key = response.data.messages[0]\n      // .match(/Contacts->(\\w+)/)[1].toLowerCase()\n      // dispatch(stopSubmit('editProfile', {\n      //   contacts: { [key]: response.data.messages[0] },\n      // }));\n      dispatch(actions.showErrorProfileContacts(response.messages[0]))\n    }\n  }\n\nexport default profileReducer\n\nexport type InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>\n","import { useSelector } from 'react-redux'\nimport { TextField } from '@material-ui/core'\nimport { getTheme } from '../../../redux/selectors/app-selectors'\n\nconst RenderTextField = (props) => {\n  const {\n    label,\n    input,\n    placeholder,\n    multiline,\n    variant,\n    inputProps,\n    onInput,\n    onFocus,\n    meta: { touched, error, warning },\n    fullWidth,\n    ...custom\n  } = props\n  const theme = useSelector(getTheme)\n  return (\n    <>\n      <TextField\n        color={theme === 'theme1' ? 'primary' : 'secondary'}\n        label={label}\n        placeholder={placeholder}\n        inputProps={inputProps}\n        onInput={onInput}\n        onFocus={onFocus}\n        variant={variant}\n        multiline={multiline}\n        fullWidth={fullWidth}\n        {...input}\n        {...custom}\n      />\n      {touched &&\n        ((error && <span style={{ color: '#f44336' }}>{error}</span>) ||\n          (warning && <span>{warning}</span>))}\n    </>\n  )\n}\n\nexport default RenderTextField\n","import { AppStateType } from '../redux-store'\n\nexport const getProfile = (state: AppStateType) => state.profilePage.profile\n\nexport const getStatusSelector = (state: AppStateType) =>\n  state.profilePage.status\n\nexport const getShowSuccessSave = (state: AppStateType) =>\n  state.profilePage.showSuccessSave\n\nexport const getErrorProfileContacts = (state: AppStateType) =>\n  state.profilePage.errorProfileContacts\n\nexport const getPosts = (state: AppStateType) => state.profilePage.posts\n\nexport const getPostsForDelete = (state: AppStateType) =>\n  state.profilePage.postsForDelete\n\nexport const getToggleClickDeleteSelectedPosts = (state: AppStateType) =>\n  state.profilePage.isClickDeleteSelectedPosts\n\nexport const getIsSelectedPost = (state: AppStateType) =>\n  state.profilePage.isSelectedPost\n\nexport const getEditModeProfile = (state: AppStateType) =>\n  state.profilePage.isEditModeProfile\n\nexport const getEditInputProfileForm = (state: AppStateType) =>\n  state.profilePage.isEditInputProfileForm\n","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport cn from 'classnames'\nimport IconButton from '@material-ui/core/IconButton'\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt'\nimport CloseIcon from '@material-ui/icons/Close'\nimport unknown from '../../../../img/no_photo.svg'\nimport s from './Post.module.scss'\n\nimport Avatar from '../../../common/Avatar/Avatar'\n\nimport {\n  getIsSelectedPost,\n  getPostsForDelete,\n  getToggleClickDeleteSelectedPosts,\n} from '../../../../redux/selectors/profile-selectors'\nimport { getTheme } from '../../../../redux/selectors/app-selectors'\nimport { actions } from '../../../../redux/reducers/profile-reducer'\n\nimport { PostType } from '../../../../types/types'\n\ntype OwnPropsType = {\n  photo: string | null\n  handleDeleteOnePost: (idPost: string) => void\n  addIdPostBeforeDeleting: (idPost: string) => void\n  deleteIdPostBeforeDeleting: (idPost: string) => void\n}\n\nconst Post: React.FC<PostType & OwnPropsType> = (props) => {\n  const {\n    idPost,\n    author,\n    message,\n    likesCount,\n    isLikeClick,\n    photo,\n    handleDeleteOnePost,\n    addIdPostBeforeDeleting,\n    deleteIdPostBeforeDeleting,\n  } = props\n\n  const [isClickDeletePost, setIsClickDeletePost] = useState(false)\n  const [isSelectedPostLocal, setIsSelectedPostLocal] = useState(false)\n\n  const theme = useSelector(getTheme)\n  const isSelectedPost = useSelector(getIsSelectedPost)\n  const isClickDeleteSelectedPosts = useSelector(\n    getToggleClickDeleteSelectedPosts\n  )\n  const postsForDelete = useSelector(getPostsForDelete)\n  const dispatch = useDispatch()\n\n  const handleDeletePost = () => {\n    setIsClickDeletePost(true)\n    setTimeout(() => handleDeleteOnePost(idPost), 300)\n  }\n\n  const handleSetLike = () => {\n    if (!isLikeClick) {\n      dispatch(actions.setLikeOnPost(idPost))\n    } else {\n      dispatch(actions.deletetLikeOnPost(idPost))\n    }\n  }\n\n  return (\n    <div\n      className={cn(s.postContainer, {\n        [s.postDelete]:\n          isClickDeletePost ||\n          (isClickDeleteSelectedPosts && postsForDelete.includes(idPost)),\n        // добавление анимации\n      })}\n    >\n      <div className={s.post}>\n        <div className={s.columnLeft}>\n          <div\n            aria-hidden='true'\n            className={cn(\n              { [s.avatar]: !isSelectedPostLocal },\n              {\n                [s.postSelectedTheme1]:\n                  isSelectedPostLocal && theme === 'theme1',\n              },\n              {\n                [s.postSelectedTheme2]:\n                  isSelectedPostLocal && theme === 'theme2',\n              }\n            )}\n            onClick={() => {\n              if (!isSelectedPostLocal) {\n                // для убирания иконок-крестиков у всех постов\n                dispatch(actions.toggleIsSelectedPost(true))\n                setIsSelectedPostLocal(true)\n                // предварительное добавление поста в список на удаление\n                addIdPostBeforeDeleting(idPost)\n              } else {\n                dispatch(actions.toggleIsSelectedPost(false))\n                setIsSelectedPostLocal(false)\n                deleteIdPostBeforeDeleting(idPost)\n              }\n            }}\n          >\n            <Avatar photo={photo || unknown} size='medium' />\n          </div>\n        </div>\n\n        <div className={s.columnCenter}>\n          <div className={s.name}>{author}</div>\n          <div className={s.message}>{message}</div>\n        </div>\n\n        <div className={s.columnRight}>\n          <div hidden={isSelectedPost}>\n            <IconButton\n              aria-label='deletePost'\n              size='small'\n              onClick={handleDeletePost}\n            >\n              <CloseIcon />\n            </IconButton>\n          </div>\n          <div className={s.wrapLike}>\n            <span className={s.likesCount}>\n              {likesCount > 0 ? `+${likesCount}` : ''}\n            </span>\n            <IconButton aria-label='like' size='small' onClick={handleSetLike}>\n              <ThumbUpAltIcon\n                className={cn(s.like, { [s.noLike]: !isLikeClick })}\n              />\n            </IconButton>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Post\n","import React from 'react'\nimport { Field, InjectedFormProps, reduxForm, reset } from 'redux-form'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport Button from '@material-ui/core/Button'\nimport PostAddIcon from '@material-ui/icons/PostAdd'\nimport { IconButton } from '@material-ui/core'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport cn from 'classnames'\nimport s from './Wall.module.scss'\nimport renderTextField from '../../common/ElementCustom/renderTextField.jsx'\n\nimport Post from './Post/Post'\nimport { PostType } from '../../../types/types'\n\nimport {\n  getPosts,\n  getPostsForDelete,\n} from '../../../redux/selectors/profile-selectors'\nimport { getMyPhoto } from '../../../redux/selectors/auth-selectors'\nimport { actions } from '../../../redux/reducers/profile-reducer'\nimport { getTheme } from '../../../redux/selectors/app-selectors'\n\nconst Wall: React.FC = () => {\n  const posts = useSelector(getPosts)\n  const postsForDelete = useSelector(getPostsForDelete)\n  const myPhoto = useSelector(getMyPhoto)\n  const theme = useSelector(getTheme)\n  const dispatch = useDispatch()\n\n  React.useEffect(() => {\n    // @ts-ignore\n    const arr = JSON.parse(localStorage.getItem('posts'))\n    if (arr) {\n      dispatch(actions.initializePosts(arr))\n    }\n  }, [dispatch])\n\n  React.useEffect(() => {\n    localStorage.setItem('posts', JSON.stringify(posts))\n  }, [posts])\n\n  const handleAddPost = (values: WallValuesFormType) => {\n    if (values.newPostText && values.newPostText.length > 0) {\n      dispatch(actions.addPost(values.newPostText))\n      dispatch(reset('profileNewPostForm'))\n    }\n  }\n\n  const handleDeleteOnePost = (idPost: string) => {\n    dispatch(actions.deletePost(idPost))\n  }\n\n  const handleDeleteSelectedPost = () => {\n    // начало анимации удаления\n    dispatch(actions.toggleIsClickDeleteSelectedPosts(true))\n    // возвращаем индивидуальные иконки-крестики у всех постов\n    dispatch(actions.toggleIsSelectedPost(false))\n\n    setTimeout(() => {\n      postsForDelete.forEach((p) => {\n        dispatch(actions.deletePost(p))\n      })\n      dispatch(actions.clearPostsForDelete())\n\n      // конец анимации удаления\n      dispatch(actions.toggleIsClickDeleteSelectedPosts(false))\n    }, 600)\n  }\n\n  const addIdPostBeforeDeleting = (idPost: string) => {\n    dispatch(actions.setPostForDeleting(idPost))\n  }\n\n  const deleteIdPostBeforeDeleting = (idPost: string) => {\n    dispatch(actions.deletePostForDeleting(idPost))\n  }\n\n  const postsElements = posts.map((p: PostType) => (\n    <Post\n      key={p.idPost}\n      idPost={p.idPost}\n      author={p.author}\n      message={p.message}\n      likesCount={p.likesCount}\n      isLikeClick={p.isLikeClick}\n      photo={myPhoto}\n      handleDeleteOnePost={handleDeleteOnePost}\n      addIdPostBeforeDeleting={addIdPostBeforeDeleting}\n      deleteIdPostBeforeDeleting={deleteIdPostBeforeDeleting}\n    />\n  ))\n\n  return (\n    <div className={s.container}>\n      <div\n        hidden={postsForDelete.length === 0}\n        className={cn({ [s.basket]: postsForDelete.length > 0 })}\n      >\n        <Button\n          onClick={() => handleDeleteSelectedPost()}\n          variant='contained'\n          color={theme === 'theme1' ? 'primary' : 'secondary'}\n          style={{ color: 'white', width: '100%', height: '100%' }}\n          startIcon={<DeleteIcon />}\n        >\n          Delete\n        </Button>\n      </div>\n\n      {postsForDelete.length === 0 && (\n        // @ts-ignore\n        <PostReduxForm onSubmit={handleAddPost} theme={theme} />\n      )}\n\n      <div className={s.posts}>\n        {postsElements}\n        {!posts.length && (\n          <div className={s.noPosts}>\n            <span>No posts yet...</span>\n            <span>Write something!</span>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nconst AddNewPostForm: React.FC<\n  InjectedFormProps<WallValuesFormType, OwnPropsType> & OwnPropsType\n> = ({ handleSubmit, theme }) => {\n  const stylesAddPostButton = {\n    color: 'white',\n    margin: '10px 0 10px 10px',\n    width: '140px',\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className={s.form}>\n        <Field\n          component={renderTextField}\n          name='newPostText'\n          placeholder='Enter the post text...'\n          multiline\n          fullWidth\n          variant='outlined'\n          inputProps={{ maxLength: 1000 }}\n        />\n        <div className={s.buttonBig}>\n          <Button\n            type='submit'\n            variant='contained'\n            color={theme === 'theme1' ? 'primary' : 'secondary'}\n            style={stylesAddPostButton}\n            endIcon={<PostAddIcon />}\n          >\n            Add post\n          </Button>\n        </div>\n        <div hidden className={s.buttonIcon}>\n          <IconButton aria-label='addPost' type='submit'>\n            <PostAddIcon color='primary' />\n          </IconButton>\n        </div>\n      </div>\n    </form>\n  )\n}\n\ntype WallValuesFormType = {\n  newPostText: string\n}\n\ntype OwnPropsType = {\n  theme: string\n}\n\nconst PostReduxForm = reduxForm<WallValuesFormType, OwnPropsType>({\n  form: 'profileNewPostForm',\n})(AddNewPostForm)\n\nexport default Wall\n","export default __webpack_public_path__ + \"static/media/camera.12909c41.svg\";","import { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n  stylesStatus: {\n    minHeight: '30px',\n    lineHeight: '25px',\n    padding: theme.spacing(1),\n    backgroundColor: '#4F4F4F',\n    borderRadius: '5px 5px 0 0',\n  },\n}))\n\nexport default useStyles\n","// Памятка:\n// 1. import {\n// handleInputCount, handleFocusCount, handleBlurCount\n// } from '../../../common/inputCount/inputCount';\n// 2. Передать в input:\n// name='...'\n// onInput={handleInputCount.bind(null, num100)}\n// onFocus={handleFocusCount}\n// onBlur={handleBlurCount}\n// 3. Добавить в компоненту:\n// const num100 = 100;\n// 4. Добавить в компоненту:\n// <span id='statusWrapCount' className={s.countStyle}>\n// <span id='statusCount'></span> of 100\n// </span>\n// 5. Задать родителю span-a:\n// position: relative;\n// 6. Если нужно, чтобы не был виден счётчик при первом отображении input, применить:\n// .countStyle {display: none;}\n\nexport const handleFocusCount = (e) => {\n  e.target.select()\n\n  document.getElementById(`${e.target.name}Count`).textContent =\n    e.target.value.length\n\n  const elem = document.getElementById(`${e.target.name}WrapCount`)\n  elem.style.display = 'inline-block'\n  elem.style.fontSize = '10px'\n  elem.style.position = 'absolute'\n  elem.style.right = '10px'\n  elem.style.top = 0\n}\n\nexport const handleBlurCount = (e) => {\n  document.getElementById(`${e.target.name}WrapCount`).style.display = 'none'\n}\n\nexport const handleInputCount = (num, e) => {\n  const wrap = `${e.target.name}WrapCount`\n  const count = `${e.target.name}Count`\n  const { length } = e.target.value\n\n  if (length < num - 10) document.getElementById(wrap).style.color = 'white'\n  if (length >= num - 10) document.getElementById(wrap).style.color = 'yellow'\n  if (length === num) document.getElementById(wrap).style.color = 'red'\n\n  document.getElementById(count).textContent = e.target.value.length\n}\n","import React, { useEffect, useState, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Input, Button } from '@material-ui/core'\nimport SaveIcon from '@material-ui/icons/Save'\nimport s from './Status.module.scss'\nimport useStyles from './stylesCustomMaterialUI.jsx'\nimport { getTheme } from '../../../../redux/selectors/app-selectors'\n\nimport { getStatusSelector } from '../../../../redux/selectors/profile-selectors'\nimport { updateStatus } from '../../../../redux/reducers/profile-reducer'\nimport {\n  handleInputCount,\n  handleFocusCount,\n  handleBlurCount,\n} from '../../../common/inputCount/inputCount.js'\n\ntype PropsType = {\n  isOwner: boolean\n}\n\nconst Status: React.FC<PropsType> = (props) => {\n  const { isOwner } = props\n  const classes = useStyles()\n\n  const stylesSaveAndButton = {\n    color: '#fff',\n    margin: 10,\n    width: '100%',\n  }\n\n  const status = useSelector(getStatusSelector)\n  const theme = useSelector(getTheme)\n  const dispatch = useDispatch()\n\n  const [editMode, setEditMode] = useState(false)\n  const [isEditInputStatusForm, setIsEditInputStatusForm] = useState(false)\n  const [statusLocal, setStatusLocal] = useState(status)\n  const num300 = 300\n\n  useEffect(() => {\n    setStatusLocal(status)\n  }, [status])\n\n  const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setIsEditInputStatusForm(true)\n    setStatusLocal(e.currentTarget.value)\n  }\n\n  const saveStatus = () => {\n    dispatch(updateStatus(statusLocal))\n    setIsEditInputStatusForm(false)\n    setEditMode(false)\n  }\n\n  function useOutsideAlerter(ref: React.RefObject<HTMLElement>) {\n    useEffect(() => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      function handleClickOutside(event: MouseEvent | any) {\n        if (ref.current && !ref.current.contains(event.target)) {\n          setEditMode(false)\n        }\n      }\n      document.addEventListener('mousedown', handleClickOutside)\n      return () => {\n        document.removeEventListener('mousedown', handleClickOutside)\n      }\n    }, [ref])\n  }\n\n  const statusRef = useRef(null)\n  useOutsideAlerter(statusRef)\n\n  return (\n    <div ref={statusRef} className={s.container}>\n      {editMode && (\n        <div className={s.wrap}>\n          <Input\n            name='status'\n            value={statusLocal}\n            placeholder='Your status...'\n            autoFocus\n            inputProps={{ maxLength: 300 }}\n            className={classes.stylesStatus}\n            color={theme === 'theme1' ? 'primary' : 'secondary'}\n            multiline\n            fullWidth\n            onInput={handleInputCount.bind(null, num300)}\n            onFocus={handleFocusCount}\n            onBlur={handleBlurCount}\n            onChange={onStatusChange}\n          />\n\n          <div className={s.buttons}>\n            <div className={s.buttonWrap}>\n              <Button\n                onClick={saveStatus}\n                disabled={!isEditInputStatusForm}\n                variant='contained'\n                color={theme === 'theme1' ? 'primary' : 'secondary'}\n                style={stylesSaveAndButton}\n                startIcon={<SaveIcon />}\n              >\n                Save\n              </Button>\n            </div>\n\n            <span id='statusWrapCount'>\n              <span id='statusCount' /> of 300\n            </span>\n          </div>\n        </div>\n      )}\n\n      {editMode && <div className={s.plug} />}\n\n      {isOwner && !editMode && (\n        <div\n          aria-hidden='true'\n          className={s.status}\n          onClick={() => setEditMode(true)}\n        >\n          {status || <span className={s.noStatus}>Your status is empty</span>}\n        </div>\n      )}\n\n      {!isOwner && status && <div className={s.statusNotMy}>{status}</div>}\n    </div>\n  )\n}\n\nexport default Status\n","import { FormControlLabel, Checkbox } from '@material-ui/core'\nimport { useSelector } from 'react-redux'\nimport { getTheme } from '../../../redux/selectors/app-selectors'\n\nconst RenderCheckbox = ({ input, label }) => {\n  const theme = useSelector(getTheme)\n  return (\n    <div>\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={!!input.value}\n            onChange={input.onChange}\n            color={theme === 'theme1' ? 'primary' : 'secondary'}\n          />\n        }\n        label={label}\n        labelPlacement='start'\n        style={{ marginLeft: 0 }}\n      />\n    </div>\n  )\n}\n\nexport default RenderCheckbox\n","import React from 'react'\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\n\nimport cn from 'classnames'\nimport renderTextField from '../../../common/ElementCustom/renderTextField.jsx'\nimport renderCheckbox from '../../../common/ElementCustom/renderCheckbox.jsx'\nimport {\n  handleInputCount,\n  handleFocusCount,\n  handleBlurCount,\n} from '../../../common/inputCount/inputCount.js'\nimport s from './InfoDataForm.module.scss'\n\nimport { ProfileType } from '../../../../types/types'\n\ntype OwnPropsType = {\n  errorProfileContacts: string\n  handleEditInputProfileForm: (bool: boolean) => void\n  initialValues: ProfileType\n}\n\nconst DataForm: React.FC<\n  InjectedFormProps<ProfileType, OwnPropsType> & OwnPropsType\n> = (props) => {\n  const {\n    handleSubmit,\n    initialValues,\n    errorProfileContacts,\n    handleEditInputProfileForm,\n  } = props\n\n  const num100 = 100\n  const num1000 = 1000\n\n  return (\n    <form onSubmit={handleSubmit} className={s.form}>\n      <h1 className={s.titleForm}>Edit profile</h1>\n\n      <div className={cn(s.wrap, s.wrapForCount)}>\n        <Field\n          component={renderTextField}\n          name='fullName'\n          label='Name:'\n          placeholder='Your name'\n          variant='filled'\n          fullWidth\n          inputProps={{ maxLength: 100 }}\n          onInput={() => {\n            handleEditInputProfileForm(true)\n            handleInputCount.bind(null, num100)\n          }}\n          onFocus={handleFocusCount}\n          onBlur={handleBlurCount}\n        />\n        <span id='fullNameWrapCount' className={s.countStyle}>\n          <span id='fullNameCount' /> of 100\n        </span>\n      </div>\n\n      <div className={cn(s.wrap, s.wrapForCount)}>\n        <Field\n          component={renderTextField}\n          name='aboutMe'\n          label='About me:'\n          placeholder='Write about yourself!'\n          multiline\n          fullWidth\n          variant='filled'\n          inputProps={{ maxLength: 1000 }}\n          onInput={() => {\n            handleEditInputProfileForm(true)\n            handleInputCount.bind(null, num1000)\n          }}\n          onFocus={handleFocusCount}\n          onBlur={handleBlurCount}\n        />\n        <span id='aboutMeWrapCount' className={s.countStyle}>\n          <span id='aboutMeCount' /> of 1000\n        </span>\n      </div>\n\n      <div className={s.wrap}>\n        <Field\n          component={renderCheckbox}\n          onChange={() => {\n            handleEditInputProfileForm(true)\n          }}\n          name='lookingForAJob'\n          label='Are you looking for a job?'\n        />\n      </div>\n\n      <div className={cn(s.wrap, s.wrapForCount)}>\n        <Field\n          component={renderTextField}\n          name='lookingForAJobDescription'\n          label='Professional skills:'\n          placeholder='What you can do?'\n          multiline\n          fullWidth\n          variant='filled'\n          inputProps={{ maxLength: 1000 }}\n          onInput={() => {\n            handleEditInputProfileForm(true)\n            handleInputCount.bind(null, num1000)\n          }}\n          onFocus={handleFocusCount}\n          onBlur={handleBlurCount}\n        />\n        <span id='lookingForAJobDescriptionWrapCount' className={s.countStyle}>\n          <span id='lookingForAJobDescriptionCount' /> of 1000\n        </span>\n      </div>\n\n      <div className={s.wrap}>\n        <div className={s.titleAllContacts}>Contacts:</div>\n\n        {errorProfileContacts ? (\n          <div className={s.errorProfileContacts}>{errorProfileContacts}</div>\n        ) : (\n          <></>\n        )}\n\n        {Object.keys(initialValues.contacts).map((key) => (\n          <div className={s.contact} key={key}>\n            <div className={s.titleContact}>{key}:</div>\n            <Field\n              component={renderTextField}\n              onInput={() => {\n                handleEditInputProfileForm(true)\n              }}\n              name={`contacts.${key}`}\n              multiline\n              fullWidth\n              placeholder='https://...'\n            />\n          </div>\n        ))}\n      </div>\n    </form>\n  )\n}\n\nconst InfoDataForm = reduxForm<ProfileType, OwnPropsType>({\n  form: 'editProfile',\n})(DataForm)\n\nexport default InfoDataForm\n","import React from 'react'\nimport { ProfileType, СontactsType } from '../../../../types/types'\nimport s from './InfoData.module.scss'\n\ntype PropsType = {\n  profile: ProfileType\n}\n\nconst InfoData: React.FC<PropsType> = ({ profile }) => (\n  <div className={s.containerForm}>\n    <div className={s.wrap}>\n      {profile.aboutMe && (\n        <div className={s.aboutMe}>\n          <div className={s.title}>About me:</div>\n          <div className={s.text}>{profile.aboutMe}</div>\n        </div>\n      )}\n    </div>\n\n    <div className={s.wrap}>\n      <div className={s.job}>\n        <div className={s.title}>Job search:</div>\n        {profile.lookingForAJob ? (\n          <div className={s.text}>Now looking for a job!</div>\n        ) : (\n          <div className={s.text}>I&#39;m not looking for a job</div>\n        )}\n      </div>\n    </div>\n\n    <div className={s.wrap}>\n      {profile.lookingForAJobDescription && (\n        <div className={s.job}>\n          <div className={s.title}>Professional skills:</div>\n          <div className={s.text}>{profile.lookingForAJobDescription}</div>\n        </div>\n      )}\n    </div>\n\n    <div className={s.wrap}>\n      {Object.values(profile.contacts).some((el) => el && el !== '') && (\n        <div className={s.contacts}>\n          <div className={s.title}>My contacts</div>\n          {Object.keys(profile.contacts).map((key) => (\n            <Contact\n              key={key}\n              contactTitle={key}\n              contactValue={profile.contacts[key as keyof СontactsType]}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  </div>\n)\n\ntype ContactPropsType = {\n  contactTitle: string\n  contactValue: string\n}\n\nconst Contact: React.FC<ContactPropsType> = React.memo(\n  ({ contactTitle, contactValue }) => (\n    <>\n      {contactValue && (\n        <div className={s.contact}>\n          <span className={s.contactTitle}>{contactTitle}:</span>\n          <div className={s.contactTextWrap}>\n            <a className={s.contactText} href={contactValue}>\n              {contactValue.replace(/(?:https?):\\/\\/([^/\\s]+)[^\\s]*/gi, '$1')}\n            </a>\n          </div>\n        </div>\n      )}\n    </>\n  )\n)\n\nexport default InfoData\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { submit } from 'redux-form'\n\nimport Button from '@material-ui/core/Button'\nimport EditIcon from '@material-ui/icons/Edit'\nimport SaveIcon from '@material-ui/icons/Save'\nimport CloseIcon from '@material-ui/icons/Close'\nimport s from './InfoContainer.module.scss'\nimport camera from '../../../img/icons/camera.svg'\n\nimport Preloader from '../../common/Preloader/Preloader.jsx'\nimport Status from './Status/Status'\nimport Avatar from '../../common/Avatar/Avatar'\nimport InfoDataForm from './InfoDataForm/InfoDataForm'\nimport InfoData from './InfoData/InfoData'\n\nimport { getTheme } from '../../../redux/selectors/app-selectors'\nimport {\n  getEditInputProfileForm,\n  getEditModeProfile,\n  getErrorProfileContacts,\n  getProfile,\n  getShowSuccessSave,\n} from '../../../redux/selectors/profile-selectors'\nimport {\n  actions,\n  savePhotoThunk,\n  saveProfileThunk,\n} from '../../../redux/reducers/profile-reducer'\n\nimport { ProfileType } from '../../../types/types'\n\n// при переходе на старницу профиля скрол обнулится\nfunction ScrollToTopOnMount() {\n  useEffect(() => {\n    window.scrollTo(0, 0)\n  }, [])\n  return null\n}\n\ntype OwnPropsType = {\n  isOwner: boolean\n}\n\nconst ProfileInfo: React.FC<OwnPropsType> = ({ isOwner }) => {\n  const stylesSaveAndCancelButton = {\n    fontSize: 12,\n    color: '#fff',\n    margin: 10,\n  }\n  const stylesEditButton = {\n    fontSize: 12,\n    marginTop: 20,\n  }\n\n  // for InfoDataForm\n  const errorProfileContacts = useSelector(getErrorProfileContacts)\n\n  const theme = useSelector(getTheme)\n  const profile = useSelector(getProfile)\n  const showSuccessSave = useSelector(getShowSuccessSave)\n  const isEditModeProfile = useSelector(getEditModeProfile)\n  const isEditInputProfileForm = useSelector(getEditInputProfileForm)\n  const dispatch = useDispatch()\n\n  const onSubmit = (values: ProfileType) => {\n    dispatch(saveProfileThunk(values))\n  }\n\n  const onMainPhotoSelected = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files?.length) {\n      dispatch(savePhotoThunk(e.target.files[0]))\n    }\n  }\n\n  const handleEditInputProfileForm = (bool: boolean) => {\n    dispatch(actions.setEditInputProfileForm(bool))\n  }\n\n  if (!profile) {\n    return <Preloader />\n  }\n\n  return (\n    <div className={s.containerMain}>\n      {/* при переходе на старницу профиля скрол обнулится */}\n      <ScrollToTopOnMount />\n\n      <div className={s.columnLeft}>\n        <Avatar photo={profile.photos.large} size='large'>\n          {isOwner && !isEditModeProfile && (\n            <div className={s.camera}>\n              <label htmlFor='file_out'>\n                <div className={s.wrapImg}>\n                  <img src={camera} alt='icon' />\n                </div>\n                <input\n                  id='file_out'\n                  className={s.editPhotoInput}\n                  type='file'\n                  onChange={onMainPhotoSelected}\n                />\n              </label>\n            </div>\n          )}\n        </Avatar>\n\n        {isOwner && !isEditModeProfile && (\n          <Button\n            onClick={() => dispatch(actions.setEditModeProfile(true))}\n            variant='outlined'\n            style={stylesEditButton}\n            startIcon={<EditIcon style={{ fontSize: 16 }} />}\n          >\n            Edit profile\n          </Button>\n        )}\n\n        {isEditModeProfile && (\n          <div className={s.buttonsSaveAndCancelProfile}>\n            <Button\n              onClick={() => {\n                handleEditInputProfileForm(false)\n                dispatch(submit('editProfile'))\n              }}\n              disabled={!isEditInputProfileForm}\n              variant='contained'\n              color={theme === 'theme1' ? 'primary' : 'secondary'}\n              fullWidth\n              style={stylesSaveAndCancelButton}\n              startIcon={<SaveIcon />}\n            >\n              Save\n            </Button>\n            <Button\n              onClick={() => {\n                handleEditInputProfileForm(false)\n                dispatch(actions.setEditModeProfile(false))\n              }}\n              variant='outlined'\n              fullWidth\n              style={stylesSaveAndCancelButton}\n              startIcon={<CloseIcon />}\n            >\n              Cancel\n            </Button>\n          </div>\n        )}\n\n        {isEditModeProfile && showSuccessSave && (\n          <div className={s.successSave}>{showSuccessSave}</div>\n        )}\n      </div>\n\n      <div className={s.columnRight}>\n        {!isEditModeProfile && (\n          <div className={s.fullName}>{profile.fullName}</div>\n        )}\n\n        {!isEditModeProfile && <Status isOwner={isOwner} />}\n\n        {isEditModeProfile ? (\n          <InfoDataForm\n            initialValues={profile}\n            errorProfileContacts={errorProfileContacts}\n            onSubmit={onSubmit}\n            handleEditInputProfileForm={handleEditInputProfileForm}\n          />\n        ) : (\n          <InfoData profile={profile} />\n        )}\n      </div>\n    </div>\n  )\n}\n\nconst InfoContainer = ProfileInfo\nexport default InfoContainer\n","import React from 'react'\nimport { compose } from 'redux'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router'\nimport { RouteComponentProps } from 'react-router-dom'\nimport { AppStateType } from '../../redux/redux-store'\nimport {\n  getUserProfile,\n  getStatus,\n  actions,\n} from '../../redux/reducers/profile-reducer'\n\nimport withAuthRedirect from '../common/hoc/withAuthRedirect'\nimport Wall from './Wall/Wall'\nimport InfoContainer from './Info/InfoContainer'\nimport { getEditModeProfile } from '../../redux/selectors/profile-selectors'\n\ntype MapStatePropsType = {\n  authorizedUserID: number | null\n  isEditModeProfile: boolean\n}\n\ntype MapDispatchPropsType = {\n  getUserProfile: (userId: number) => void\n  getStatus: (userId: number) => void\n  setEditModeProfile: (bool: boolean) => void\n}\n\ntype PathParamsType = {\n  userId: string\n}\n\ntype PropsType = MapStatePropsType &\n  MapDispatchPropsType &\n  RouteComponentProps<PathParamsType>\n\nclass ProfileContainer extends React.PureComponent<PropsType> {\n  componentDidMount() {\n    this.refreshProfile()\n  }\n\n  componentDidUpdate(prevProps: PropsType) {\n    const { match } = this.props\n    // рендер при переходе с одной страницы на другую\n    if (match.params.userId !== prevProps.match.params.userId) {\n      this.refreshProfile()\n    }\n  }\n\n  componentWillUnmount() {\n    const { isEditModeProfile, setEditModeProfile } = this.props\n    if (isEditModeProfile) {\n      setEditModeProfile(false)\n    }\n  }\n\n  refreshProfile() {\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    const { match, authorizedUserID, history, getUserProfile, getStatus } =\n      this.props\n    let userId: number | null = +match.params.userId\n\n    if (!userId) {\n      userId = authorizedUserID\n      if (!userId) {\n        history.push('/login')\n      }\n    }\n\n    getUserProfile(userId as number)\n    getStatus(userId as number)\n  }\n\n  render() {\n    const { match, authorizedUserID, isEditModeProfile } = this.props\n    const isOwner = +match.params.userId === authorizedUserID\n\n    return (\n      <>\n        <InfoContainer isOwner={isOwner} />\n        {!isEditModeProfile && isOwner && <Wall />}\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\n  return {\n    authorizedUserID: state.auth.userID,\n    isEditModeProfile: getEditModeProfile(state),\n  }\n}\n\nexport default compose<React.ComponentType>(\n  connect<\n    MapStatePropsType,\n    MapDispatchPropsType,\n    RouteComponentProps<PathParamsType>,\n    AppStateType\n  >(mapStateToProps, {\n    getUserProfile,\n    getStatus,\n    setEditModeProfile: actions.setEditModeProfile,\n  }),\n  withRouter,\n  withAuthRedirect\n)(ProfileContainer)\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Redirect } from 'react-router'\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\n\nimport cn from 'classnames'\nimport Button from '@material-ui/core/Button'\nimport s from './Login.module.scss'\nimport renderTextField from '../common/ElementCustom/renderTextField.jsx'\nimport renderCheckbox from '../common/ElementCustom/renderCheckbox.jsx'\n\nimport {\n  getAuthorizedUserID,\n  getCaptchaURL,\n  getIsAuth,\n} from '../../redux/selectors/auth-selectors'\nimport { getTheme } from '../../redux/selectors/app-selectors'\nimport { loginThunk } from '../../redux/reducers/auth-reducer'\n\nconst validate = (values: LoginFormValuesType) => {\n  type ErrorsType = {\n    email?: string\n    password?: string\n    captcha?: string\n  }\n\n  const errors: ErrorsType = {}\n\n  if (\n    values.email &&\n    !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n  ) {\n    errors.email = 'Invalid email address'\n  }\n\n  return errors\n}\n\ntype OwnPropsType = {\n  captchaURL: string | null\n}\n\ntype LoginFormValuesType = {\n  email: string\n  password: string\n  rememberMe: boolean\n  captcha: string\n}\n\nconst Login: React.FC = () => {\n  const isAuth = useSelector(getIsAuth)\n  const captchaURL = useSelector(getCaptchaURL)\n  const userID = useSelector(getAuthorizedUserID)\n  const dispatch = useDispatch()\n\n  const onSubmit = (values: LoginFormValuesType) => {\n    dispatch(\n      loginThunk(\n        values.email,\n        values.password,\n        values.rememberMe,\n        values.captcha\n      )\n    )\n  }\n\n  if (isAuth) {\n    return <Redirect to={`/profile/${userID}`} />\n  }\n\n  return (\n    <div className={s.wrap}>\n      <div className={s.body}>\n        <h1>Log in</h1>\n        <LoginReduxForm onSubmit={onSubmit} captchaURL={captchaURL} />\n      </div>\n    </div>\n  )\n}\n\nconst LoginForm: React.FC<\n  InjectedFormProps<LoginFormValuesType, OwnPropsType> & OwnPropsType\n> = ({ handleSubmit, error, captchaURL }) => {\n  const dispatch = useDispatch()\n  const theme = useSelector(getTheme)\n\n  const onTestAccountSubmit = (email: string, password: string) => {\n    dispatch(loginThunk(email, password, false, null))\n  }\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <div className={s.loginBlockSubstrate}>\n          <div className={s.loginBlock}>\n            <div className={s.row}>\n              <Field\n                component={renderTextField}\n                name='email'\n                label='Email:'\n                type='email'\n                fullWidth\n              />\n            </div>\n            <div className={s.row}>\n              <Field\n                component={renderTextField}\n                name='password'\n                label='Password:'\n                type='password'\n                fullWidth\n              />\n            </div>\n            <div className={cn(s.row, s.rowCheckbox)}>\n              <Field\n                component={renderCheckbox}\n                name='rememberMe'\n                label='Remember me'\n              />\n            </div>\n\n            {captchaURL && <img src={captchaURL} alt='captcha' />}\n            {captchaURL && (\n              <Field component={renderTextField} fullWidth name='captcha' />\n            )}\n\n            <div className={s.row}>\n              <Button\n                type='submit'\n                variant='contained'\n                color={theme === 'theme1' ? 'primary' : 'secondary'}\n                fullWidth\n                style={{ fontSize: 16, fontWeight: 'bold', color: '#fff' }}\n              >\n                Log in\n              </Button>\n\n              {error && (\n                <div className={s.formError}>\n                  {error === 'You are not authorized' ? (\n                    <>\n                      <div>You are not authorized</div>\n                      <div>or,</div>\n                      <div>please, unblock third party cookies</div>\n                    </>\n                  ) : (\n                    error\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n        <p>or</p>\n        <Button\n          onClick={() => onTestAccountSubmit('free@samuraijs.com', 'free')}\n          variant='contained'\n          color={theme === 'theme1' ? 'primary' : 'secondary'}\n          fullWidth\n          style={{\n            fontSize: 16,\n            fontWeight: 'bold',\n            color: '#fff',\n            marginBottom: '15px',\n          }}\n        >\n          Login to test account\n        </Button>\n      </form>\n    </>\n  )\n}\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, OwnPropsType>({\n  form: 'loginForm',\n  validate,\n})(LoginForm)\n\nexport default Login\n","import React from 'react'\nimport { Route, withRouter, Switch, Redirect } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { initializeAppThunk } from './redux/reducers/app-reducer'\nimport { getAuthorizedUserID } from './redux/selectors/auth-selectors'\n\nimport Preloader from './components/common/Preloader/Preloader.jsx'\nimport withSuspense from './components/common/hoc/withSuspense'\n\nimport s from './App.module.scss'\nimport Header from './components/Header/Header'\nimport Navbar from './components/Navbar/Navbar'\nimport ProfileContainer from './components/Profile/ProfileContainer'\nimport Login from './components/Login/Login'\nimport { getInitialized } from './redux/selectors/app-selectors'\n\n// TODO Error: Nothing was returned from render. This usually means a return\n// statement is missing. Or, to render nothing, return null\n// import ErrorBoundary from './components/Error/ErrorBoundary.jsx'\n\nconst ChatContainer = React.lazy(() => import('./components/Chat/Chat'))\nconst UsersContainer = React.lazy(\n  () => import('./components/Users/UsersContainer')\n)\n\nconst SuspendedChat = withSuspense(ChatContainer)\nconst SuspendedUsers = withSuspense(UsersContainer)\n\nconst App: React.FC = () => {\n  const initialized = useSelector(getInitialized)\n  const userID = useSelector(getAuthorizedUserID)\n  const dispatch = useDispatch()\n\n  React.useEffect(() => {\n    dispatch(initializeAppThunk())\n  }, [dispatch])\n\n  if (!initialized) {\n    return <Preloader />\n  }\n\n  return (\n    <div className={s.fon}>\n      <div className={s.container}>\n        <div className={s.appWrapper}>\n          <Header />\n          <Navbar />\n\n          <div className={s.appWrapperContent}>\n            {/* <ErrorBoundary> */}\n            <Switch>\n              <Redirect from='/profile/undefined' to='/' />\n\n              <Route\n                path='/profile/:userId'\n                render={() => <ProfileContainer />}\n              />\n\n              <Route path='/chat' render={() => <SuspendedChat />} />\n\n              <Route path='/friends' render={() => <SuspendedUsers />} />\n\n              <Route path='/users' render={() => <SuspendedUsers />} />\n\n              <Route path='/login' render={() => <Login />} />\n\n              <Redirect exact from='/' to={`/profile/${userID}`} />\n\n              <Redirect from='*' to='/' />\n            </Switch>\n            {/* </ErrorBoundary> */}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst AppContainer = withRouter(App)\nexport default AppContainer\n","import {\n  applyMiddleware,\n  combineReducers,\n  createStore,\n  compose,\n  Action,\n} from 'redux'\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk'\nimport { reducer as formReducer } from 'redux-form'\n\nimport authReducer from './reducers/auth-reducer'\nimport profileReducer from './reducers/profile-reducer'\nimport usersReducer from './reducers/users-reducer'\nimport appReducer from './reducers/app-reducer'\nimport chatReducer from './reducers/chat-reducer'\n\nconst rootReducer = combineReducers({\n  profilePage: profileReducer,\n  usersPage: usersReducer,\n  auth: authReducer,\n  app: appReducer,\n  form: formReducer,\n  chat: chatReducer,\n})\n\n// types state app\ntype RootReducerType = typeof rootReducer\nexport type AppStateType = ReturnType<RootReducerType>\n\n// types actions\nexport type InferActionsTypes<T> = T extends {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: (...args: any[]) => infer U\n}\n  ? U\n  : never\n\n// type thunks\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<\n  R,\n  AppStateType,\n  unknown,\n  A\n>\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n// @ts-ignore\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunkMiddleware))\n)\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { HashRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux'\n\nimport {\n  createMuiTheme,\n  ThemeProvider,\n  responsiveFontSizes,\n} from '@material-ui/core/styles'\nimport CssBaseline from '@material-ui/core/CssBaseline'\n\nimport AppContainer from './App'\nimport store from './redux/redux-store'\nimport './styles/theme.css'\n\nlet theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    // цвет главных кнопок, активных ссылок в навигации,\n    // декоративных линий, рамок у форм\n    primary: {\n      main: '#00bcd4',\n      // 1-ая тема, синий цвет\n    },\n    secondary: {\n      main: '#00d482',\n      // 2-ая тема, зелёный цвет\n    },\n  },\n})\n\ntheme = responsiveFontSizes(theme)\n\nReactDOM.render(\n  <HashRouter>\n    <ThemeProvider theme={theme}>\n      <Provider store={store}>\n        <CssBaseline />\n        <AppContainer />\n      </Provider>\n    </ThemeProvider>\n  </HashRouter>,\n  document.getElementById('root')\n)\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__11X-i\",\"logoAndTitle\":\"Header_logoAndTitle__1aRH2\",\"headerTitleDesctop\":\"Header_headerTitleDesctop__YFVbC\",\"headerTitleMobile\":\"Header_headerTitleMobile__20xtB\",\"rightColumn\":\"Header_rightColumn__3_8tP\",\"loginAndPhoto\":\"Header_loginAndPhoto__1Ut22\",\"loginName\":\"Header_loginName__2wjc2\",\"buttonThemeDesctop\":\"Header_buttonThemeDesctop__2p96k\",\"buttonThemeMobile\":\"Header_buttonThemeMobile__1uAJD\",\"buttonLogoutDesctop\":\"Header_buttonLogoutDesctop__1luO3\",\"buttonLogoutMobile\":\"Header_buttonLogoutMobile__1XrW8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Login_wrap__hR_4R\",\"body\":\"Login_body__2XWd-\",\"loginBlockSubstrate\":\"Login_loginBlockSubstrate__39N_j\",\"loginBlock\":\"Login_loginBlock__2cjmN\",\"row\":\"Login_row__1yy-b\",\"rowCheckbox\":\"Login_rowCheckbox__27ZLk\",\"formError\":\"Login_formError__2i8Fi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"camera\":\"InfoContainer_camera__1yrOv\",\"wrapImg\":\"InfoContainer_wrapImg__2vTp6\",\"editPhotoInput\":\"InfoContainer_editPhotoInput__FMDPT\",\"containerMain\":\"InfoContainer_containerMain__2-Az2\",\"columnLeft\":\"InfoContainer_columnLeft__1ik0X\",\"columnRight\":\"InfoContainer_columnRight__13HkF\",\"iconButtonEditProfile\":\"InfoContainer_iconButtonEditProfile__-3nGx\",\"fullName\":\"InfoContainer_fullName__1Jmx0\",\"buttonsSaveAndCancelProfile\":\"InfoContainer_buttonsSaveAndCancelProfile__IBoio\",\"successSave\":\"InfoContainer_successSave__CyJ5t\",\"anim\":\"InfoContainer_anim__AvMM3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Status_container__fEtnU\",\"wrap\":\"Status_wrap__2T3mP\",\"buttons\":\"Status_buttons__2aizz\",\"buttonWrap\":\"Status_buttonWrap__Uieln\",\"plug\":\"Status_plug__1WGsx\",\"status\":\"Status_status__MePaV\",\"statusNotMy\":\"Status_statusNotMy__3HYU8\",\"noStatus\":\"Status_noStatus__22JwO\",\"buttonSave\":\"Status_buttonSave__1mn2Y\",\"buttonCancel\":\"Status_buttonCancel__PIGTv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Wall_container__3eNrD\",\"basket\":\"Wall_basket__35anx\",\"form\":\"Wall_form__1mdjG\",\"posts\":\"Wall_posts__1FRLR\",\"noPosts\":\"Wall_noPosts__Gr0wW\",\"buttonBig\":\"Wall_buttonBig__3Nobv\",\"buttonIcon\":\"Wall_buttonIcon__1vL4R\"};","import React from 'react'\nimport cn from 'classnames'\nimport unknown from '../../../img/no_photo.svg'\nimport s from './Avatar.module.scss'\n\ntype SizeType = 'small' | 'medium' | 'large'\n\ntype PropsType = {\n  photo: string | null | undefined\n  size: SizeType\n}\n\nconst Avatar: React.FC<PropsType> = ({ photo, size, children }) => (\n  <div className={s.avatarWrap}>\n    <div\n      className={cn(\n        s.avatar,\n        { [s.large]: size === 'large' },\n        { [s.medium]: size === 'medium' },\n        { [s.small]: size === 'small' }\n      )}\n    >\n      <img src={photo || unknown} alt='avatar' />\n      {children}\n    </div>\n  </div>\n)\n\nexport default Avatar\n","export default __webpack_public_path__ + \"static/media/preloaderTheme1.364be474.svg\";","export default __webpack_public_path__ + \"static/media/preloaderTheme2.6aed94f2.svg\";","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport preloaderTheme1 from '../../../img/preloaderTheme1.svg'\nimport preloaderTheme2 from '../../../img/preloaderTheme2.svg'\nimport { getTheme } from '../../../redux/selectors/app-selectors'\n\nconst stylesContainer = {\n  position: 'absolute',\n  left: 'calc(50% - 85px)',\n}\n\nconst stylesWrap = {\n  display: 'flex',\n  justifyContent: 'center',\n}\n\nconst Preloader = () => {\n  const theme = useSelector(getTheme)\n  return (\n    <div style={stylesContainer}>\n      <div style={stylesWrap}>\n        <img\n          src={theme === 'theme1' ? preloaderTheme1 : preloaderTheme2}\n          alt='preloader'\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default Preloader\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Avatar_avatar__21jOw\",\"avatarWrap\":\"Avatar_avatarWrap__1k1xZ\",\"small\":\"Avatar_small__kJUnB\",\"medium\":\"Avatar_medium__2-gEK\",\"large\":\"Avatar_large__2ACxy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fon\":\"App_fon__3lpfh\",\"container\":\"App_container__3eQ5h\",\"appWrapper\":\"App_appWrapper__15Fi2\",\"appWrapperContent\":\"App_appWrapperContent__1DlSr\"};"],"sourceRoot":""}