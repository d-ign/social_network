{"version":3,"sources":["components/Chat/Chat.module.scss","components/Chat/Members/Members.module.scss","components/Chat/Members/ButtonSort/ButtonSort.module.scss","components/Chat/Messages/Messages.module.scss","components/Chat/Messages/Message/Message.module.scss","redux/selectors/chat-selectors.ts","components/Chat/Members/ButtonSort/BurronSort.tsx","components/Chat/Members/Members.tsx","components/Chat/Messages/Message/Message.tsx","components/Chat/Messages/Messages.tsx","components/Chat/Chat.tsx"],"names":["module","exports","getMessages","state","chat","messages","getChatMembers","filter","value","index","array","findIndex","item","userId","getStatus","status","ButtonSort","props","theme","isReverseSort","setIsReverseSort","isShowAll","isShowMembers","className","cn","s","buttonSortWrap","buttonSort","buttonSortNotShowMembers","Button","onClick","disabled","startIcon","style","fontSize","marginBottom","padding","color","Members","chatMembers","useSelector","useState","setIsShowAll","setIsShowMembers","itemsCount","length","hidden","container","aria-hidden","titleWrap","titleWrapDeployed","title","titleArrow","path","mdiChevronDown","size","members","notShowMembers","slice","sort","a","b","userName","localeCompare","map","u","member","to","Avatar","photo","name","showAllWrap","showAll","Message","React","memo","message","myID","getAuthorizedUserID","messageContainer","myMessageContainer","avatarMedium","avatarSmall","nameAndMessage","Messages","messagesAnchorRef","useRef","isAutoScroll","setIsAutoScroll","useEffect","current","scrollIntoView","behavior","containerNoMessages","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","m","trim","id","noMessages","ref","AddMessageForm","setMessage","dispatch","useDispatch","wrapForm","form","TextField","placeholder","fullWidth","variant","inputProps","maxLength","onChange","IconButton","aria-label","margin","sendMessage","withAuthRedirect","getTheme","startMessagesListening","stopMessagesListening","membersAndMessages"],"mappings":"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","file":"static/js/4.689ccf62.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"allMessages\":\"Chat_allMessages__UAKZ2\",\"chat\":\"Chat_chat__7k0Pt\",\"membersAndMessages\":\"Chat_membersAndMessages__3U9AL\",\"form\":\"Chat_form__24MsL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Members_container__2mnuT\",\"titleWrap\":\"Members_titleWrap__3rhZf\",\"title\":\"Members_title__g8eeI\",\"titleArrow\":\"Members_titleArrow__1MCCX\",\"members\":\"Members_members__3cDv0\",\"member\":\"Members_member__35i4J\",\"name\":\"Members_name___gfei\",\"showAllWrap\":\"Members_showAllWrap__3thGg\",\"showAll\":\"Members_showAll__1jnZq\",\"notShowMembers\":\"Members_notShowMembers__1qWH8\",\"titleWrapDeployed\":\"Members_titleWrapDeployed__2ndJ-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonSortWrap\":\"ButtonSort_buttonSortWrap__2Qflv\",\"buttonSortNotShowMembers\":\"ButtonSort_buttonSortNotShowMembers__3-zQr\",\"buttonSort\":\"ButtonSort_buttonSort__pWJBD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Messages_container__1oUiN\",\"containerNoMessages\":\"Messages_containerNoMessages__1TJI0\",\"noMessages\":\"Messages_noMessages__37gb7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageContainer\":\"Message_messageContainer__3t0Uw\",\"myMessageContainer\":\"Message_myMessageContainer__4I4bi\",\"name\":\"Message_name__1c26Z\",\"message\":\"Message_message__1m9Ge\",\"nameAndMessage\":\"Message_nameAndMessage__25kLz\",\"avatarMedium\":\"Message_avatarMedium__1f4ye\",\"avatarSmall\":\"Message_avatarSmall__3VFHM\"};","import { AppStateType } from '../redux-store'\n\nexport const getMessages = (state: AppStateType) => state.chat.messages\nexport const getChatMembers = (state: AppStateType) =>\n  state.chat.messages.filter((value, index, array) =>\n    array.findIndex((item) => item.userId === value.userId) === index\n      ? value\n      : null\n  )\nexport const getStatus = (state: AppStateType) => state.chat.status\n","import React, { Dispatch, SetStateAction } from 'react'\n\nimport cn from 'classnames'\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown'\nimport ArrowDropUpIcon from '@material-ui/icons/ArrowDropUp'\nimport { Button } from '@material-ui/core'\nimport s from './ButtonSort.module.scss'\n\ntype PropsType = {\n  theme: string\n  isShowAll: boolean\n  isShowMembers: boolean\n  isReverseSort: boolean\n  setIsReverseSort: Dispatch<SetStateAction<boolean>>\n}\n\nconst ButtonSort: React.FC<PropsType> = (props) => {\n  const { theme, isReverseSort, setIsReverseSort, isShowAll, isShowMembers } =\n    props\n\n  const stylesSortByName = {\n    fontSize: '10px',\n    marginBottom: '5px',\n    padding: '3px 10px 3px 7px',\n  }\n\n  const handleClick = () =>\n    isReverseSort ? setIsReverseSort(false) : setIsReverseSort(true)\n\n  return (\n    <div\n      className={cn(\n        s.buttonSortWrap,\n        { [s.buttonSort]: isShowMembers },\n        { [s.buttonSortNotShowMembers]: !isShowMembers }\n      )}\n    >\n      <Button\n        onClick={handleClick}\n        disabled={!isShowAll}\n        startIcon={isReverseSort ? <ArrowDropUpIcon /> : <ArrowDropDownIcon />}\n        style={stylesSortByName}\n        color={theme === 'theme1' ? 'primary' : 'secondary'}\n      >\n        sort by name\n      </Button>\n    </div>\n  )\n}\n\nexport default ButtonSort\n","import React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { NavLink } from 'react-router-dom'\n\nimport cn from 'classnames'\nimport Icon from '@mdi/react'\nimport { mdiChevronDown } from '@mdi/js'\nimport s from './Members.module.scss'\n\nimport Avatar from '../../common/Avatar/Avatar'\n\nimport { getChatMembers } from '../../../redux/selectors/chat-selectors'\nimport { ChatMessageType } from '../../../redux/reducers/chat-reducer'\nimport { ChatMessageAPIType } from '../../../api/chat-api'\nimport ButtonSort from './ButtonSort/BurronSort'\n\nconst Members: React.FC<{ theme: string }> = ({ theme }) => {\n  const chatMembers = useSelector(getChatMembers)\n\n  const [isShowAll, setIsShowAll] = useState(false)\n  const [isReverseSort, setIsReverseSort] = useState(false)\n  const [isShowMembers, setIsShowMembers] = useState(false)\n\n  const itemsCount = isShowAll ? chatMembers.length : 2\n\n  const handleClickTitle = () =>\n    isShowMembers ? setIsShowMembers(false) : setIsShowMembers(true)\n\n  const sortMembers = (a: ChatMessageType, b: ChatMessageType): number =>\n    isReverseSort\n      ? b.userName.localeCompare(a.userName)\n      : a.userName.localeCompare(b.userName)\n\n  return (\n    <div hidden={!chatMembers.length} className={s.container}>\n      <div\n        aria-hidden='true'\n        className={cn(s.titleWrap, { [s.titleWrapDeployed]: isShowMembers })}\n        onClick={handleClickTitle}\n      >\n        <div className={s.title}>Members</div>\n        <Icon\n          className={s.titleArrow}\n          path={mdiChevronDown}\n          title='ArrowShowMembers'\n          size='18px'\n        />\n      </div>\n\n      <ButtonSort\n        theme={theme}\n        isShowAll={isShowAll}\n        isShowMembers={isShowMembers}\n        isReverseSort={isReverseSort}\n        setIsReverseSort={setIsReverseSort}\n      />\n\n      <div\n        className={cn(\n          { [s.members]: isShowMembers },\n          { [s.notShowMembers]: !isShowMembers }\n        )}\n      >\n        {chatMembers &&\n          chatMembers\n            .slice(0, itemsCount)\n            .sort(sortMembers)\n            .map((u: ChatMessageAPIType) => (\n              <div className={s.member} key={u.userId}>\n                <NavLink to={`/profile/${u.userId}`}>\n                  <Avatar photo={u.photo} size='small' />\n                </NavLink>\n                <NavLink className={s.name} to={`/profile/${u.userId}`}>\n                  {u.userName}\n                </NavLink>\n              </div>\n            ))}\n\n        {chatMembers.length > 2 && !isShowAll ? (\n          <div className={s.showAllWrap}>\n            <span\n              aria-hidden='true'\n              className={s.showAll}\n              onClick={() => setIsShowAll(true)}\n            >\n              show all {chatMembers.length} ...\n            </span>\n          </div>\n        ) : (\n          ''\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default Members\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { NavLink } from 'react-router-dom'\n\nimport cn from 'classnames'\nimport s from './Message.module.scss'\n\nimport Avatar from '../../../common/Avatar/Avatar'\nimport { getAuthorizedUserID } from '../../../../redux/selectors/auth-selectors'\nimport { ChatMessageAPIType } from '../../../../api/chat-api'\n\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(\n  ({ message }) => {\n    const myID = useSelector(getAuthorizedUserID)\n\n    return (\n      <div\n        className={cn(s.messageContainer, {\n          [s.myMessageContainer]: myID === message.userId,\n        })}\n      >\n        <NavLink to={`/profile/${message.userId}`}>\n          <div className={s.avatarMedium}>\n            <Avatar photo={message.photo} size='medium' />\n          </div>\n          <div hidden className={s.avatarSmall}>\n            <Avatar photo={message.photo} size='small' />\n          </div>\n        </NavLink>\n        <div className={s.nameAndMessage}>\n          <NavLink className={s.name} to={`/profile/${message.userId}`}>\n            {message.userName}\n          </NavLink>\n          <div className={s.message}>{message.message}</div>\n        </div>\n      </div>\n    )\n  }\n)\n\nexport default Message\n","import React, { useEffect, useRef, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport cn from 'classnames'\nimport s from './Messages.module.scss'\n\nimport Message from './Message/Message'\n\nimport { getMessages } from '../../../redux/selectors/chat-selectors'\nimport { ChatMessageType } from '../../../redux/reducers/chat-reducer'\n\nconst Messages: React.FC = () => {\n  const messages = useSelector(getMessages)\n  const messagesAnchorRef = useRef<HTMLDivElement>(null)\n  const [isAutoScroll, setIsAutoScroll] = useState(true)\n\n  const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n    const element = e.currentTarget\n    if (\n      Math.abs(\n        element.scrollHeight - element.scrollTop - element.clientHeight\n      ) < 1\n    ) {\n      if (!isAutoScroll) setIsAutoScroll(true)\n    } else if (isAutoScroll) setIsAutoScroll(false)\n  }\n\n  useEffect(() => {\n    if (isAutoScroll) {\n      messagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth' })\n    }\n  }, [messages, isAutoScroll])\n\n  return (\n    <div\n      className={cn(s.container, { [s.containerNoMessages]: !messages.length })}\n      onScroll={scrollHandler}\n    >\n      {messages.length ? (\n        messages\n          .filter((m) => m.message.trim().length > 0)\n          .map((m: ChatMessageType) => <Message key={m.id} message={m} />)\n      ) : (\n        <div className={s.noMessages}>\n          No messages yet...\n          <br />\n          Write something!\n        </div>\n      )}\n      <div ref={messagesAnchorRef} />\n    </div>\n  )\n}\n\nexport default Messages\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport IconButton from '@material-ui/core/IconButton'\nimport SendIcon from '@material-ui/icons/Send'\nimport { TextField } from '@material-ui/core'\nimport s from './Chat.module.scss'\n\nimport withAuthRedirect from '../common/hoc/withAuthRedirect'\nimport Members from './Members/Members'\nimport Messages from './Messages/Messages'\n\nimport { getTheme } from '../../redux/selectors/app-selectors'\nimport { getStatus } from '../../redux/selectors/chat-selectors'\nimport {\n  sendMessage,\n  startMessagesListening,\n  stopMessagesListening,\n} from '../../redux/reducers/chat-reducer'\n\nconst Chat: React.FC = () => {\n  const status = useSelector(getStatus)\n  const theme = useSelector(getTheme)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(startMessagesListening())\n    return () => {\n      dispatch(stopMessagesListening())\n    }\n  }, [dispatch])\n\n  return (\n    <div className={s.chat}>\n      {/* error появляется, когда пропадает интернет, на несколько\n      миллисекунд и сменяется другим статусом? */}\n      {status === 'error' && (\n        <div>Some error occured. Please, refresh the page...</div>\n      )}\n      <div className={s.membersAndMessages}>\n        <Messages />\n        <Members theme={theme} />\n      </div>\n      <AddMessageForm theme={theme} />\n    </div>\n  )\n}\n\nconst AddMessageForm: React.FC<{ theme: string }> = ({ theme }) => {\n  const [message, setMessage] = React.useState('')\n  const status = useSelector(getStatus)\n  const dispatch = useDispatch()\n\n  const handleSendMessage = () => {\n    if (!message.trim()) {\n      return\n    }\n    dispatch(sendMessage(message))\n    setMessage('')\n  }\n\n  return (\n    <div className={s.wrapForm}>\n      <div className={s.form}>\n        <TextField\n          name='newMessageText'\n          placeholder='Enter your message...'\n          fullWidth\n          variant='outlined'\n          inputProps={{ maxLength: 100 }}\n          color={theme === 'theme1' ? 'primary' : 'secondary'}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n            setMessage(e.currentTarget.value)\n          }\n          value={message}\n        />\n        <IconButton\n          aria-label='sendMessage'\n          color={theme === 'theme1' ? 'primary' : 'secondary'}\n          style={{ margin: '5px' }}\n          onClick={handleSendMessage}\n          disabled={status === 'pending'}\n        >\n          <SendIcon />\n        </IconButton>\n      </div>\n    </div>\n  )\n}\n\nexport default withAuthRedirect(Chat)\n"],"sourceRoot":""}