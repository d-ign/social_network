{"version":3,"sources":["components/Chat/Chat.module.css","redux/selectors/chat-selectors.ts","components/Chat/Chat.tsx"],"names":["module","exports","getMessages","state","chat","messages","getChatMembers","filter","value","index","array","findIndex","item","userId","getStatus","status","Members","chatMembers","useSelector","useState","isShowAll","setIsShowAll","isReverseSort","setIsReverseSort","itemsCount","length","isShowMembers","setIsShowMembers","className","cn","s","membersContainer","membersContainerHidden","aria-hidden","titleMembersWrap","titleMembersWrapDeployed","buttonSortWrapHiddenNotShowAll","onClick","titleMembers","titleMembersArrow","path","mdiChevronDown","title","size","buttonSortWrap","buttonSortMedia","buttonSortNotShowMembers","buttonSortNotShowAll","Button","startIcon","style","fontSize","marginBottom","padding","chatMembersMedia","chatMembersNotShowMembers","slice","sort","a","b","userName","localeCompare","map","u","member","to","Avatar","photo","name","nameMember","showAllWrap","showAll","Messages","messagesAnchorRef","useRef","isAutoScroll","setIsAutoScroll","useEffect","current","scrollIntoView","behavior","allMessages","allMessagesAbsent","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","m","message","trim","Message","id","noMessages","ref","React","memo","myID","getAuthorizedUserID","messageContainer","myMessageContainer","avatarMedium","avatarSmall","nameAndMessage","AddMessageForm","setMessage","dispatch","useDispatch","wrapForm","form","TextField","placeholder","multiline","fullWidth","rowsMax","variant","inputProps","maxLength","onChange","IconButton","aria-label","color","margin","sendMessage","disabled","withAuthRedirect","startMessagesListening","stopMessagesListening","membersAndMessages"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,YAAc,0BAA0B,mBAAqB,iCAAiC,iBAAmB,+BAA+B,eAAiB,6BAA6B,iBAAmB,+BAA+B,aAAe,2BAA2B,kBAAoB,gCAAgC,OAAS,qBAAqB,YAAc,0BAA0B,QAAU,sBAAsB,uBAAyB,qCAAqC,kBAAoB,gCAAgC,WAAa,yBAAyB,iBAAmB,+BAA+B,mBAAqB,iCAAiC,KAAO,mBAAmB,WAAa,yBAAyB,QAAU,sBAAsB,YAAc,0BAA0B,eAAiB,6BAA6B,KAAO,mBAAmB,yBAA2B,uCAAuC,0BAA4B,wCAAwC,gBAAkB,8BAA8B,iBAAmB,+BAA+B,yBAA2B,uCAAuC,qBAAuB,mCAAmC,aAAe,6B,oQCC5vCC,EAAc,SAACC,GAAD,OAAyBA,EAAMC,KAAKC,UAClDC,EAAiB,SAACH,GAAD,OAC5BA,EAAMC,KAAKC,SAASE,QAAO,SAACC,EAAOC,EAAOC,GAAf,OACzBA,EAAMC,WAAU,SAACC,GAAD,OAAUA,EAAKC,SAAWL,EAAMK,YAAYJ,EACxDD,EACA,SAEKM,EAAY,SAACX,GAAD,OAAyBA,EAAMC,KAAKW,Q,gBC+CvDC,EAAoB,WACxB,IAAMC,EAAcC,YAAYZ,GADF,EAEIa,oBAAS,GAFb,mBAEvBC,EAFuB,KAEZC,EAFY,OAGYF,oBAAS,GAHrB,mBAGvBG,EAHuB,KAGRC,EAHQ,KAIxBC,EAAaJ,EAAYH,EAAYQ,OAAS,EAJtB,EAKYN,oBAAS,GALrB,mBAKvBO,EALuB,KAKRC,EALQ,KAO9B,OACE,sBACEC,UAAWC,IAAGC,IAAEC,iBAAH,eACVD,IAAEE,wBAA0Bf,EAAYQ,SAF7C,UAKE,sBACEQ,cAAY,OACZL,UAAWC,IACTC,IAAEI,iBADS,eAERJ,IAAEK,yBAA2BT,GAFrB,eAGRI,IAAEM,gCAAkChB,IAEzCiB,QAAS,kBACSV,GAAhBD,IARJ,UAeE,qBAAKE,UAAWE,IAAEQ,aAAlB,qBACA,cAAC,IAAD,CACEV,UAAWE,IAAES,kBACbC,KAAMC,IACNC,MAAM,mBACNC,KAAK,YAIT,qBACEf,UAAWC,IACTC,IAAEc,eADS,eAERd,IAAEe,gBAAkBnB,GAFZ,eAGRI,IAAEgB,0BAA4BpB,GAHtB,eAIRI,IAAEiB,sBAAwB3B,IALjC,SAQE,cAAC4B,EAAA,EAAD,CACEX,QAAS,kBACSd,GAAhBD,IAEF2B,UACE3B,EAAgB,cAAC,IAAD,IAAsB,cAAC,IAAD,IAExC4B,MAAO,CAAEC,SAAU,GAAIC,aAAc,EAAGC,QAAS,GAPnD,4BAaF,sBACEzB,UAAWC,IAAG,eACTC,IAAEwB,iBAAmB5B,GADb,eAERI,IAAEyB,2BAA6B7B,GAFvB,eAGRI,IAAEiB,sBAAwB3B,IAJjC,UAOGH,GACCA,EACGuC,MAAM,EAAGhC,GACTiC,MAAK,SAACC,EAAoBC,GAArB,OACJrC,EACIqC,EAAEC,SAASC,cAAcH,EAAEE,UAC3BF,EAAEE,SAASC,cAAcF,EAAEC,aAEhCE,KAAI,SAACC,GAAD,OACH,sBAAKnC,UAAWE,IAAEkC,OAAlB,UACE,cAAC,IAAD,CAASC,GAAE,mBAAcF,EAAElD,QAA3B,SACE,cAACqD,EAAA,EAAD,CAAQC,MAAOJ,EAAEI,MAAOxB,KAAK,YAE/B,cAAC,IAAD,CACEf,UAAWC,IAAGC,IAAEsC,KAAMtC,IAAEuC,YACxBJ,GAAE,mBAAcF,EAAElD,QAFpB,SAIGkD,EAAEH,aARwBG,EAAElD,WAatCI,EAAYQ,OAAS,IAAML,EAC1B,qBAAKQ,UAAWE,IAAEwC,YAAlB,SACE,sBACErC,cAAY,OACZL,UAAWE,IAAEyC,QACblC,QAAS,kBAAMhB,GAAa,IAH9B,2BASF,UAOJmD,EAAqB,WACzB,IAAMnE,EAAWa,YAAYhB,GACvBuE,EAAoBC,iBAAuB,MAFlB,EAGSvD,oBAAS,GAHlB,mBAGxBwD,EAHwB,KAGVC,EAHU,KAsB/B,OANAC,qBAAU,WACW,IAAD,EAAdF,IACF,UAAAF,EAAkBK,eAAlB,SAA2BC,eAAe,CAAEC,SAAU,cAEvD,CAAC3E,EAAUsE,IAGZ,sBACE/C,UAAWC,IAAGC,IAAEmD,YAAH,eAAmBnD,IAAEoD,mBAAqB7E,EAASoB,SAChE0D,SApBkB,SAACC,GACrB,IAAMC,EAAUD,EAAEE,cAEhBC,KAAKC,IACHH,EAAQI,aAAeJ,EAAQK,UAAYL,EAAQM,cACjD,EAEChB,GAAcC,GAAgB,GAC1BD,GAAcC,GAAgB,IAUzC,UAIGvE,EAASoB,OACRpB,EACGE,QAAO,SAACqF,GAAD,OAAOA,EAAEC,QAAQC,OAAOrE,OAAS,KACxCqC,KAAI,SAAC8B,GAAD,OAAwB,cAACG,EAAD,CAAoBF,QAASD,GAAfA,EAAEI,OAE/C,sBAAKpE,UAAWE,IAAEmE,WAAlB,+BAEE,uBAFF,sBAMF,qBAAKC,IAAKzB,QAKVsB,EAAqDI,IAAMC,MAC/D,YAAkB,IAAfP,EAAc,EAAdA,QACKQ,EAAOnF,YAAYoF,KAEzB,OACE,sBACE1E,UAAWC,IAAGC,IAAEyE,iBAAH,eACVzE,IAAE0E,mBAAqBH,IAASR,EAAQhF,SAF7C,UAKE,eAAC,IAAD,CAASoD,GAAE,mBAAc4B,EAAQhF,QAAjC,UACE,qBAAKe,UAAWE,IAAE2E,aAAlB,SACE,cAACvC,EAAA,EAAD,CAAQC,MAAO0B,EAAQ1B,MAAOxB,KAAK,aAErC,qBAAKf,UAAWE,IAAE4E,YAAlB,SACE,cAACxC,EAAA,EAAD,CAAQC,MAAO0B,EAAQ1B,MAAOxB,KAAK,eAGvC,sBAAKf,UAAWE,IAAE6E,eAAlB,UACE,cAAC,IAAD,CAAS/E,UAAWE,IAAEsC,KAAMH,GAAE,mBAAc4B,EAAQhF,QAApD,SACGgF,EAAQjC,WAEX,qBAAKhC,UAAWE,IAAE+D,QAAlB,SAA4BA,EAAQA,mBAOxCe,EAA2B,WAAO,IAAD,EACPT,IAAMhF,SAAS,IADR,mBAC9B0E,EAD8B,KACrBgB,EADqB,KAE/B9F,EAASG,YAAYJ,GACrBgG,EAAWC,cAUjB,OACE,qBAAKnF,UAAWE,IAAEkF,SAAlB,SACE,sBAAKpF,UAAWE,IAAEmF,KAAlB,UACE,cAACC,EAAA,EAAD,CACE9C,KAAK,iBACL+C,YAAY,wBACZC,WAAS,EACTC,WAAS,EACTC,QAAQ,IACRC,QAAQ,WACRC,WAAY,CAAEC,UAAW,KACzBC,SAAU,SAACtC,GAAD,OAAOyB,EAAWzB,EAAEE,cAAc9E,QAC5CA,MAAOqF,IAET,cAAC8B,EAAA,EAAD,CACEC,aAAW,cACXC,MAAM,UACN3E,MAAO,CAAE4E,OAAQ,OACjBzF,QA1BkB,WACnBwD,EAAQC,SAGbgB,EAASiB,YAAYlC,IACrBgB,EAAW,MAsBLmB,SAAqB,YAAXjH,EALZ,SAOE,cAAC,IAAD,YAOKkH,uBArPQ,WACrB,IAAMlH,EAASG,YAAYJ,GACrBgG,EAAWC,cASjB,OAPAlC,qBAAU,WAER,OADAiC,EAASoB,eACF,WACLpB,EAASqB,kBAEV,CAACrB,IAGF,sBAAKlF,UAAWE,IAAE1B,KAAlB,UAGc,UAAXW,GACC,kFAEF,sBAAKa,UAAWE,IAAEsG,mBAAlB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,OAEF,cAAC,EAAD","file":"static/js/5.f8e8500f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"allMessages\":\"Chat_allMessages__3upJk\",\"membersAndMessages\":\"Chat_membersAndMessages__QYSIC\",\"titleMembersWrap\":\"Chat_titleMembersWrap__21BfD\",\"buttonSortWrap\":\"Chat_buttonSortWrap__1eMVl\",\"membersContainer\":\"Chat_membersContainer__1T8z_\",\"titleMembers\":\"Chat_titleMembers__ZXOJR\",\"titleMembersArrow\":\"Chat_titleMembersArrow__8wlKQ\",\"member\":\"Chat_member__19AK-\",\"showAllWrap\":\"Chat_showAllWrap__3_abN\",\"showAll\":\"Chat_showAll__1yp8e\",\"membersContainerHidden\":\"Chat_membersContainerHidden__1kSs4\",\"allMessagesAbsent\":\"Chat_allMessagesAbsent__2u7bW\",\"noMessages\":\"Chat_noMessages__1TXOR\",\"messageContainer\":\"Chat_messageContainer__h8lg9\",\"myMessageContainer\":\"Chat_myMessageContainer__3lNbN\",\"name\":\"Chat_name__3z4wa\",\"nameMember\":\"Chat_nameMember__27PzK\",\"message\":\"Chat_message__1UPOG\",\"avatarSmall\":\"Chat_avatarSmall__1bEVh\",\"nameAndMessage\":\"Chat_nameAndMessage__19MYP\",\"form\":\"Chat_form__2pzA5\",\"buttonSortNotShowMembers\":\"Chat_buttonSortNotShowMembers__32xXM\",\"chatMembersNotShowMembers\":\"Chat_chatMembersNotShowMembers__20aDH\",\"buttonSortMedia\":\"Chat_buttonSortMedia__kmZAn\",\"chatMembersMedia\":\"Chat_chatMembersMedia__2g3AE\",\"titleMembersWrapDeployed\":\"Chat_titleMembersWrapDeployed__2JKFF\",\"buttonSortNotShowAll\":\"Chat_buttonSortNotShowAll__3Qax8\",\"avatarMedium\":\"Chat_avatarMedium__eK_9C\"};","import { AppStateType } from '../redux-store'\n\nexport const getMessages = (state: AppStateType) => state.chat.messages\nexport const getChatMembers = (state: AppStateType) =>\n  state.chat.messages.filter((value, index, array) =>\n    array.findIndex((item) => item.userId === value.userId) === index\n      ? value\n      : null\n  )\nexport const getStatus = (state: AppStateType) => state.chat.status\n","import React, { useEffect, useRef, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { NavLink } from 'react-router-dom'\n\nimport cn from 'classnames'\nimport IconButton from '@material-ui/core/IconButton'\nimport SendIcon from '@material-ui/icons/Send'\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown'\nimport ArrowDropUpIcon from '@material-ui/icons/ArrowDropUp'\nimport Icon from '@mdi/react'\nimport { Button, TextField } from '@material-ui/core'\nimport { mdiChevronDown } from '@mdi/js'\nimport s from './Chat.module.css'\nimport withAuthRedirect from '../hoc/withAuthRedirect'\nimport Avatar from '../common/Avatar/Avatar'\nimport { getAuthorizedUserID } from '../../redux/selectors/auth-selectors'\nimport {\n  getChatMembers,\n  getMessages,\n  getStatus,\n} from '../../redux/selectors/chat-selectors'\nimport {\n  ChatMessageType,\n  sendMessage,\n  startMessagesListening,\n  stopMessagesListening,\n} from '../../redux/reducers/chat-reducer'\nimport { ChatMessageAPIType } from '../../api/chat-api'\n\nconst Chat: React.FC = () => {\n  const status = useSelector(getStatus)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(startMessagesListening())\n    return () => {\n      dispatch(stopMessagesListening())\n    }\n  }, [dispatch])\n\n  return (\n    <div className={s.chat}>\n      {/* error появляется, когда пропадает интернет, на несколько \n      миллисекунд и сменяется другим статусом? */}\n      {status === 'error' && (\n        <div>Some error occured. Please, refresh the page...</div>\n      )}\n      <div className={s.membersAndMessages}>\n        <Messages />\n        <Members />\n      </div>\n      <AddMessageForm />\n    </div>\n  )\n}\n\nconst Members: React.FC = () => {\n  const chatMembers = useSelector(getChatMembers)\n  const [isShowAll, setIsShowAll] = useState(false)\n  const [isReverseSort, setIsReverseSort] = useState(false)\n  const itemsCount = isShowAll ? chatMembers.length : 5\n  const [isShowMembers, setIsShowMembers] = useState(false)\n\n  return (\n    <div\n      className={cn(s.membersContainer, {\n        [s.membersContainerHidden]: !chatMembers.length,\n      })}\n    >\n      <div\n        aria-hidden='true'\n        className={cn(\n          s.titleMembersWrap,\n          { [s.titleMembersWrapDeployed]: isShowMembers },\n          { [s.buttonSortWrapHiddenNotShowAll]: !isShowAll }\n        )}\n        onClick={() =>\n          isShowMembers ? setIsShowMembers(false) : setIsShowMembers(true)\n        }\n        // onKeyDown={(e) => {\n        //   if (e.code === 'Tab' && isShowMembers) setIsShowMembers(false)\n        //   if (e.code === 'Tab' && !isShowMembers) setIsShowMembers(true)\n        // }}\n      >\n        <div className={s.titleMembers}>Members</div>\n        <Icon\n          className={s.titleMembersArrow}\n          path={mdiChevronDown}\n          title='ArrowShowMembers'\n          size='18px'\n        />\n      </div>\n\n      <div\n        className={cn(\n          s.buttonSortWrap,\n          { [s.buttonSortMedia]: isShowMembers },\n          { [s.buttonSortNotShowMembers]: !isShowMembers },\n          { [s.buttonSortNotShowAll]: !isShowAll }\n        )}\n      >\n        <Button\n          onClick={() =>\n            isReverseSort ? setIsReverseSort(false) : setIsReverseSort(true)\n          }\n          startIcon={\n            isReverseSort ? <ArrowDropUpIcon /> : <ArrowDropDownIcon />\n          }\n          style={{ fontSize: 10, marginBottom: 5, padding: 3 }}\n        >\n          sort by name\n        </Button>\n      </div>\n\n      <div\n        className={cn(\n          { [s.chatMembersMedia]: isShowMembers },\n          { [s.chatMembersNotShowMembers]: !isShowMembers },\n          { [s.buttonSortNotShowAll]: !isShowAll }\n        )}\n      >\n        {chatMembers &&\n          chatMembers\n            .slice(0, itemsCount)\n            .sort((a: ChatMessageType, b: ChatMessageType): number =>\n              isReverseSort\n                ? b.userName.localeCompare(a.userName)\n                : a.userName.localeCompare(b.userName)\n            )\n            .map((u: ChatMessageAPIType) => (\n              <div className={s.member} key={u.userId}>\n                <NavLink to={`/profile/${u.userId}`}>\n                  <Avatar photo={u.photo} size='small' />\n                </NavLink>\n                <NavLink\n                  className={cn(s.name, s.nameMember)}\n                  to={`/profile/${u.userId}`}\n                >\n                  {u.userName}\n                </NavLink>\n              </div>\n            ))}\n\n        {chatMembers.length > 5 && !isShowAll ? (\n          <div className={s.showAllWrap}>\n            <span\n              aria-hidden='true'\n              className={s.showAll}\n              onClick={() => setIsShowAll(true)}\n            >\n              show all...\n            </span>\n          </div>\n        ) : (\n          ''\n        )}\n      </div>\n    </div>\n  )\n}\n\nconst Messages: React.FC = () => {\n  const messages = useSelector(getMessages)\n  const messagesAnchorRef = useRef<HTMLDivElement>(null)\n  const [isAutoScroll, setIsAutoScroll] = useState(true)\n\n  const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n    const element = e.currentTarget\n    if (\n      Math.abs(\n        element.scrollHeight - element.scrollTop - element.clientHeight\n      ) < 1\n    ) {\n      if (!isAutoScroll) setIsAutoScroll(true)\n    } else if (isAutoScroll) setIsAutoScroll(false)\n  }\n\n  useEffect(() => {\n    if (isAutoScroll) {\n      messagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth' })\n    }\n  }, [messages, isAutoScroll])\n\n  return (\n    <div\n      className={cn(s.allMessages, { [s.allMessagesAbsent]: !messages.length })}\n      onScroll={scrollHandler}\n    >\n      {messages.length ? (\n        messages\n          .filter((m) => m.message.trim().length > 0)\n          .map((m: ChatMessageType) => <Message key={m.id} message={m} />)\n      ) : (\n        <div className={s.noMessages}>\n          No messages yet...\n          <br />\n          Write something!\n        </div>\n      )}\n      <div ref={messagesAnchorRef} />\n    </div>\n  )\n}\n\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(\n  ({ message }) => {\n    const myID = useSelector(getAuthorizedUserID)\n\n    return (\n      <div\n        className={cn(s.messageContainer, {\n          [s.myMessageContainer]: myID === message.userId,\n        })}\n      >\n        <NavLink to={`/profile/${message.userId}`}>\n          <div className={s.avatarMedium}>\n            <Avatar photo={message.photo} size='medium' />\n          </div>\n          <div className={s.avatarSmall}>\n            <Avatar photo={message.photo} size='small' />\n          </div>\n        </NavLink>\n        <div className={s.nameAndMessage}>\n          <NavLink className={s.name} to={`/profile/${message.userId}`}>\n            {message.userName}\n          </NavLink>\n          <div className={s.message}>{message.message}</div>\n        </div>\n      </div>\n    )\n  }\n)\n\nconst AddMessageForm: React.FC = () => {\n  const [message, setMessage] = React.useState('')\n  const status = useSelector(getStatus)\n  const dispatch = useDispatch()\n\n  const handleSendMessage = () => {\n    if (!message.trim()) {\n      return\n    }\n    dispatch(sendMessage(message))\n    setMessage('')\n  }\n\n  return (\n    <div className={s.wrapForm}>\n      <div className={s.form}>\n        <TextField\n          name='newMessageText'\n          placeholder='Enter your message...'\n          multiline\n          fullWidth\n          rowsMax='3'\n          variant='outlined'\n          inputProps={{ maxLength: 100 }}\n          onChange={(e) => setMessage(e.currentTarget.value)}\n          value={message}\n        />\n        <IconButton\n          aria-label='sendMessage'\n          color='primary'\n          style={{ margin: '5px' }}\n          onClick={handleSendMessage}\n          disabled={status === 'pending'}\n        >\n          <SendIcon />\n        </IconButton>\n      </div>\n    </div>\n  )\n}\n\nexport default withAuthRedirect(Chat)\n"],"sourceRoot":""}