{"version":3,"sources":["services/hooks/useResizeWindow.tsx","pages/Chat/Chat.module.scss","pages/Chat/ChatMembers/ChatMembers.module.scss","pages/Chat/ChatMembers/ChatButtonSort/ChatButtonSort.module.scss","../node_modules/@mui/icons-material/ArrowDropUp.js","../node_modules/@mui/icons-material/ArrowDropDown.js","../node_modules/@mui/icons-material/KeyboardArrowDown.js","pages/Chat/ChatMessages/ChatMessages.module.scss","pages/Chat/ChatMessages/ChatMessage/ChatMessage.module.scss","../node_modules/@mui/icons-material/Send.js","pages/Chat/ChatMembers/ChatButtonSort/ChatBurronSort.tsx","store/selectors/chat-selectors.ts","pages/Chat/ChatMembers/ChatMembers.tsx","pages/Chat/ChatMessages/ChatMessage/ChatMessage.tsx","pages/Chat/ChatMessages/ChatMessages.tsx","pages/Chat/Chat.tsx"],"names":["useResizeWindow","useState","window","innerWidth","widthScreen","setWidthScreen","useEffect","handleResizeWindow","addEventListener","removeEventListener","module","exports","_interopRequireDefault","require","Object","defineProperty","value","default","_createSvgIcon","_jsxRuntime","_default","jsx","d","ChatButtonSort","props","theme","isReverseSort","setIsReverseSort","isShowAll","isShowMembers","className","cn","s","buttonSortWrap","buttonSort","buttonSortNotShowMembers","Button","onClick","disabled","startIcon","style","fontSize","marginBottom","padding","color","getMessages","state","chatPage","messages","getChatMembers","filter","index","array","findIndex","item","userId","getStatusWS","statusWS","TitleMembers","setIsShowMembers","handleClickTitle","visuallyHidden","onChange","inputHiddenBeforeFolding","titleWrap","elementInteractive","titleWrapDeployed","title","titleArrow","ButtonShowAll","chatMembers","setIsShowAll","length","buttonShowAllWrap","type","buttonShowAll","ChatMembers","useAppSelector","itemsCount","hidden","container","members","notShowMembers","slice","sort","a","b","userName","localeCompare","map","u","member","Avatar","photo","size","id","wrapName","Name","name","ChatMessage","message","myID","getAuthorizedUserID","messageContainer","myMessageContainer","avatar_size_medium","avatar_size_small","nameAndMessage","memo","ChatMessages","lastElement","useRef","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","onScroll","e","el","currentTarget","scrollButton","scrollHeight","scrollTop","clientHeight","Math","abs","m","trim","NoElement","elements","writeSomething","ref","AddMessageForm","status","dispatch","useAppDispatch","setMessage","wrapForm","form","TextField","placeholder","fullWidth","variant","inputProps","maxLength","IconButton","margin","sendMessage","withAuthRedirect","getTheme","startMessagesListening","stopMessagesListening","chat","membersAndMessages"],"mappings":"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","file":"static/js/5.334a7c3b.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\n\ntype HookType = () => number\n\nconst useResizeWindow: HookType = () => {\n  const [widthScreen, setWidthScreen] = useState(window.innerWidth)\n\n  useEffect(() => {\n    const handleResizeWindow = () => setWidthScreen(window.innerWidth)\n\n    window.addEventListener('resize', handleResizeWindow)\n\n    return () => {\n      window.removeEventListener('resize', handleResizeWindow)\n    }\n  }, [widthScreen, setWidthScreen])\n\n  return widthScreen\n}\n\nexport default useResizeWindow\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat\":\"Chat_chat__1rEwv\",\"membersAndMessages\":\"Chat_membersAndMessages__2ItM4\",\"form\":\"Chat_form__Fkn99\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ChatMembers_container__e_-rU\",\"visuallyHidden\":\"ChatMembers_visuallyHidden__3uaU0\",\"elementInteractive\":\"ChatMembers_elementInteractive__3vDh8\",\"inputHiddenBeforeFolding\":\"ChatMembers_inputHiddenBeforeFolding__RXHe1\",\"titleWrap\":\"ChatMembers_titleWrap__2uSSk\",\"title\":\"ChatMembers_title__ZYl8G\",\"titleArrow\":\"ChatMembers_titleArrow__1OZGL\",\"members\":\"ChatMembers_members__ulC2j\",\"member\":\"ChatMembers_member__3F1wG\",\"wrapName\":\"ChatMembers_wrapName__nfvvz\",\"buttonShowAllWrap\":\"ChatMembers_buttonShowAllWrap__T-zs6\",\"buttonShowAll\":\"ChatMembers_buttonShowAll__3S5vv\",\"notShowMembers\":\"ChatMembers_notShowMembers__14IbE\",\"titleWrapDeployed\":\"ChatMembers_titleWrapDeployed__Ujnk5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonSortWrap\":\"ChatButtonSort_buttonSortWrap__iGn4h\",\"buttonSortNotShowMembers\":\"ChatButtonSort_buttonSortNotShowMembers__YqxJ0\",\"buttonSort\":\"ChatButtonSort_buttonSort__2ekxv\"};","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"m7 14 5-5 5 5z\"\n}), 'ArrowDropUp');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"m7 10 5 5 5-5z\"\n}), 'ArrowDropDown');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M7.41 8.59 12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\"\n}), 'KeyboardArrowDown');\n\nexports.default = _default;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ChatMessages_container__FHgFA\",\"visuallyHidden\":\"ChatMessages_visuallyHidden__1zqjT\",\"elementInteractive\":\"ChatMessages_elementInteractive__1PZ8K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myMessageContainer\":\"ChatMessage_myMessageContainer__1mzJy\",\"messageContainer\":\"ChatMessage_messageContainer__cksYS\",\"message\":\"ChatMessage_message__1_CEE\",\"nameAndMessage\":\"ChatMessage_nameAndMessage__1_LdY\",\"avatar_size_medium\":\"ChatMessage_avatar_size_medium__1w73R\",\"avatar_size_small\":\"ChatMessage_avatar_size_small__2gXJg\"};","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M2.01 21 23 12 2.01 3 2 10l15 2-15 2z\"\n}), 'Send');\n\nexports.default = _default;","import React, { Dispatch, SetStateAction } from 'react'\n\nimport cn from 'classnames'\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown'\nimport ArrowDropUpIcon from '@mui/icons-material/ArrowDropUp'\nimport { Button } from '@mui/material'\nimport s from './ChatButtonSort.module.scss'\n\nimport { ThemeType } from '../../../../types/types'\n\ntype PropsType = {\n  theme: ThemeType\n  isShowAll: boolean\n  isShowMembers: boolean\n  isReverseSort: boolean\n  setIsReverseSort: Dispatch<SetStateAction<boolean>>\n}\n\nconst ChatButtonSort: React.FC<PropsType> = (props) => {\n  const { theme, isReverseSort, setIsReverseSort, isShowAll, isShowMembers } =\n    props\n\n  const stylesSortByName: React.CSSProperties = {\n    fontSize: '10px',\n    marginBottom: '5px',\n    padding: '3px 10px 3px 7px',\n  }\n\n  const handleClick = () =>\n    isReverseSort ? setIsReverseSort(false) : setIsReverseSort(true)\n\n  return (\n    <div\n      className={cn(\n        s.buttonSortWrap,\n        { [s.buttonSort]: isShowMembers },\n        { [s.buttonSortNotShowMembers]: !isShowMembers }\n      )}\n    >\n      <Button\n        onClick={handleClick}\n        disabled={!isShowAll}\n        startIcon={isReverseSort ? <ArrowDropUpIcon /> : <ArrowDropDownIcon />}\n        style={stylesSortByName}\n        color={theme === 'theme1' ? 'primary' : 'secondary'}\n      >\n        sort by name\n      </Button>\n    </div>\n  )\n}\n\nexport default ChatButtonSort\n","import { RootStateType } from '../store'\n\nexport const getMessages = (state: RootStateType) => state.chatPage.messages\n\nexport const getChatMembers = (state: RootStateType) =>\n  state.chatPage.messages.filter((value, index, array) =>\n    array.findIndex((item) => item.userId === value.userId) === index\n      ? value\n      : null\n  )\n\nexport const getStatusWS = (state: RootStateType) => state.chatPage.statusWS\n","import React, { Dispatch, SetStateAction, useState } from 'react'\n\nimport cn from 'classnames'\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown'\nimport s from './ChatMembers.module.scss'\n\nimport ChatButtonSort from './ChatButtonSort/ChatBurronSort'\nimport Avatar from '../../../components/Avatar/Avatar'\nimport Name from '../../../components/Name/Name'\nimport useResizeWindow from '../../../services/hooks/useResizeWindow'\nimport { useAppSelector } from '../../../services/hooks/useApp'\n\nimport { getChatMembers } from '../../../store/selectors/chat-selectors'\nimport {\n  ChatMessageAPIType,\n  ChatMessageType,\n  ThemeType,\n} from '../../../types/types'\n\nconst ChatMembers: React.FC<{ theme: ThemeType }> = ({ theme }) => {\n  const chatMembers = useAppSelector(getChatMembers)\n\n  const [isShowAll, setIsShowAll] = useState(false)\n  const [isReverseSort, setIsReverseSort] = useState(false)\n  const [isShowMembers, setIsShowMembers] = useState(false)\n\n  const itemsCount = isShowAll ? chatMembers.length : 2\n\n  const sortMembers = (a: ChatMessageType, b: ChatMessageType): number =>\n    isReverseSort\n      ? b.userName.localeCompare(a.userName)\n      : a.userName.localeCompare(b.userName)\n\n  return (\n    <section hidden={!chatMembers.length} className={s.container}>\n      <TitleMembers\n        isShowMembers={isShowMembers}\n        setIsShowMembers={setIsShowMembers}\n      />\n\n      <ChatButtonSort\n        theme={theme}\n        isShowAll={isShowAll}\n        isShowMembers={isShowMembers}\n        isReverseSort={isReverseSort}\n        setIsReverseSort={setIsReverseSort}\n      />\n\n      <div\n        className={cn(\n          { [s.members]: isShowMembers },\n          { [s.notShowMembers]: !isShowMembers }\n        )}\n      >\n        {chatMembers &&\n          [...chatMembers]\n            .slice(0, itemsCount)\n            .sort(sortMembers)\n            .map((u: ChatMessageAPIType) => (\n              <div className={s.member} key={u.userId}>\n                <Avatar photo={u.photo} size='small' id={u.userId} />\n\n                <div className={s.wrapName}>\n                  <Name id={u.userId} name={u.userName} size='small' />\n                </div>\n              </div>\n            ))}\n\n        <ButtonShowAll\n          chatMembers={chatMembers}\n          isShowAll={isShowAll}\n          setIsShowAll={setIsShowAll}\n        />\n      </div>\n    </section>\n  )\n}\n\ntype TitleMembersPropsType = {\n  isShowMembers: boolean\n  setIsShowMembers: Dispatch<SetStateAction<boolean>>\n}\n\nconst TitleMembers: React.FC<TitleMembersPropsType> = ({\n  isShowMembers,\n  setIsShowMembers,\n}) => {\n  const widthScreen = useResizeWindow()\n\n  const handleClickTitle = () => {\n    if (widthScreen <= 760) {\n      if (isShowMembers) {\n        setIsShowMembers(false)\n      } else {\n        setIsShowMembers(true)\n      }\n    }\n  }\n\n  return (\n    <>\n      <h1 className={s.visuallyHidden}>Chat members</h1>\n      {/* outer div and input for keyboard operation */}\n      <div aria-hidden='true' onChange={handleClickTitle}>\n        <input className={cn(s.visuallyHidden, s.inputHiddenBeforeFolding)} />\n        <div\n          aria-hidden='true'\n          className={cn(s.titleWrap, s.elementInteractive, {\n            [s.titleWrapDeployed]: isShowMembers,\n          })}\n          onClick={handleClickTitle}\n        >\n          <h1 className={s.title}>Members</h1>\n          <span className={s.titleArrow}>\n            <KeyboardArrowDownIcon fontSize='small' />\n          </span>\n        </div>\n      </div>\n    </>\n  )\n}\n\ntype ButtonShowAllPropsType = {\n  chatMembers: ChatMessageType[]\n  isShowAll: boolean\n  setIsShowAll: Dispatch<SetStateAction<boolean>>\n}\n\nconst ButtonShowAll: React.FC<ButtonShowAllPropsType> = ({\n  chatMembers,\n  isShowAll,\n  setIsShowAll,\n}) => {\n  return (\n    <>\n      {chatMembers.length > 2 && !isShowAll ? (\n        <div className={s.buttonShowAllWrap}>\n          <button\n            type='button'\n            className={s.buttonShowAll}\n            onClick={() => setIsShowAll(true)}\n          >\n            show all {chatMembers.length} ...\n          </button>\n        </div>\n      ) : (\n        ''\n      )}\n    </>\n  )\n}\n\nexport default ChatMembers\n","import React, { memo } from 'react'\n\nimport cn from 'classnames'\nimport s from './ChatMessage.module.scss'\n\nimport Avatar from '../../../../components/Avatar/Avatar'\nimport Name from '../../../../components/Name/Name'\nimport { useAppSelector } from '../../../../services/hooks/useApp'\n\nimport { getAuthorizedUserID } from '../../../../store/selectors/auth-selectors'\n\nimport { ChatMessageAPIType } from '../../../../types/types'\n\nconst ChatMessage: React.FC<{ message: ChatMessageAPIType }> = ({\n  message: { userId, photo, userName, message },\n}) => {\n  const myID = useAppSelector(getAuthorizedUserID)\n\n  return (\n    <article\n      className={cn(s.messageContainer, {\n        [s.myMessageContainer]: myID === userId,\n      })}\n    >\n      <div className={s.avatar_size_medium}>\n        <Avatar photo={photo} size='medium' id={userId} />\n      </div>\n      <div hidden className={s.avatar_size_small}>\n        <Avatar photo={photo} size='small' id={userId} />\n      </div>\n\n      <div className={s.nameAndMessage}>\n        <Name id={userId} name={userName} />\n        <div className={s.message}>{message}</div>\n      </div>\n    </article>\n  )\n}\n\nexport default memo(ChatMessage)\n","import React, { useEffect, useRef, useState, memo } from 'react'\n\nimport s from './ChatMessages.module.scss'\n\nimport ChatMessage from './ChatMessage/ChatMessage'\nimport NoElement from '../../../components/NoElement/NoElement'\nimport { useAppSelector } from '../../../services/hooks/useApp'\n\nimport { getMessages } from '../../../store/selectors/chat-selectors'\n\nimport { ChatMessageType } from '../../../types/types'\n\nconst ChatMessages: React.FC = () => {\n  const messages = useAppSelector(getMessages)\n  const lastElement = useRef<HTMLDivElement>(null)\n  const [isAutoScroll, setIsAutoScroll] = useState(true)\n\n  const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {\n    const el = e.currentTarget\n    const scrollButton = el.scrollHeight - el.scrollTop - el.clientHeight\n\n    if (Math.abs(scrollButton) < 1) {\n      if (!isAutoScroll) setIsAutoScroll(true)\n    } else if (isAutoScroll) setIsAutoScroll(false)\n  }\n\n  useEffect(() => {\n    if (isAutoScroll) {\n      lastElement.current?.scrollIntoView({ behavior: 'smooth' })\n    }\n  }, [messages, isAutoScroll])\n\n  return (\n    <section className={s.container} onScroll={handleScroll}>\n      <h1 className={s.visuallyHidden}>Chat messages</h1>\n      {messages.length ? (\n        messages\n          .filter((m: ChatMessageType) => m.message.trim().length > 0)\n          .map((m: ChatMessageType) => <ChatMessage key={m.id} message={m} />)\n      ) : (\n        <NoElement elements='messages' writeSomething />\n      )}\n      <div ref={lastElement} />\n    </section>\n  )\n}\n\nexport default memo(ChatMessages)\n","import React, { useEffect, useState } from 'react'\n\nimport IconButton from '@mui/material/IconButton'\nimport SendIcon from '@mui/icons-material/Send'\nimport { TextField } from '@mui/material'\nimport s from './Chat.module.scss'\n\nimport ChatMembers from './ChatMembers/ChatMembers'\nimport ChatMessages from './ChatMessages/ChatMessages'\nimport withAuthRedirect from '../../services/hoc/withAuthRedirect'\nimport { useAppDispatch, useAppSelector } from '../../services/hooks/useApp'\n\nimport { getTheme } from '../../store/selectors/app-selectors'\nimport { getStatusWS } from '../../store/selectors/chat-selectors'\nimport {\n  sendMessage,\n  startMessagesListening,\n  stopMessagesListening,\n} from '../../store/reducers/chat-reducer'\n\nimport { StatusWSType, ThemeType } from '../../types/types'\n\nconst Chat: React.FC = () => {\n  const status = useAppSelector(getStatusWS)\n  const theme = useAppSelector(getTheme)\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(startMessagesListening())\n    return () => {\n      dispatch(stopMessagesListening())\n    }\n  }, [dispatch])\n\n  return (\n    <main className={s.chat}>\n      {status === 'error' && (\n        <div>Some error occured. Please, refresh the page...</div>\n      )}\n      <div className={s.membersAndMessages}>\n        <ChatMessages />\n        <ChatMembers theme={theme} />\n      </div>\n      <AddMessageForm theme={theme} status={status} />\n    </main>\n  )\n}\n\ntype FormPropsType = {\n  theme: ThemeType\n  status: StatusWSType\n}\n\nconst AddMessageForm: React.FC<FormPropsType> = ({ theme, status }) => {\n  const dispatch = useAppDispatch()\n  const [message, setMessage] = useState('')\n\n  const handleSendMessage = () => {\n    if (!message.trim()) {\n      return\n    }\n    dispatch(sendMessage(message))\n    setMessage('')\n  }\n\n  const handleChangeInput = (e: React.ChangeEvent<HTMLInputElement>) =>\n    setMessage(e.currentTarget.value)\n\n  return (\n    <div className={s.wrapForm}>\n      <div className={s.form}>\n        <TextField\n          name='newMessageText'\n          placeholder='Enter your message...'\n          fullWidth\n          variant='outlined'\n          inputProps={{ maxLength: 100 }}\n          color={theme === 'theme1' ? 'primary' : 'secondary'}\n          onChange={handleChangeInput}\n          value={message}\n        />\n        <IconButton\n          title='Send message'\n          color={theme === 'theme1' ? 'primary' : 'secondary'}\n          style={{ margin: '5px' }}\n          onClick={handleSendMessage}\n          disabled={status === 'pending'}\n          size='large'\n        >\n          <SendIcon />\n        </IconButton>\n      </div>\n    </div>\n  )\n}\n\nexport default withAuthRedirect(Chat)\n"],"sourceRoot":""}