{"version":3,"sources":["App.module.scss","img/no_photo.svg","img/preloader/preloaderTheme1.svg","img/preloader/preloaderTheme2.svg","components/common/Preloader/Preloader.tsx","components/common/hoc/withAuthRedirect.tsx","api/api.ts","api/users-api.ts","redux/reducers/users-reducer.ts","api/chat-api.ts","redux/reducers/chat-reducer.ts","components/common/ElementCustom/renderTextField.module.scss","components/Profile/Info/InfoData/InfoData.module.scss","redux/selectors/app-selectors.ts","components/Navbar/Navbar.module.scss","components/Profile/Wall/Post/Post.module.scss","redux/selectors/auth-selectors.ts","api/profile-api.ts","redux/reducers/profile-reducer.ts","components/common/ElementCustom/renderTextField.jsx","redux/selectors/profile-selectors.ts","components/Profile/Wall/Post/Post.tsx","components/Profile/Wall/Wall.tsx","img/icons/camera.svg","components/Profile/Info/Status/stylesCustomMaterialUI.jsx","components/Profile/Info/Status/Status.tsx","components/common/FieldWithCounter/FieldWithCounter.tsx","components/common/ElementCustom/renderCheckbox.jsx","components/Profile/Info/InfoDataForm/InfoDataForm.tsx","components/Profile/Info/InfoData/InfoData.tsx","components/Profile/Info/InfoContainer.tsx","components/Profile/ProfileContainer.tsx","img/preloader/preloaderStart.svg","components/common/Preloader/PreloaderStart.tsx","img/icons/logo.svg","api/auth-api.ts","api/security-api.ts","redux/reducers/auth-reducer.ts","redux/reducers/app-reducer.ts","components/Header/Header.tsx","components/Navbar/Navbar.tsx","components/Login/Login.tsx","components/Error/ErrorBoundary.jsx","components/common/hoc/withSuspense.tsx","App.tsx","redux/redux-store.ts","index.tsx","components/Profile/Info/InfoDataForm/InfoDataForm.module.scss","components/Header/Header.module.scss","components/Login/Login.module.scss","components/common/FieldWithCounter/FieldWithCounter.module.scss","components/Profile/Info/InfoContainer.module.scss","components/Profile/Info/Status/Status.module.scss","components/Profile/Wall/Wall.module.scss","components/common/Avatar/Avatar.tsx","components/common/Preloader/Preloader.module.scss","components/common/Avatar/Avatar.module.scss"],"names":["module","exports","Preloader","theme","useSelector","getTheme","className","s","container","wrap","src","preloaderTheme1","preloaderTheme2","alt","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","ResultCodesEnum","ResultCodeForCaptcha","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","term","friend","get","response","data","followUser","id","post","unfollowUser","delete","initialState","users","totalUsersCount","isFetching","followingInProgress","actions","followSuccess","userID","type","unfollowSuccess","setUsers","addUsers","setTotalUsersCount","count","clearUsers","toggleIsFetching","toggleFollowingProgress","page","dispatch","getState","a","usersPage","length","items","totalCount","_followUnfollowFlow","apiMethod","actionCreator","resultCode","Success","follow","bind","unfollow","usersReducer","action","map","u","followed","filter","ws","subscribers","notifySubscribersAboutStatus","status","forEach","reconnect","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","openHandler","errorHandler","console","error","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","message","send","messages","payload","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","stopMessagesListening","sendMessage","chatReducer","m","v1","item","index","array","getInitialized","app","initialized","getLogin","login","getIsAuth","getAuthorizedUserID","getCaptchaURL","captchaURL","getMyPhoto","myPhoto","profileAPI","getProfile","getStatus","updateStatus","put","savePhotoAPI","photoFile","formData","FormData","append","saveProfileAPI","profile","posts","author","idPost","likesCount","isLikeClick","postsForDelete","isSelectedPost","isClickDeleteSelectedPosts","showSuccessSave","errorProfileContacts","isEditModeProfile","isEditInputProfileForm","initializePosts","addPost","newPostText","deletePost","setLikeOnPost","deletetLikeOnPost","setPostForDeleting","deletePostForDeleting","clearPostsForDelete","toggleIsSelectedPost","bool","toggleIsClickDeleteSelectedPosts","setUserProfile","setStatus","savePhotoSuccess","photos","showSuccessSaveProfile","showErrorProfileContacts","setEditModeProfile","setEditInputProfileForm","getUserProfile","userId","profileReducer","newPost","fullName","p","RenderTextField","label","input","placeholder","multiline","variant","inputProps","onInput","onFocus","meta","touched","warning","fullWidth","custom","TextField","color","profilePage","getShowSuccessSave","getErrorProfileContacts","getPosts","getPostsForDelete","getToggleClickDeleteSelectedPosts","getIsSelectedPost","getEditModeProfile","getEditInputProfileForm","Post","photo","handleDeleteOnePost","addIdPostBeforeDeleting","deleteIdPostBeforeDeleting","useState","isClickDeletePost","setIsClickDeletePost","isSelectedPostLocal","setIsSelectedPostLocal","useDispatch","cn","postContainer","postDelete","includes","columnLeft","aria-hidden","avatar","postSelectedTheme1","postSelectedTheme2","onClick","Avatar","unknown","size","columnCenter","name","columnRight","hidden","IconButton","aria-label","wrapLike","like","noLike","PostReduxForm","reduxForm","form","handleSubmit","onSubmit","Field","component","renderTextField","maxLength","buttonBig","Button","style","margin","width","endIcon","buttonIcon","Wall","React","useEffect","arr","localStorage","getItem","setItem","stringify","postsElements","basket","height","startIcon","values","reset","noPosts","useStyles","makeStyles","borderRadius","padding","spacing","minHeight","lineHeight","backgroundColor","Status","isOwner","classes","editMode","setEditMode","isEditInputStatusForm","setIsEditInputStatusForm","statusLocal","setStatusLocal","isHiddenCounter","setIsHiddenCounter","setCount","ref","statusRef","useRef","handleClickOutside","event","current","contains","target","document","Input","value","autoFocus","select","onBlur","onChange","currentTarget","buttons","buttonWrap","disabled","stylesField","countHidden","countYellow","countRed","plug","noStatus","statusNotMy","FieldWithCounter","handleOnEditInputForm","position","RenderCheckbox","FormControlLabel","control","Checkbox","checked","labelPlacement","marginLeft","InfoDataForm","initialValues","handleEditInputProfileForm","titleForm","renderCheckbox","titleAllContacts","Object","keys","contacts","key","contact","titleContact","Contact","memo","contactTitle","contactValue","contactTextWrap","contactText","href","replace","InfoData","containerForm","aboutMe","title","text","job","lookingForAJob","lookingForAJobDescription","some","el","ScrollToTopOnMount","getElementById","scrollIntoView","InfoContainer","stylesSaveAndCancelButton","fontSize","containerMain","large","camera","htmlFor","wrapImg","file","files","marginTop","buttonsSaveAndCancelProfile","submit","successSave","Error","saveProfileThunk","ProfileContainer","this","refreshProfile","prevProps","match","params","authorizedUserID","history","PureComponent","compose","withRouter","PreloaderStart","preloaderStart","authAPI","me","email","password","rememberMe","captcha","logout","securityAPI","getAuthUserDataThunk","stopSubmit","_error","myProfile","loginThunk","CaptchaIsRequired","url","logoutThunk","authReducer","appReducer","ButtonChangeTheme","themeLocal","setThemeLocal","toggleTheme","buttonThemeDesctop","marginRight","buttonThemeMobile","Header","myID","colors","cyan","cyanLight","cyanMedium","cyanDark","darkBlue","darkBlueTransparent","i","body","setProperty","themeFromLocalStorage","header","logoAndTitle","logo","headerTitleDesctop","headerTitleMobile","rightColumn","loginAndPhoto","loginName","buttonLogoutDesctop","buttonLogoutMobile","IconProfile","pathname","profileUrl","viewBox","navLinkImg","activeIcon","d","IconChat","IconUsers","IconFriends","location","nav","exact","activeClassName","active","navLink","LoginReduxForm","validate","errors","test","loginBlockSubstrate","loginBlock","row","rowCheckbox","fontWeight","formError","marginBottom","Login","ErrorBoundary","setState","children","whiteSpace","toString","Component","withSuspense","fallback","ChatContainer","lazy","UsersContainer","SuspendedChat","SuspendedUsers","AppContainer","fon","appWrapper","appWrapperContent","from","path","render","rootReducer","combineReducers","formReducer","chat","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","createMuiTheme","palette","primary","main","secondary","responsiveFontSizes","ReactDOM","ThemeProvider","CssBaseline","photoTrue","avatarWrap","medium","small"],"mappings":"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","file":"static/js/main.18292779.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"fon\":\"App_fon__2Avml\",\"container\":\"App_container__3kpCf\",\"appWrapper\":\"App_appWrapper__1cqFv\",\"appWrapperContent\":\"App_appWrapperContent__1OUHu\"};","export default __webpack_public_path__ + \"static/media/no_photo.8bf0768a.svg\";","export default __webpack_public_path__ + \"static/media/preloaderTheme1.364be474.svg\";","export default __webpack_public_path__ + \"static/media/preloaderTheme2.6aed94f2.svg\";","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nimport preloaderTheme1 from '../../../img/preloader/preloaderTheme1.svg'\nimport preloaderTheme2 from '../../../img/preloader/preloaderTheme2.svg'\nimport s from './Preloader.module.scss'\n\nimport { getTheme } from '../../../redux/selectors/app-selectors'\n\nconst Preloader: React.FC = () => {\n  const theme = useSelector(getTheme)\n\n  return (\n    <div className={s.container}>\n      <div className={s.wrap}>\n        <img\n          src={theme === 'theme1' ? preloaderTheme1 : preloaderTheme2}\n          alt='preloader'\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default Preloader\n","import React from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { AppStateType } from '../../../redux/redux-store'\n\nconst mapStateToPropsForRedirect = (state: AppStateType) => ({\n  isAuth: state.auth.isAuth,\n})\n\ntype MapStatePropsType = {\n  isAuth: boolean\n}\n\n// WCP - пропсы WrappedComponent\nexport default function withAuthRedirect<WCP>(\n  WrappedComponent: React.ComponentType<WCP>\n) {\n  const RedirectComponent: React.FC<MapStatePropsType & unknown> = (props) => {\n    const { isAuth, ...restProps } = props\n\n    if (!isAuth) return <Redirect to='/login' />\n\n    return <WrappedComponent {...(restProps as WCP)} />\n  }\n\n  return connect<MapStatePropsType, never, WCP, AppStateType>(\n    mapStateToPropsForRedirect\n  )(RedirectComponent)\n}\n","import axios from 'axios'\n\nexport const instance = axios.create({\n  withCredentials: true, // цепляем cookie к запросу\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n  headers: {\n    'API-KEY': 'ddfbc45b-6923-498e-99d5-3a4897cbb31f',\n  },\n})\n\nexport enum ResultCodesEnum {\n  Success = 0,\n  Error = 1,\n}\n\nexport enum ResultCodeForCaptcha {\n  CaptchaIsRequired = 10,\n}\n\nexport type DefaultResponseType<D = never, RC = ResultCodesEnum> = {\n  data: D\n  resultCode: RC\n  messages: Array<string> | string\n}\n","import { UserType } from '../types/types'\nimport { DefaultResponseType, instance } from './api'\n\ntype GetUsersType = {\n  items: Array<UserType>\n  totalCount: number\n  error: string\n}\n\nconst usersAPI = {\n  async getUsers(\n    currentPage = 1,\n    pageSize: number,\n    term?: string,\n    friend?: boolean\n  ) {\n    const response = await instance.get<GetUsersType>(\n      `users?page=${currentPage}&count=${pageSize}&term=${term}&friend=${friend}`\n    )\n    return response.data\n  },\n  async followUser(id: number) {\n    const response = await instance.post<DefaultResponseType>(\n      `follow/${id}`,\n      {}\n    )\n    return response.data\n  },\n  async unfollowUser(id: number) {\n    const response = await instance.delete<DefaultResponseType>(`follow/${id}`)\n    return response.data\n  },\n}\n\nexport default usersAPI\n","import { Dispatch } from 'redux'\nimport { DefaultResponseType, ResultCodesEnum } from '../../api/api'\nimport usersAPI from '../../api/users-api'\nimport { UserType } from '../../types/types'\nimport { BaseThunkType, InferActionsTypes } from '../redux-store'\n\nconst initialState = {\n  users: [] as Array<UserType>,\n\n  pageSize: 10,\n  totalUsersCount: 0,\n\n  isFetching: true,\n  // disabling the button after pressing\n  followingInProgress: [] as Array<number>, // array of users ID\n}\n\nconst usersReducer = (\n  state = initialState,\n  action: ActionsTypes\n): InitialStateType => {\n  switch (action.type) {\n    case 'FOLLOW': {\n      return {\n        ...state,\n        users: state.users.map((u) => {\n          if (u.id === action.userID) {\n            return { ...u, followed: true }\n          }\n          return u\n        }),\n      }\n    }\n    case 'UNFOLLOW': {\n      return {\n        ...state,\n        users: state.users.map((u) => {\n          if (u.id === action.userID) {\n            return { ...u, followed: false }\n          }\n          return u\n        }),\n      }\n    }\n    case 'SET_USERS': {\n      return {\n        ...state,\n        users: [...action.users],\n      }\n    }\n    case 'ADD_USERS': {\n      return {\n        ...state,\n        users: [...state.users, ...action.users],\n      }\n    }\n    case 'CLEAR_USERS': {\n      return {\n        ...state,\n        users: [],\n      }\n    }\n    case 'SET_TOTAL_USERS_COUNT': {\n      return {\n        ...state,\n        totalUsersCount: action.count,\n      }\n    }\n    case 'TOGGLE_IS_FETCHING': {\n      return {\n        ...state,\n        isFetching: action.isFetching,\n      }\n    }\n    case 'TOGGLE_IS_FOLLOWING_PROGRESS': {\n      return {\n        ...state,\n        followingInProgress: action.isFetching\n          ? [...state.followingInProgress, action.userID]\n          : state.followingInProgress.filter((id) => id !== action.userID),\n      }\n    }\n    default:\n      return state\n  }\n}\n\nexport const actions = {\n  followSuccess: (userID: number) => ({ type: 'FOLLOW', userID } as const),\n  unfollowSuccess: (userID: number) => ({ type: 'UNFOLLOW', userID } as const),\n\n  setUsers: (users: Array<UserType>) => ({ type: 'SET_USERS', users } as const),\n  addUsers: (users: Array<UserType>) => ({ type: 'ADD_USERS', users } as const),\n  setTotalUsersCount: (totalUsersCount: number) =>\n    ({\n      type: 'SET_TOTAL_USERS_COUNT',\n      count: totalUsersCount,\n    } as const),\n  clearUsers: () => ({ type: 'CLEAR_USERS' } as const),\n\n  toggleIsFetching: (isFetching: boolean) =>\n    ({ type: 'TOGGLE_IS_FETCHING', isFetching } as const),\n  toggleFollowingProgress: (isFetching: boolean, userID: number) =>\n    ({\n      type: 'TOGGLE_IS_FOLLOWING_PROGRESS',\n      isFetching,\n      userID,\n    } as const),\n}\n\nexport const getUsers =\n  (page: number, term: string, friend?: boolean): ThunkType =>\n  async (dispatch, getState) => {\n    dispatch(actions.toggleIsFetching(true))\n\n    const response = await usersAPI.getUsers(\n      page,\n      getState().usersPage.pageSize,\n      term,\n      friend\n    )\n\n    // первичная загрузка\n    if (term.length === 0 && page === 1) {\n      dispatch(actions.setUsers(response.items))\n    }\n    // получение больше пользователей\n    if (page > 1) {\n      dispatch(actions.addUsers(response.items))\n    }\n    // первичный поиск\n    if (term.length > 0 && page === 1) {\n      dispatch(actions.clearUsers())\n      dispatch(actions.setUsers(response.items))\n    }\n\n    dispatch(actions.setTotalUsersCount(response.totalCount))\n    dispatch(actions.toggleIsFetching(false))\n  }\n\ntype DispatchType = Dispatch<ActionsTypes>\nconst _followUnfollowFlow = async (\n  dispatch: DispatchType,\n  id: number,\n  apiMethod: (id: number) => Promise<DefaultResponseType>,\n  actionCreator: (id: number) => ActionsTypes\n) => {\n  dispatch(actions.toggleFollowingProgress(true, id))\n  const response = await apiMethod(id)\n\n  if (response.resultCode === ResultCodesEnum.Success) {\n    dispatch(actionCreator(id))\n  }\n  dispatch(actions.toggleFollowingProgress(false, id))\n}\n\nexport const follow =\n  (id: number): ThunkType =>\n  async (dispatch) => {\n    await _followUnfollowFlow(\n      dispatch,\n      id,\n      usersAPI.followUser.bind(usersAPI),\n      actions.followSuccess\n    )\n  }\n\nexport const unfollow =\n  (id: number): ThunkType =>\n  async (dispatch) => {\n    await _followUnfollowFlow(\n      dispatch,\n      id,\n      usersAPI.unfollowUser.bind(usersAPI),\n      actions.unfollowSuccess\n    )\n  }\n\nexport default usersReducer\n\nexport type InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>\n","let ws: WebSocket | null = null\n\nlet subscribers = {\n  'messages-received': [] as Array<MessagesReceivedSubscriberType>,\n  'status-changed': [] as Array<StatusChangedSubscriberType>,\n}\n\ntype EventsCustomNamesType = 'messages-received' | 'status-changed'\n\nconst notifySubscribersAboutStatus = (status: StatusType) => {\n  if (subscribers) {\n    subscribers['status-changed'].forEach((s) => s(status))\n  }\n}\n\nconst reconnect = () => {\n  notifySubscribersAboutStatus('pending')\n  setTimeout(createChannel, 3000)\n}\n\nconst messageHandler = (e: MessageEvent) => {\n  const newMessages = JSON.parse(e.data)\n  if (subscribers) {\n    subscribers['messages-received'].forEach((s) => s(newMessages))\n  }\n}\n\nconst openHandler = () => {\n  notifySubscribersAboutStatus('ready')\n}\n\nconst errorHandler = () => {\n  notifySubscribersAboutStatus('error')\n  // eslint-disable-next-line no-console\n  console.error('REFRESH PAGE')\n}\n\nconst cleanUp = () => {\n  ws?.removeEventListener('close', reconnect)\n  ws?.removeEventListener('message', messageHandler)\n  ws?.removeEventListener('open', openHandler)\n  ws?.removeEventListener('error', errorHandler)\n}\n\nfunction createChannel() {\n  cleanUp()\n  ws?.close()\n\n  ws = new WebSocket(\n    'wss://social-network.samuraijs.com/handlers/ChatHandler.ashx'\n  )\n\n  notifySubscribersAboutStatus('pending')\n\n  ws.addEventListener('close', reconnect)\n  ws.addEventListener('message', messageHandler)\n  ws.addEventListener('open', openHandler)\n  ws.addEventListener('error', errorHandler)\n}\n\nexport const chatAPI = {\n  start() {\n    createChannel()\n  },\n  stop() {\n    if (subscribers) {\n      subscribers['messages-received'] = []\n      subscribers['status-changed'] = []\n    }\n    cleanUp()\n    ws?.close()\n  },\n  subscribe(\n    eventName: EventsCustomNamesType,\n    callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType\n  ) {\n    if (subscribers) {\n      // @ts-ignore\n      subscribers[eventName].push(callback)\n    }\n  },\n\n  // отписка (забираем возможность api уведомлять store)\n  unsubscribe(\n    eventName: EventsCustomNamesType,\n    callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType\n  ) {\n    if (subscribers) {\n      // @ts-ignore\n      subscribers = subscribers[eventName]?.filter((s) => s !== callback)\n      // оставляем всех, кроме callback\n    }\n  },\n\n  sendMessage(message: string) {\n    ws?.send(message)\n  },\n}\n\nexport type ChatMessageAPIType = {\n  message: string\n  photo: string\n  userId: number\n  userName: string\n}\n\nexport type StatusType = 'pending' | 'ready' | 'error'\n\ntype MessagesReceivedSubscriberType = (\n  messages: Array<ChatMessageAPIType>\n) => void\n\ntype StatusChangedSubscriberType = (status: StatusType) => void\n","import { FormAction } from 'redux-form'\nimport { Dispatch } from 'redux'\nimport { v1 } from 'uuid'\nimport { BaseThunkType, InferActionsTypes } from '../redux-store'\nimport { chatAPI, ChatMessageAPIType, StatusType } from '../../api/chat-api'\n\nexport type ChatMessageType = ChatMessageAPIType & { id: string }\n\nconst initialState = {\n  messages: [] as ChatMessageType[],\n  status: 'pending' as StatusType,\n}\n\nconst chatReducer = (\n  state = initialState,\n  action: ActionsTypes\n): InitialStateType => {\n  switch (action.type) {\n    case 'MESSAGES_RECEIVED': {\n      return {\n        ...state,\n        messages: [\n          ...state.messages,\n          ...action.payload.messages.map((m) => ({ ...m, id: v1() })),\n        ].filter((item, index, array) => index >= array.length - 100),\n        // TODO v1() - вызов не чистой функции\n      }\n    }\n    case 'STATUS_CHANGED': {\n      return {\n        ...state,\n        status: action.payload.status,\n      }\n    }\n    default:\n      return state\n  }\n}\n\nconst actions = {\n  messagesReceived: (messages: ChatMessageAPIType[]) =>\n    ({\n      type: 'MESSAGES_RECEIVED',\n      payload: { messages },\n    } as const),\n  statusChanged: (status: StatusType) =>\n    ({\n      type: 'STATUS_CHANGED',\n      payload: { status },\n    } as const),\n}\n\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\n  // чтобы два раза не вызывалась одна и та же функция,\n  // сначала при подписке, потом при отписке\n  if (_newMessageHandler === null) {\n    _newMessageHandler = (messages) => {\n      dispatch(actions.messagesReceived(messages))\n    }\n  }\n  return _newMessageHandler\n}\n\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\n  // чтобы два раза не вызывалась одна и та же функция,\n  // сначала при подписке, потом при отписке\n  if (_statusChangedHandler === null) {\n    _statusChangedHandler = (status) => {\n      dispatch(actions.statusChanged(status))\n    }\n  }\n  return _statusChangedHandler\n}\n\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\n  chatAPI.start()\n  chatAPI.subscribe('messages-received', newMessageHandlerCreator(dispatch))\n  chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\n}\n\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\n  chatAPI.unsubscribe('messages-received', newMessageHandlerCreator(dispatch))\n  chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch))\n  chatAPI.stop()\n}\n\nexport const sendMessage = (message: string): ThunkType => {\n  return async () => {\n    chatAPI.sendMessage(message)\n  }\n}\n\nexport default chatReducer\n\ntype InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"renderTextField_error__2NPpj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerForm\":\"InfoData_containerForm__1bbp7\",\"wrap\":\"InfoData_wrap__JN5oI\",\"aboutMe\":\"InfoData_aboutMe__2M2AZ\",\"job\":\"InfoData_job__Iwdx7\",\"contacts\":\"InfoData_contacts__2B3EH\",\"title\":\"InfoData_title__lGiAa\",\"text\":\"InfoData_text__32MsJ\",\"contact\":\"InfoData_contact__gAsfv\",\"contactTitle\":\"InfoData_contactTitle__1XYV_\",\"contactTextWrap\":\"InfoData_contactTextWrap__Fr2PV\",\"contactText\":\"InfoData_contactText__1_0jQ\"};","import { AppStateType } from '../redux-store'\n\nexport const getInitialized = (state: AppStateType) => state.app.initialized\n\nexport const getTheme = (state: AppStateType) => state.app.theme\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__33PA9\",\"navLink\":\"Navbar_navLink__18rsh\",\"navLinkImg\":\"Navbar_navLinkImg__214ti\",\"active\":\"Navbar_active__2U-iw\",\"activeIcon\":\"Navbar_activeIcon__3-qcm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postContainer\":\"Post_postContainer__UwFf4\",\"post\":\"Post_post__3Eo-8\",\"postDelete\":\"Post_postDelete__2HEOu\",\"holeOut\":\"Post_holeOut__2a5WV\",\"columnLeft\":\"Post_columnLeft__3PAah\",\"avatar\":\"Post_avatar__JUoDK\",\"postSelectedTheme1\":\"Post_postSelectedTheme1__6541S\",\"postSelectedTheme2\":\"Post_postSelectedTheme2__3qkth\",\"columnCenter\":\"Post_columnCenter__1-e3t\",\"name\":\"Post_name__3X0_w\",\"message\":\"Post_message__3Hpl2\",\"columnRight\":\"Post_columnRight__3Il30\",\"wrapLike\":\"Post_wrapLike__sDxdv\",\"likesCount\":\"Post_likesCount__3BtpW\",\"like\":\"Post_like__3ClHE\",\"noLike\":\"Post_noLike__3r6kb\"};","import { AppStateType } from '../redux-store'\n\nexport const getLogin = (state: AppStateType) => state.auth.login\n\nexport const getIsAuth = (state: AppStateType) => state.auth.isAuth\n\nexport const getAuthorizedUserID = (state: AppStateType) => state.auth.userID\n\nexport const getCaptchaURL = (state: AppStateType) => state.auth.captchaURL\n\nexport const getMyPhoto = (state: AppStateType) => state.auth.myPhoto\n","import { PhotosType, ProfileType } from '../types/types'\nimport { DefaultResponseType, instance } from './api'\n\ntype SavePhotoDataType = {\n  photos: PhotosType\n}\n\nconst profileAPI = {\n  async getProfile(id: number | null) {\n    const response = await instance.get<ProfileType>(`profile/${id}`)\n    return response.data\n  },\n\n  async getStatus(id: number) {\n    const response = await instance.get<string>(`profile/status/${id}`)\n    return response.data\n  },\n\n  async updateStatus(status: string) {\n    const response = await instance.put<DefaultResponseType>('profile/status', {\n      status,\n    })\n    return response.data\n  },\n\n  async savePhotoAPI(photoFile: File) {\n    const formData = new FormData()\n    formData.append('image', photoFile)\n    const response = await instance.put<DefaultResponseType<SavePhotoDataType>>(\n      'profile/photo',\n      formData,\n      {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      }\n    )\n    return response.data\n  },\n\n  async saveProfileAPI(profile: ProfileType) {\n    const response = await instance.put<DefaultResponseType>('profile', profile)\n    return response.data\n  },\n}\n\nexport default profileAPI\n","import { v1 } from 'uuid'\nimport { BaseThunkType, InferActionsTypes } from '../redux-store'\n\nimport { PostType, ProfileType, PhotosType } from '../../types/types'\n\nimport { ResultCodesEnum } from '../../api/api'\nimport profileAPI from '../../api/profile-api'\n\nconst initialState = {\n  posts: [\n    {\n      author: 'Denis Ignatov',\n      idPost: '1',\n      message: `Lorem ipsum dolor sit amet consectetur adipisicing elit.\n        Facilis ut quo maiores neque laboriosam. Ratione adipisci\n        reiciendis autem placeat alias necessitatibus pariatur saepe\n        ipsum, temporibus animi, facilis minus doloribus ducimus.`,\n      likesCount: 1,\n      isLikeClick: true,\n    },\n    {\n      author: 'Denis Ignatov',\n      idPost: '2',\n      message: 'Lorem ipsum dolor sit amet consectetur adipisicing elit.',\n      likesCount: 0,\n      isLikeClick: false,\n    },\n    {\n      author: 'Denis Ignatov',\n      idPost: '3',\n      message: `Lorem ipsum dolor sit amet consectetur adipisicing elit.\n        Facilis ut quo maiores neque laboriosam. Ratione adipisci\n        reiciendis autem placeat alias necessitatibus...`,\n      likesCount: 0,\n      isLikeClick: false,\n    },\n  ] as Array<PostType>,\n  postsForDelete: [] as Array<string>,\n  isSelectedPost: false,\n  isClickDeleteSelectedPosts: false, // для анимации поста при удалении\n\n  profile: null as ProfileType | null,\n  status: '',\n  showSuccessSave: '',\n  errorProfileContacts: '',\n  isEditModeProfile: false,\n  isEditInputProfileForm: false,\n}\n\nconst profileReducer = (\n  state = initialState,\n  action: ActionsTypes\n): InitialStateType => {\n  switch (action.type) {\n    case 'SET_USER': {\n      return {\n        ...state,\n        profile: action.profile,\n      }\n    }\n    case 'SET_STATUS': {\n      return {\n        ...state,\n        status: action.status,\n      }\n    }\n    case 'INITIALIZE_POSTS': {\n      return {\n        ...state,\n        posts: action.posts,\n      }\n    }\n    case 'ADD_POST': {\n      const newPost = {\n        author: state.profile?.fullName,\n        idPost: v1(), // TODO вызов не чистой функции\n        message: action.newPostText,\n        likesCount: 0,\n        isLikeClick: false,\n      }\n      return {\n        ...state,\n        posts: [newPost, ...state.posts],\n      }\n    }\n    case 'IS_SELECTED_POST': {\n      return {\n        ...state,\n        isSelectedPost: action.bool,\n      }\n    }\n    case 'SET_POST_FOR_DELETE': {\n      return {\n        ...state,\n        postsForDelete: [...state.postsForDelete, action.idPost],\n      }\n    }\n    case 'DELETE_POST_FOR_DELETE': {\n      return {\n        ...state,\n        postsForDelete: [\n          ...state.postsForDelete.filter((id) => id !== action.idPost),\n        ],\n      }\n    }\n    case 'CLEAR_POSTS_FOR_DELETE': {\n      return {\n        ...state,\n        postsForDelete: [],\n      }\n    }\n    case 'TOGGLE_CLICK_DELETE_SELECTED_POST': {\n      return {\n        ...state,\n        isClickDeleteSelectedPosts: action.bool,\n      }\n    }\n    case 'DELETE_POST': {\n      return {\n        ...state,\n        posts: state.posts.filter((p) => p.idPost !== action.idPost),\n      }\n    }\n    case 'SET_LIKE_ON_POST': {\n      return {\n        ...state,\n        posts: [\n          ...state.posts.map((p) => {\n            if (p.idPost === action.idPost) {\n              return {\n                ...p,\n                likesCount: ++p.likesCount,\n                isLikeClick: true,\n              }\n            }\n            return p\n          }),\n        ],\n      }\n    }\n    case 'DELETE_LIKE_ON_POST': {\n      return {\n        ...state,\n        posts: [\n          ...state.posts.map((p) => {\n            if (p.idPost === action.idPost) {\n              return {\n                ...p,\n                likesCount: --p.likesCount,\n                isLikeClick: false,\n              }\n            }\n            return p\n          }),\n        ],\n      }\n    }\n    case 'SAVE_PHOTO_SUCCESS': {\n      return {\n        ...state,\n        profile: { ...state.profile, photos: action.photos } as ProfileType,\n      }\n    }\n    case 'SHOW_SUCCESS_SAVE': {\n      return {\n        ...state,\n        showSuccessSave: action.message,\n      }\n    }\n    case 'SHOW_ERROR_PROFILE_CONTACTS': {\n      return {\n        ...state,\n        errorProfileContacts: action.message,\n      }\n    }\n    case 'TOGGLE_EDIT_MODE_PROFILE': {\n      return {\n        ...state,\n        isEditModeProfile: action.bool,\n      }\n    }\n    case 'TOGGLE_EDIT_INPUT_PROFILE_FORM': {\n      return {\n        ...state,\n        isEditInputProfileForm: action.bool,\n      }\n    }\n    default:\n      return state\n  }\n}\n\nexport const actions = {\n  initializePosts: (posts: Array<PostType>) =>\n    ({ type: 'INITIALIZE_POSTS', posts } as const),\n  addPost: (newPostText: string) =>\n    ({ type: 'ADD_POST', newPostText } as const),\n  deletePost: (idPost: string) => ({ type: 'DELETE_POST', idPost } as const),\n  // лайки-лайки-лайки\n  setLikeOnPost: (idPost: string) =>\n    ({ type: 'SET_LIKE_ON_POST', idPost } as const),\n  deletetLikeOnPost: (idPost: string) =>\n    ({ type: 'DELETE_LIKE_ON_POST', idPost } as const),\n  // удаление нескольких постов\n  setPostForDeleting: (idPost: string) =>\n    ({ type: 'SET_POST_FOR_DELETE', idPost } as const),\n  deletePostForDeleting: (idPost: string) =>\n    ({ type: 'DELETE_POST_FOR_DELETE', idPost } as const),\n  clearPostsForDelete: () => ({ type: 'CLEAR_POSTS_FOR_DELETE' } as const),\n  // для убирания иконок-крестиков у всех постов при выборе нескольких постов\n  toggleIsSelectedPost: (bool: boolean) =>\n    ({ type: 'IS_SELECTED_POST', bool } as const),\n  // для анимации удаления постов\n  toggleIsClickDeleteSelectedPosts: (bool: boolean) =>\n    ({ type: 'TOGGLE_CLICK_DELETE_SELECTED_POST', bool } as const),\n\n  setUserProfile: (profile: ProfileType) =>\n    ({ type: 'SET_USER', profile } as const),\n  setStatus: (status: string) => ({ type: 'SET_STATUS', status } as const),\n  savePhotoSuccess: (photos: PhotosType) =>\n    ({ type: 'SAVE_PHOTO_SUCCESS', photos } as const),\n  showSuccessSaveProfile: (message: string) =>\n    ({ type: 'SHOW_SUCCESS_SAVE', message } as const),\n  showErrorProfileContacts: (message: string) =>\n    ({ type: 'SHOW_ERROR_PROFILE_CONTACTS', message } as const),\n  setEditModeProfile: (bool: boolean) =>\n    ({ type: 'TOGGLE_EDIT_MODE_PROFILE', bool } as const),\n  setEditInputProfileForm: (bool: boolean) =>\n    ({ type: 'TOGGLE_EDIT_INPUT_PROFILE_FORM', bool } as const),\n}\n\nexport const getUserProfile =\n  (userId: number | null): ThunkType =>\n  async (dispatch) => {\n    const response = await profileAPI.getProfile(userId)\n    dispatch(actions.setUserProfile(response))\n  }\n\nexport const getStatus =\n  (id: number): ThunkType =>\n  async (dispatch) => {\n    const response = await profileAPI.getStatus(id)\n    dispatch(actions.setStatus(response))\n  }\n\nexport const updateStatus =\n  (status: string): ThunkType =>\n  async (dispatch) => {\n    const response = await profileAPI.updateStatus(status)\n    if (response.resultCode === ResultCodesEnum.Success) {\n      dispatch(actions.setStatus(status))\n    }\n  }\n\nexport const savePhotoThunk =\n  (file: File): ThunkType =>\n  async (dispatch) => {\n    const response = await profileAPI.savePhotoAPI(file)\n    if (response.resultCode === ResultCodesEnum.Success) {\n      dispatch(actions.savePhotoSuccess(response.data.photos))\n    }\n  }\n\nexport const saveProfileThunk =\n  (profile: ProfileType): ThunkType =>\n  async (dispatch, getState) => {\n    const response = await profileAPI.saveProfileAPI(profile)\n    const { userID } = getState().auth\n\n    if (response.resultCode === ResultCodesEnum.Success) {\n      dispatch(getUserProfile(userID))\n      dispatch(actions.showSuccessSaveProfile('Data saved successfully!'))\n      setTimeout(dispatch, 4000, actions.showSuccessSaveProfile(''))\n      dispatch(actions.showErrorProfileContacts(''))\n    }\n\n    if (response.resultCode === ResultCodesEnum.Error) {\n      // заготовка для показа ошибки конкретного поля\n      // const key = response.data.messages[0]\n      // .match(/Contacts->(\\w+)/)[1].toLowerCase()\n      // dispatch(stopSubmit('editProfile', {\n      //   contacts: { [key]: response.data.messages[0] },\n      // }));\n      dispatch(actions.showErrorProfileContacts(response.messages[0]))\n    }\n  }\n\nexport default profileReducer\n\nexport type InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>\n","import { useSelector } from 'react-redux'\nimport { TextField } from '@material-ui/core'\nimport { getTheme } from '../../../redux/selectors/app-selectors'\n\nimport s from './renderTextField.module.scss'\n\nconst RenderTextField = (props) => {\n  const {\n    label,\n    input,\n    placeholder,\n    multiline,\n    variant,\n    inputProps,\n    onInput,\n    onFocus,\n    meta: { touched, error, warning },\n    fullWidth,\n    ...custom\n  } = props\n\n  const theme = useSelector(getTheme)\n\n  return (\n    <>\n      <TextField\n        color={theme === 'theme1' ? 'primary' : 'secondary'}\n        label={label}\n        placeholder={placeholder}\n        inputProps={inputProps}\n        onInput={onInput}\n        onFocus={onFocus}\n        variant={variant}\n        multiline={multiline}\n        fullWidth={fullWidth}\n        {...input}\n        {...custom}\n      />\n\n      {touched &&\n        ((error && <span className={s.error}>{error}</span>) ||\n          (warning && <span>{warning}</span>))}\n    </>\n  )\n}\n\nexport default RenderTextField\n","import { AppStateType } from '../redux-store'\n\nexport const getProfile = (state: AppStateType) => state.profilePage.profile\n\nexport const getStatus = (state: AppStateType) => state.profilePage.status\n\nexport const getShowSuccessSave = (state: AppStateType) =>\n  state.profilePage.showSuccessSave\n\nexport const getErrorProfileContacts = (state: AppStateType) =>\n  state.profilePage.errorProfileContacts\n\nexport const getPosts = (state: AppStateType) => state.profilePage.posts\n\nexport const getPostsForDelete = (state: AppStateType) =>\n  state.profilePage.postsForDelete\n\nexport const getToggleClickDeleteSelectedPosts = (state: AppStateType) =>\n  state.profilePage.isClickDeleteSelectedPosts\n\nexport const getIsSelectedPost = (state: AppStateType) =>\n  state.profilePage.isSelectedPost\n\nexport const getEditModeProfile = (state: AppStateType) =>\n  state.profilePage.isEditModeProfile\n\nexport const getEditInputProfileForm = (state: AppStateType) =>\n  state.profilePage.isEditInputProfileForm\n","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport cn from 'classnames'\nimport IconButton from '@material-ui/core/IconButton'\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt'\nimport CloseIcon from '@material-ui/icons/Close'\nimport unknown from '../../../../img/no_photo.svg'\nimport s from './Post.module.scss'\n\nimport Avatar from '../../../common/Avatar/Avatar'\n\nimport {\n  getIsSelectedPost,\n  getPostsForDelete,\n  getToggleClickDeleteSelectedPosts,\n} from '../../../../redux/selectors/profile-selectors'\nimport { getTheme } from '../../../../redux/selectors/app-selectors'\nimport { actions } from '../../../../redux/reducers/profile-reducer'\n\nimport { PostType } from '../../../../types/types'\n\ntype OwnPropsType = {\n  photo: string | null\n  handleDeleteOnePost: (idPost: string) => void\n  addIdPostBeforeDeleting: (idPost: string) => void\n  deleteIdPostBeforeDeleting: (idPost: string) => void\n}\n\nconst Post: React.FC<PostType & OwnPropsType> = (props) => {\n  const {\n    photo,\n    idPost,\n    author,\n    message,\n    likesCount,\n    isLikeClick,\n    handleDeleteOnePost,\n    addIdPostBeforeDeleting,\n    deleteIdPostBeforeDeleting,\n  } = props\n\n  const [isClickDeletePost, setIsClickDeletePost] = useState(false)\n  const [isSelectedPostLocal, setIsSelectedPostLocal] = useState(false)\n\n  const theme = useSelector(getTheme)\n  const isSelectedPost = useSelector(getIsSelectedPost)\n  const isClickDeleteSelectedPosts = useSelector(\n    getToggleClickDeleteSelectedPosts\n  )\n  const postsForDelete = useSelector(getPostsForDelete)\n  const dispatch = useDispatch()\n\n  const handleDeletePost = () => {\n    setIsClickDeletePost(true)\n    setTimeout(() => handleDeleteOnePost(idPost), 300)\n  }\n\n  const handleSetLike = () => {\n    if (!isLikeClick) {\n      dispatch(actions.setLikeOnPost(idPost))\n    } else {\n      dispatch(actions.deletetLikeOnPost(idPost))\n    }\n  }\n\n  return (\n    <div\n      className={cn(s.postContainer, {\n        [s.postDelete]:\n          isClickDeletePost ||\n          (isClickDeleteSelectedPosts && postsForDelete.includes(idPost)),\n        // добавление анимации\n      })}\n    >\n      <div className={s.post}>\n        <div className={s.columnLeft}>\n          <div\n            aria-hidden='true'\n            className={cn(\n              { [s.avatar]: !isSelectedPostLocal },\n              {\n                [s.postSelectedTheme1]:\n                  isSelectedPostLocal && theme === 'theme1',\n              },\n              {\n                [s.postSelectedTheme2]:\n                  isSelectedPostLocal && theme === 'theme2',\n              }\n            )}\n            onClick={() => {\n              if (!isSelectedPostLocal) {\n                // для удаления иконок-крестиков у всех постов\n                dispatch(actions.toggleIsSelectedPost(true))\n                setIsSelectedPostLocal(true)\n                // предварительное добавление поста в список на удаление\n                addIdPostBeforeDeleting(idPost)\n              } else {\n                dispatch(actions.toggleIsSelectedPost(false))\n                setIsSelectedPostLocal(false)\n                deleteIdPostBeforeDeleting(idPost)\n              }\n            }}\n          >\n            <Avatar photo={photo || unknown} size='medium' />\n          </div>\n        </div>\n\n        <div className={s.columnCenter}>\n          <div className={s.name}>{author}</div>\n          <div className={s.message}>{message}</div>\n        </div>\n\n        <div className={s.columnRight}>\n          <div hidden={isSelectedPost}>\n            <IconButton\n              aria-label='deletePost'\n              size='small'\n              onClick={handleDeletePost}\n            >\n              <CloseIcon />\n            </IconButton>\n          </div>\n          <div className={s.wrapLike}>\n            <span className={s.likesCount}>\n              {likesCount > 0 ? `+${likesCount}` : ''}\n            </span>\n            <IconButton aria-label='like' size='small' onClick={handleSetLike}>\n              <ThumbUpAltIcon\n                className={cn(s.like, { [s.noLike]: !isLikeClick })}\n              />\n            </IconButton>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Post\n","import React from 'react'\nimport { Field, InjectedFormProps, reduxForm, reset } from 'redux-form'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport Button from '@material-ui/core/Button'\nimport PostAddIcon from '@material-ui/icons/PostAdd'\nimport { IconButton } from '@material-ui/core'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport cn from 'classnames'\nimport s from './Wall.module.scss'\nimport renderTextField from '../../common/ElementCustom/renderTextField'\n\nimport Post from './Post/Post'\nimport { PostType } from '../../../types/types'\n\nimport {\n  getPosts,\n  getPostsForDelete,\n} from '../../../redux/selectors/profile-selectors'\nimport { getMyPhoto } from '../../../redux/selectors/auth-selectors'\nimport { actions } from '../../../redux/reducers/profile-reducer'\nimport { getTheme } from '../../../redux/selectors/app-selectors'\n\nconst Wall: React.FC = () => {\n  const posts = useSelector(getPosts)\n  const postsForDelete = useSelector(getPostsForDelete)\n  const myPhoto = useSelector(getMyPhoto)\n  const theme = useSelector(getTheme)\n  const dispatch = useDispatch()\n\n  React.useEffect(() => {\n    // @ts-ignore\n    const arr = JSON.parse(localStorage.getItem('posts'))\n    if (arr) {\n      dispatch(actions.initializePosts(arr))\n    }\n  }, [dispatch])\n\n  React.useEffect(() => {\n    localStorage.setItem('posts', JSON.stringify(posts))\n  }, [posts])\n\n  const handleAddPost = (values: WallValuesFormType) => {\n    if (values.newPostText && values.newPostText.length > 0) {\n      dispatch(actions.addPost(values.newPostText))\n      dispatch(reset('profileNewPostForm'))\n    }\n  }\n\n  const handleDeleteOnePost = (idPost: string) => {\n    dispatch(actions.deletePost(idPost))\n  }\n\n  const handleDeleteSelectedPost = () => {\n    // начало анимации удаления\n    dispatch(actions.toggleIsClickDeleteSelectedPosts(true))\n\n    // возвращаем индивидуальные иконки-крестики у всех постов\n    dispatch(actions.toggleIsSelectedPost(false))\n\n    setTimeout(() => {\n      postsForDelete.forEach((p) => {\n        dispatch(actions.deletePost(p))\n      })\n      dispatch(actions.clearPostsForDelete())\n\n      // конец анимации удаления\n      dispatch(actions.toggleIsClickDeleteSelectedPosts(false))\n    }, 600)\n  }\n\n  const addIdPostBeforeDeleting = (idPost: string) => {\n    dispatch(actions.setPostForDeleting(idPost))\n  }\n\n  const deleteIdPostBeforeDeleting = (idPost: string) => {\n    dispatch(actions.deletePostForDeleting(idPost))\n  }\n\n  const postsElements = posts.map((p: PostType) => (\n    <Post\n      key={p.idPost}\n      photo={myPhoto}\n      idPost={p.idPost}\n      author={p.author}\n      message={p.message}\n      likesCount={p.likesCount}\n      isLikeClick={p.isLikeClick}\n      handleDeleteOnePost={handleDeleteOnePost}\n      addIdPostBeforeDeleting={addIdPostBeforeDeleting}\n      deleteIdPostBeforeDeleting={deleteIdPostBeforeDeleting}\n    />\n  ))\n\n  return (\n    <div className={s.container}>\n      <div\n        hidden={postsForDelete.length === 0}\n        className={cn({ [s.basket]: postsForDelete.length > 0 })}\n      >\n        <Button\n          onClick={() => handleDeleteSelectedPost()}\n          variant='contained'\n          color={theme === 'theme1' ? 'primary' : 'secondary'}\n          style={{ color: 'white', width: '100%', height: '100%' }}\n          startIcon={<DeleteIcon />}\n        >\n          Delete\n        </Button>\n      </div>\n\n      {postsForDelete.length === 0 && (\n        // @ts-ignore\n        <PostReduxForm onSubmit={handleAddPost} theme={theme} />\n      )}\n\n      <div className={s.posts}>\n        {postsElements}\n        {!posts.length && (\n          <div className={s.noPosts}>\n            <span>No posts yet...</span>\n            <span>Write something!</span>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nconst AddNewPostForm: React.FC<\n  InjectedFormProps<WallValuesFormType, OwnPropsType> & OwnPropsType\n> = ({ handleSubmit, theme }) => {\n  const stylesAddPostButton = {\n    color: 'white',\n    margin: '10px 0 10px 10px',\n    width: '140px',\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className={s.form}>\n        <Field\n          component={renderTextField}\n          name='newPostText'\n          placeholder='Enter the post text...'\n          multiline\n          fullWidth\n          variant='outlined'\n          inputProps={{ maxLength: 1000 }}\n        />\n        <div className={s.buttonBig}>\n          <Button\n            type='submit'\n            variant='contained'\n            color={theme === 'theme1' ? 'primary' : 'secondary'}\n            style={stylesAddPostButton}\n            endIcon={<PostAddIcon />}\n          >\n            Add post\n          </Button>\n        </div>\n        <div hidden className={s.buttonIcon}>\n          <IconButton aria-label='addPost' type='submit'>\n            <PostAddIcon color='primary' />\n          </IconButton>\n        </div>\n      </div>\n    </form>\n  )\n}\n\ntype WallValuesFormType = {\n  newPostText: string\n}\n\ntype OwnPropsType = {\n  theme: string\n}\n\nconst PostReduxForm = reduxForm<WallValuesFormType, OwnPropsType>({\n  form: 'profileNewPostForm',\n})(AddNewPostForm)\n\nexport default Wall\n","export default __webpack_public_path__ + \"static/media/camera.12909c41.svg\";","import { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n  status: {\n    borderRadius: '5px 5px 0 0',\n    padding: theme.spacing(1),\n    minHeight: '30px',\n    lineHeight: '25px',\n    backgroundColor: '#4f4f4f',\n  },\n}))\n\nexport default useStyles\n","import React, { useEffect, useState, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Input, Button } from '@material-ui/core'\nimport SaveIcon from '@material-ui/icons/Save'\nimport cn from 'classnames'\nimport s from './Status.module.scss'\nimport stylesField from '../../../common/FieldWithCounter/FieldWithCounter.module.scss'\nimport useStyles from './stylesCustomMaterialUI'\nimport { getTheme } from '../../../../redux/selectors/app-selectors'\n\nimport { getStatus } from '../../../../redux/selectors/profile-selectors'\nimport { updateStatus } from '../../../../redux/reducers/profile-reducer'\n\ntype PropsType = {\n  isOwner: boolean\n}\n\nconst Status: React.FC<PropsType> = (props) => {\n  const { isOwner } = props\n  const classes = useStyles()\n\n  const stylesSaveAndButton = {\n    color: '#fff',\n    margin: 10,\n    width: '100%',\n  }\n\n  const status = useSelector(getStatus)\n  const theme = useSelector(getTheme)\n  const dispatch = useDispatch()\n\n  const [editMode, setEditMode] = useState(false)\n  const [isEditInputStatusForm, setIsEditInputStatusForm] = useState(false)\n  const [statusLocal, setStatusLocal] = useState(status)\n\n  const [isHiddenCounter, setIsHiddenCounter] = useState(true)\n  const [count, setCount] = useState(0)\n\n  useEffect(() => {\n    setStatusLocal(status)\n  }, [status])\n\n  const onStatusFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    e.target.select()\n    setCount(e.target.value.length)\n    setIsHiddenCounter(false)\n  }\n\n  const onStatusBlur = () => {\n    setIsHiddenCounter(true)\n  }\n\n  const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setCount(e.target.value.length)\n    setIsEditInputStatusForm(true)\n    setStatusLocal(e.currentTarget.value)\n  }\n\n  const saveStatus = () => {\n    dispatch(updateStatus(statusLocal))\n    setIsEditInputStatusForm(false)\n    setEditMode(false)\n  }\n\n  function useOutsideAlerter(ref: React.RefObject<HTMLElement>) {\n    useEffect(() => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      function handleClickOutside(event: MouseEvent | any) {\n        if (ref.current && !ref.current.contains(event.target)) {\n          setEditMode(false)\n        }\n      }\n      document.addEventListener('mousedown', handleClickOutside)\n      return () => {\n        document.removeEventListener('mousedown', handleClickOutside)\n      }\n    }, [ref])\n  }\n\n  const statusRef = useRef(null)\n  useOutsideAlerter(statusRef)\n\n  return (\n    <div ref={statusRef} className={s.container}>\n      {editMode && (\n        <div className={s.wrap}>\n          <Input\n            name='status'\n            value={statusLocal}\n            placeholder='Your status...'\n            autoFocus\n            inputProps={{ maxLength: 300 }}\n            className={classes.status}\n            color={theme === 'theme1' ? 'primary' : 'secondary'}\n            multiline\n            fullWidth\n            onFocus={onStatusFocus}\n            onBlur={onStatusBlur}\n            onChange={onStatusChange}\n          />\n\n          <div className={s.buttons}>\n            <div className={s.buttonWrap}>\n              <Button\n                onClick={saveStatus}\n                disabled={!isEditInputStatusForm}\n                variant='contained'\n                color={theme === 'theme1' ? 'primary' : 'secondary'}\n                style={stylesSaveAndButton}\n                startIcon={<SaveIcon />}\n              >\n                Save\n              </Button>\n            </div>\n\n            <span\n              className={cn(\n                stylesField.count,\n                { [stylesField.countHidden]: isHiddenCounter },\n                { [stylesField.countYellow]: count >= 290 },\n                { [stylesField.countRed]: count === 300 }\n              )}\n            >\n              {count} of 300\n            </span>\n          </div>\n        </div>\n      )}\n\n      {editMode && <div className={s.plug} />}\n\n      {isOwner && !editMode && (\n        <div\n          aria-hidden='true'\n          className={s.status}\n          onClick={() => setEditMode(true)}\n        >\n          {status || <span className={s.noStatus}>Your status is empty</span>}\n        </div>\n      )}\n\n      {!isOwner && status && <div className={s.statusNotMy}>{status}</div>}\n    </div>\n  )\n}\n\nexport default Status\n","import { useState } from 'react'\nimport { Field } from 'redux-form'\n\nimport cn from 'classnames'\nimport s from './FieldWithCounter.module.scss'\nimport renderTextField from '../ElementCustom/renderTextField'\n\ntype PropsType = {\n  name: string\n  label: string\n  placeholder: string\n  multiline?: boolean\n  maxLength: number\n  handleOnEditInputForm: (bool: boolean) => void\n}\n\nconst FieldWithCounter: React.FC<PropsType> = (props) => {\n  const {\n    name,\n    label,\n    multiline,\n    maxLength,\n    placeholder,\n    handleOnEditInputForm,\n  } = props\n\n  const [isHiddenCounter, setIsHiddenCounter] = useState(true)\n  const [count, setCount] = useState(0)\n\n  const onFieldInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    handleOnEditInputForm(true)\n    setCount(e.target.value.length)\n  }\n  const onFieldFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    e.target.select()\n    setCount(e.target.value.length)\n    setIsHiddenCounter(false)\n  }\n  const onFieldBlur = () => {\n    setIsHiddenCounter(true)\n  }\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <Field\n        component={renderTextField}\n        inputProps={{ maxLength }}\n        placeholder={placeholder}\n        multiline={multiline}\n        label={label}\n        name={name}\n        variant='filled'\n        fullWidth\n        onInput={onFieldInput}\n        onFocus={onFieldFocus}\n        onBlur={onFieldBlur}\n      />\n      <span\n        className={cn(\n          s.count,\n          { [s.countHidden]: isHiddenCounter },\n          { [s.countYellow]: count >= maxLength - 10 },\n          { [s.countRed]: count === maxLength }\n        )}\n      >\n        {count} of {maxLength}\n      </span>\n    </div>\n  )\n}\n\nexport default FieldWithCounter\n","import { FormControlLabel, Checkbox } from '@material-ui/core'\nimport { useSelector } from 'react-redux'\nimport { getTheme } from '../../../redux/selectors/app-selectors'\n\nconst RenderCheckbox = ({ input, label }) => {\n  const theme = useSelector(getTheme)\n  return (\n    <div>\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={!!input.value}\n            onChange={input.onChange}\n            color={theme === 'theme1' ? 'primary' : 'secondary'}\n          />\n        }\n        label={label}\n        labelPlacement='start'\n        style={{ marginLeft: 0 }}\n      />\n    </div>\n  )\n}\n\nexport default RenderCheckbox\n","import React from 'react'\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\n\nimport FieldWithCounter from '../../../common/FieldWithCounter/FieldWithCounter'\nimport renderTextField from '../../../common/ElementCustom/renderTextField'\nimport renderCheckbox from '../../../common/ElementCustom/renderCheckbox'\nimport s from './InfoDataForm.module.scss'\n\nimport { ProfileType } from '../../../../types/types'\n\ntype OwnPropsType = {\n  errorProfileContacts: string\n  handleEditInputProfileForm: (bool: boolean) => void\n  initialValues: ProfileType\n}\n\nconst DataForm: React.FC<\n  InjectedFormProps<ProfileType, OwnPropsType> & OwnPropsType\n> = (props) => {\n  const {\n    handleSubmit,\n    initialValues,\n    errorProfileContacts,\n    handleEditInputProfileForm,\n  } = props\n\n  return (\n    <form onSubmit={handleSubmit} className={s.form}>\n      <h1 className={s.titleForm}>Edit profile</h1>\n\n      <div className={s.wrap}>\n        <FieldWithCounter\n          label='Name:'\n          name='fullName'\n          placeholder='Your name'\n          maxLength={100}\n          handleOnEditInputForm={handleEditInputProfileForm}\n        />\n      </div>\n\n      <div className={s.wrap}>\n        <FieldWithCounter\n          multiline\n          label='About me:'\n          name='aboutMe'\n          placeholder='Write about yourself!'\n          maxLength={1000}\n          handleOnEditInputForm={handleEditInputProfileForm}\n        />\n      </div>\n\n      <div className={s.wrap}>\n        <Field\n          component={renderCheckbox}\n          onChange={() => {\n            handleEditInputProfileForm(true)\n          }}\n          name='lookingForAJob'\n          label='Are you looking for a job?'\n        />\n      </div>\n\n      <div className={s.wrap}>\n        <FieldWithCounter\n          multiline\n          label='Professional skills:'\n          name='lookingForAJobDescription'\n          placeholder='What you can do?'\n          maxLength={1000}\n          handleOnEditInputForm={handleEditInputProfileForm}\n        />\n      </div>\n\n      <div className={s.wrap}>\n        <div className={s.titleAllContacts}>Contacts:</div>\n\n        {errorProfileContacts ? (\n          <div className={s.errorProfileContacts}>{errorProfileContacts}</div>\n        ) : (\n          <></>\n        )}\n\n        {Object.keys(initialValues.contacts).map((key) => (\n          <div className={s.contact} key={key}>\n            <div className={s.titleContact}>{key}:</div>\n\n            <Field\n              component={renderTextField}\n              onInput={() => handleEditInputProfileForm(true)}\n              name={`contacts.${key}`}\n              placeholder='https://...'\n              multiline\n              fullWidth\n            />\n          </div>\n        ))}\n      </div>\n    </form>\n  )\n}\n\nconst InfoDataForm = reduxForm<ProfileType, OwnPropsType>({\n  form: 'editProfile',\n})(DataForm)\n\nexport default InfoDataForm\n","import React from 'react'\nimport { ProfileType, СontactsType } from '../../../../types/types'\nimport s from './InfoData.module.scss'\n\ntype PropsType = {\n  profile: ProfileType\n}\n\nconst InfoData: React.FC<PropsType> = ({ profile }) => (\n  <div className={s.containerForm}>\n    <div className={s.wrap}>\n      {profile.aboutMe && (\n        <div className={s.aboutMe}>\n          <div className={s.title}>About me:</div>\n          <div className={s.text}>{profile.aboutMe}</div>\n        </div>\n      )}\n    </div>\n\n    <div className={s.wrap}>\n      <div className={s.job}>\n        <div className={s.title}>Job search:</div>\n        {profile.lookingForAJob ? (\n          <div className={s.text}>Now looking for a job!</div>\n        ) : (\n          <div className={s.text}>I&#39;m not looking for a job</div>\n        )}\n      </div>\n    </div>\n\n    <div className={s.wrap}>\n      {profile.lookingForAJobDescription && (\n        <div className={s.job}>\n          <div className={s.title}>Professional skills:</div>\n          <div className={s.text}>{profile.lookingForAJobDescription}</div>\n        </div>\n      )}\n    </div>\n\n    <div className={s.wrap}>\n      {Object.values(profile.contacts).some((el) => el && el !== '') && (\n        <div className={s.contacts}>\n          <div className={s.title}>My contacts</div>\n          {Object.keys(profile.contacts).map((key) => (\n            <Contact\n              key={key}\n              contactTitle={key}\n              contactValue={profile.contacts[key as keyof СontactsType]}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  </div>\n)\n\ntype ContactPropsType = {\n  contactTitle: string\n  contactValue: string\n}\n\nconst Contact: React.FC<ContactPropsType> = React.memo(\n  ({ contactTitle, contactValue }) => (\n    <>\n      {contactValue && (\n        <div className={s.contact}>\n          <span className={s.contactTitle}>{contactTitle}:</span>\n          <div className={s.contactTextWrap}>\n            <a className={s.contactText} href={contactValue}>\n              {contactValue.replace(/(?:https?):\\/\\/([^/\\s]+)[^\\s]*/gi, '$1')}\n            </a>\n          </div>\n        </div>\n      )}\n    </>\n  )\n)\n\nexport default InfoData\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { submit } from 'redux-form'\n\nimport Button from '@material-ui/core/Button'\nimport EditIcon from '@material-ui/icons/Edit'\nimport SaveIcon from '@material-ui/icons/Save'\nimport CloseIcon from '@material-ui/icons/Close'\nimport s from './InfoContainer.module.scss'\nimport camera from '../../../img/icons/camera.svg'\n\nimport Preloader from '../../common/Preloader/Preloader'\nimport Status from './Status/Status'\nimport Avatar from '../../common/Avatar/Avatar'\nimport InfoDataForm from './InfoDataForm/InfoDataForm'\nimport InfoData from './InfoData/InfoData'\n\nimport { getTheme } from '../../../redux/selectors/app-selectors'\nimport {\n  getEditInputProfileForm,\n  getEditModeProfile,\n  getErrorProfileContacts,\n  getProfile,\n  getShowSuccessSave,\n} from '../../../redux/selectors/profile-selectors'\nimport {\n  actions,\n  savePhotoThunk,\n  saveProfileThunk,\n} from '../../../redux/reducers/profile-reducer'\n\nimport { ProfileType } from '../../../types/types'\n\n// при переходе на страницу профиля скрол прокрутится вверх до имени\nfunction ScrollToTopOnMount() {\n  useEffect(() => {\n    const fullName = document.getElementById('scrollToTopOnMount')\n    fullName?.scrollIntoView(false)\n  }, [])\n  return null\n}\n\ntype OwnPropsType = {\n  isOwner: boolean\n}\n\nconst ProfileInfo: React.FC<OwnPropsType> = ({ isOwner }) => {\n  const stylesSaveAndCancelButton = {\n    fontSize: 12,\n    color: '#fff',\n    margin: 10,\n  }\n  const stylesEditButton = {\n    fontSize: 12,\n    marginTop: 20,\n  }\n\n  // for InfoDataForm\n  const errorProfileContacts = useSelector(getErrorProfileContacts)\n\n  const theme = useSelector(getTheme)\n  const profile = useSelector(getProfile)\n\n  const showSuccessSave = useSelector(getShowSuccessSave)\n  const isEditModeProfile = useSelector(getEditModeProfile)\n  const isEditInputProfileForm = useSelector(getEditInputProfileForm)\n  const dispatch = useDispatch()\n\n  const onSubmitProfile = (values: ProfileType) => {\n    dispatch(saveProfileThunk(values))\n  }\n\n  const onMainPhotoSelected = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files?.length) {\n      dispatch(savePhotoThunk(e.target.files[0]))\n    }\n  }\n\n  const handleEditInputProfileForm = (bool: boolean) => {\n    dispatch(actions.setEditInputProfileForm(bool))\n  }\n\n  if (!profile) {\n    return <Preloader />\n  }\n\n  return (\n    <div className={s.containerMain}>\n      <div className={s.columnLeft}>\n        <Avatar photo={profile.photos.large} size='large'>\n          {isOwner && !isEditModeProfile && (\n            <div className={s.camera}>\n              <label htmlFor='file_out'>\n                <div className={s.wrapImg}>\n                  <img src={camera} alt='icon' />\n                </div>\n                <input\n                  id='file_out'\n                  hidden\n                  type='file'\n                  onChange={onMainPhotoSelected}\n                />\n              </label>\n            </div>\n          )}\n        </Avatar>\n\n        {isOwner && !isEditModeProfile && (\n          <Button\n            onClick={() => dispatch(actions.setEditModeProfile(true))}\n            variant='outlined'\n            style={stylesEditButton}\n            startIcon={<EditIcon style={{ fontSize: 16 }} />}\n          >\n            Edit profile\n          </Button>\n        )}\n\n        {isEditModeProfile && (\n          <div className={s.buttonsSaveAndCancelProfile}>\n            <Button\n              onClick={() => {\n                handleEditInputProfileForm(false)\n                dispatch(submit('editProfile'))\n              }}\n              disabled={!isEditInputProfileForm}\n              variant='contained'\n              color={theme === 'theme1' ? 'primary' : 'secondary'}\n              fullWidth\n              style={stylesSaveAndCancelButton}\n              startIcon={<SaveIcon />}\n            >\n              Save\n            </Button>\n            <Button\n              onClick={() => {\n                handleEditInputProfileForm(false)\n                dispatch(actions.setEditModeProfile(false))\n              }}\n              variant='outlined'\n              fullWidth\n              style={stylesSaveAndCancelButton}\n              startIcon={<CloseIcon />}\n            >\n              Cancel\n            </Button>\n          </div>\n        )}\n\n        {isEditModeProfile && showSuccessSave && (\n          <div className={s.successSave}>{showSuccessSave}</div>\n        )}\n      </div>\n\n      <div className={s.columnRight}>\n        {!isEditModeProfile && (\n          <div id='scrollToTopOnMount' className={s.fullName}>\n            {profile.fullName}\n          </div>\n        )}\n\n        {!isEditModeProfile && <Status isOwner={isOwner} />}\n\n        {isEditModeProfile ? (\n          <InfoDataForm\n            initialValues={profile}\n            onSubmit={onSubmitProfile}\n            errorProfileContacts={errorProfileContacts}\n            handleEditInputProfileForm={handleEditInputProfileForm}\n          />\n        ) : (\n          <InfoData profile={profile} />\n        )}\n      </div>\n      {/* при переходе на старницу профиля скрол обнулится */}\n      <ScrollToTopOnMount />\n    </div>\n  )\n}\n\nconst InfoContainer = ProfileInfo\nexport default InfoContainer\n","import React from 'react'\nimport { compose } from 'redux'\nimport { connect } from 'react-redux'\nimport { withRouter, RouteComponentProps } from 'react-router-dom'\n\nimport { AppStateType } from '../../redux/redux-store'\nimport {\n  getUserProfile,\n  getStatus,\n  actions,\n} from '../../redux/reducers/profile-reducer'\n\nimport Wall from './Wall/Wall'\nimport InfoContainer from './Info/InfoContainer'\nimport withAuthRedirect from '../common/hoc/withAuthRedirect'\nimport { getEditModeProfile } from '../../redux/selectors/profile-selectors'\n\ntype MapStatePropsType = {\n  authorizedUserID: number | null\n  isEditModeProfile: boolean\n}\n\ntype MapDispatchPropsType = {\n  getUserProfile: (userId: number) => void\n  getStatus: (userId: number) => void\n  setEditModeProfile: (bool: boolean) => void\n}\n\ntype PathParamsType = {\n  userId: string\n}\n\ntype PropsType = MapStatePropsType &\n  MapDispatchPropsType &\n  RouteComponentProps<PathParamsType>\n\nclass ProfileContainer extends React.PureComponent<PropsType> {\n  componentDidMount() {\n    this.refreshProfile()\n  }\n\n  componentDidUpdate(prevProps: PropsType) {\n    const { match } = this.props\n    // рендер при переходе с одной страницы на другую\n    if (match.params.userId !== prevProps.match.params.userId) {\n      this.refreshProfile()\n    }\n  }\n\n  componentWillUnmount() {\n    const { isEditModeProfile, setEditModeProfile } = this.props\n    if (isEditModeProfile) {\n      setEditModeProfile(false)\n    }\n  }\n\n  refreshProfile() {\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    const { match, authorizedUserID, history, getUserProfile, getStatus } =\n      this.props\n    let userId: number | null = +match.params.userId\n\n    if (!userId) {\n      userId = authorizedUserID\n      if (!userId) {\n        history.push('/login')\n      }\n    }\n\n    getUserProfile(userId as number)\n    getStatus(userId as number)\n  }\n\n  render() {\n    const { match, authorizedUserID, isEditModeProfile } = this.props\n    const isOwner = +match.params.userId === authorizedUserID\n\n    return (\n      <>\n        <InfoContainer isOwner={isOwner} />\n        {!isEditModeProfile && isOwner && <Wall />}\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\n  return {\n    authorizedUserID: state.auth.userID,\n    isEditModeProfile: getEditModeProfile(state),\n  }\n}\n\nexport default compose<React.ComponentType>(\n  connect<\n    MapStatePropsType,\n    MapDispatchPropsType,\n    RouteComponentProps<PathParamsType>,\n    AppStateType\n  >(mapStateToProps, {\n    getUserProfile,\n    getStatus,\n    setEditModeProfile: actions.setEditModeProfile,\n  }),\n  withRouter,\n  withAuthRedirect\n)(ProfileContainer)\n","export default __webpack_public_path__ + \"static/media/preloaderStart.ec91d375.svg\";","import React from 'react'\nimport preloaderStart from '../../../img/preloader/preloaderStart.svg'\nimport s from './Preloader.module.scss'\n\nconst PreloaderStart: React.FC = () => {\n  return (\n    <div className={s.container}>\n      <div className={s.wrap}>\n        <img src={preloaderStart} alt='preloader' />\n      </div>\n    </div>\n  )\n}\n\nexport default PreloaderStart\n","export default __webpack_public_path__ + \"static/media/logo.cebb0f3e.svg\";","import {\n  DefaultResponseType,\n  instance,\n  ResultCodeForCaptcha,\n  ResultCodesEnum,\n} from './api'\n\ntype MeDataType = {\n  id: number\n  email: string\n  login: string\n}\n\nconst authAPI = {\n  async me() {\n    const response = await instance.get<DefaultResponseType<MeDataType>>(\n      'auth/me'\n    )\n    return response.data\n  },\n  async login(\n    email: string,\n    password: string,\n    rememberMe = false,\n    captcha: null | string = null\n  ) {\n    const response = await instance.post<\n      DefaultResponseType<\n        { userId: number },\n        ResultCodesEnum | ResultCodeForCaptcha\n      >\n    >('/auth/login', {\n      email,\n      password,\n      rememberMe,\n      captcha,\n    })\n    return response.data\n  },\n  async logout() {\n    const response = await instance.delete<DefaultResponseType>('/auth/login')\n    return response.data\n  },\n}\n\nexport default authAPI\n","import { instance } from './api'\n\ntype GetCaptchaResponseType = {\n  url: string\n}\n\nconst securityAPI = {\n  async getCaptchaURL() {\n    const response = await instance.get<GetCaptchaResponseType>(\n      'security/get-captcha-url'\n    )\n    return response.data\n  },\n}\n\nexport default securityAPI\n","import { FormAction, stopSubmit } from 'redux-form'\nimport { ResultCodesEnum, ResultCodeForCaptcha } from '../../api/api'\nimport authAPI from '../../api/auth-api'\nimport securityAPI from '../../api/security-api'\n\nimport { BaseThunkType, InferActionsTypes } from '../redux-store'\nimport profileAPI from '../../api/profile-api'\n\nconst initialState = {\n  userID: null as number | null,\n  email: null as string | null,\n  login: null as string | null,\n  isAuth: false,\n  captchaURL: null as string | null,\n  myPhoto: null as string | null,\n}\n\nconst authReducer = (\n  state = initialState,\n  action: ActionsTypes\n): InitialStateType => {\n  switch (action.type) {\n    case 'SET_USER_DATA':\n    case 'GET_CAPTCHA_URL_SUCCESS': {\n      return {\n        ...state,\n        ...action.payload,\n      }\n    }\n    case 'SET_MY_PHOTO': {\n      return {\n        ...state,\n        // @ts-ignore\n        myPhoto: action.payload.photo,\n      }\n    }\n    default:\n      return state\n  }\n}\n\nconst actions = {\n  setAuthUserData: (\n    userID: number | null,\n    email: string | null,\n    login: string | null,\n    isAuth: boolean\n  ) => ({\n    type: 'SET_USER_DATA',\n    payload: {\n      userID,\n      email,\n      login,\n      isAuth,\n    } as const,\n  }),\n\n  setCaptcha: (captchaURL: string | null) => ({\n    type: 'GET_CAPTCHA_URL_SUCCESS',\n    payload: { captchaURL } as const,\n  }),\n\n  setMyPhoto: (photo: string | null) => ({\n    type: 'SET_MY_PHOTO',\n    payload: { photo } as const,\n  }),\n}\n\nexport const getAuthUserDataThunk = (): ThunkType => async (dispatch) => {\n  const response = await authAPI.me()\n\n  if (response.resultCode === ResultCodesEnum.Success) {\n    const { id, email, login } = response.data\n    dispatch(actions.setAuthUserData(id, email, login, true))\n  }\n\n  if (response.resultCode === ResultCodesEnum.Error) {\n    const message = response.messages\n    const action = stopSubmit('loginForm', {\n      _error: message.length > 0 ? message[0] : 'Some error',\n    })\n    // Some error - на всякий случай, если с сервера придёт пустое сообщение\n    // при ошибке\n    dispatch(action)\n  }\n\n  if (Object.keys(response.data).length !== 0) {\n    const myProfile = await profileAPI.getProfile(response.data.id)\n    dispatch(actions.setMyPhoto(myProfile.photos.large))\n  }\n}\n\nconst setCaptchaThunk = (): ThunkType => async (dispatch) => {\n  const response = await securityAPI.getCaptchaURL()\n  const captcha = response.url\n  dispatch(actions.setCaptcha(captcha))\n}\n\nexport const loginThunk =\n  (\n    email: string,\n    password: string,\n    rememberMe: boolean,\n    captcha: string | null\n  ): ThunkType =>\n  async (dispatch) => {\n    const response = await authAPI.login(email, password, rememberMe, captcha)\n\n    if (response.resultCode === ResultCodesEnum.Success) {\n      dispatch(getAuthUserDataThunk())\n      dispatch(actions.setCaptcha(null))\n    }\n\n    if (response.resultCode === ResultCodesEnum.Error) {\n      const message = response.messages\n      const action = stopSubmit('loginForm', {\n        _error: message.length > 0 ? message[0] : 'Some error',\n      })\n      // Some error - на всякий случай, если с сервера придёт пустое сообщение\n      // при ошибке\n      dispatch(action)\n    }\n\n    if (response.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\n      dispatch(setCaptchaThunk())\n    }\n  }\n\nexport const logoutThunk = (): ThunkType => async (dispatch) => {\n  const response = await authAPI.logout()\n\n  if (response.resultCode === ResultCodesEnum.Success) {\n    dispatch(actions.setAuthUserData(null, null, null, false))\n    dispatch(actions.setMyPhoto(null))\n  }\n}\n\nexport default authReducer\n\ntype InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>\n","import { BaseThunkType, InferActionsTypes } from '../redux-store'\nimport { getAuthUserDataThunk } from './auth-reducer'\n\ntype themeType = 'theme1' | 'theme2'\n\nconst initialState = {\n  initialized: false,\n  theme: 'theme1',\n}\n\nconst appReducer = (\n  state = initialState,\n  action: ActionsTypes\n): InitialStateType => {\n  switch (action.type) {\n    case 'INITIALIZED_SUCCESS': {\n      return {\n        ...state,\n        initialized: true,\n      }\n    }\n    case 'TOGGLE_THEME': {\n      return {\n        ...state,\n        theme: action.theme,\n      }\n    }\n    default:\n      return state\n  }\n}\n\nexport const actions = {\n  initializedSuccess: () => ({ type: 'INITIALIZED_SUCCESS' } as const),\n  setTheme: (theme: themeType) => ({ type: 'TOGGLE_THEME', theme } as const),\n}\n\nexport const initializeAppThunk = (): ThunkType => async (dispatch) => {\n  await dispatch(getAuthUserDataThunk())\n  dispatch(actions.initializedSuccess())\n}\n\nexport default appReducer\n\ntype InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>\n","import React, { Dispatch, SetStateAction } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport Button from '@material-ui/core/Button'\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp'\nimport InvertColorsIcon from '@material-ui/icons/InvertColors'\nimport { IconButton } from '@material-ui/core'\nimport s from './Header.module.scss'\nimport logo from '../../img/icons/logo.svg'\nimport Avatar from '../common/Avatar/Avatar'\n\nimport {\n  getAuthorizedUserID,\n  getIsAuth,\n  getLogin,\n  getMyPhoto,\n} from '../../redux/selectors/auth-selectors'\nimport { getTheme } from '../../redux/selectors/app-selectors'\nimport { logoutThunk } from '../../redux/reducers/auth-reducer'\nimport { actions } from '../../redux/reducers/app-reducer'\n\nconst Header: React.FC = () => {\n  const isAuth = useSelector(getIsAuth)\n  const login = useSelector(getLogin)\n  const myID = useSelector(getAuthorizedUserID)\n  const myPhoto = useSelector(getMyPhoto)\n  const theme = useSelector(getTheme)\n  const dispatch = useDispatch()\n\n  const [themeLocal, setThemeLocal] = React.useState(theme)\n\n  React.useEffect(() => {\n    const colors = {\n      cyan: `var(--color-cyan-${themeLocal})`,\n      cyanLight: `var(--color-cyanLight-${themeLocal})`,\n      cyanMedium: `var(--color-cyanMedium-${themeLocal})`,\n      cyanDark: `var(--color-cyanDark-${themeLocal})`,\n      darkBlue: `var(--color-darkBlue-${themeLocal})`,\n      darkBlueTransparent: `var(--color-darkBlueTransparent-${themeLocal})`,\n    }\n\n    const keys = Object.keys(colors)\n    const values = Object.values(colors)\n\n    for (let i = 0; i < keys.length; i++) {\n      document.body.style.setProperty(`--color-${keys[i]}`, values[i])\n    }\n  }, [theme, themeLocal])\n\n  // чтение и применение темы из Local Storage\n  React.useEffect(() => {\n    // @ts-ignore\n    const themeFromLocalStorage = JSON.parse(localStorage.getItem('theme'))\n\n    if (themeFromLocalStorage) {\n      dispatch(actions.setTheme(themeFromLocalStorage))\n      setThemeLocal(themeFromLocalStorage)\n    }\n  }, [dispatch])\n\n  // запись темы в Local Storage\n  React.useEffect(() => {\n    localStorage.setItem('theme', JSON.stringify(theme))\n  }, [theme])\n\n  return (\n    <header className={s.header}>\n      <NavLink className={s.logoAndTitle} to='/profile'>\n        <img src={logo} alt='logo' />\n        <span className={s.headerTitleDesctop}>Social network</span>\n        <span hidden className={s.headerTitleMobile}>\n          SN\n        </span>\n      </NavLink>\n\n      <div className={s.rightColumn}>\n        {isAuth ? (\n          <>\n            <NavLink className={s.loginAndPhoto} to={`/profile/${myID}`}>\n              <Avatar photo={myPhoto} size='small' />\n              <span className={s.loginName}>{login}</span>\n            </NavLink>\n\n            <ButtonChangeTheme\n              theme={theme}\n              themeLocal={themeLocal}\n              setThemeLocal={setThemeLocal}\n            />\n\n            <span className={s.buttonLogoutDesctop}>\n              <Button\n                onClick={() => dispatch(logoutThunk())}\n                variant='outlined'\n                style={{ marginRight: '12px' }}\n                startIcon={<ExitToAppIcon />}\n              >\n                Log out\n              </Button>\n            </span>\n            <span hidden className={s.buttonLogoutMobile}>\n              <IconButton\n                onClick={() => dispatch(logoutThunk())}\n                aria-label='logout'\n                type='submit'\n              >\n                <ExitToAppIcon />\n              </IconButton>\n            </span>\n          </>\n        ) : (\n          <ButtonChangeTheme\n            theme={theme}\n            themeLocal={themeLocal}\n            setThemeLocal={setThemeLocal}\n          />\n        )}\n      </div>\n    </header>\n  )\n}\n\ntype PropsType = {\n  theme: string\n  themeLocal: string\n  setThemeLocal: Dispatch<SetStateAction<string>>\n}\n\nconst ButtonChangeTheme: React.FC<PropsType> = (props) => {\n  const { theme, themeLocal, setThemeLocal } = props\n  const dispatch = useDispatch()\n\n  const toggleTheme = () => {\n    dispatch(actions.setTheme(themeLocal === 'theme1' ? 'theme2' : 'theme1'))\n    setThemeLocal(themeLocal === 'theme1' ? 'theme2' : 'theme1')\n  }\n\n  return (\n    <>\n      <span className={s.buttonThemeDesctop}>\n        <Button\n          color={theme === 'theme1' ? 'primary' : 'secondary'}\n          style={{ padding: '6px 12px', marginRight: '12px' }}\n          onClick={toggleTheme}\n          startIcon={<InvertColorsIcon />}\n        >\n          Change theme\n        </Button>\n      </span>\n\n      <span hidden className={s.buttonThemeMobile}>\n        <IconButton\n          onClick={toggleTheme}\n          aria-label='changeTheme'\n          type='submit'\n          style={{ margin: '0 12px' }}\n        >\n          <InvertColorsIcon\n            color={theme === 'theme1' ? 'primary' : 'secondary'}\n          />\n        </IconButton>\n      </span>\n    </>\n  )\n}\nexport default Header\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { NavLink, RouteComponentProps, withRouter } from 'react-router-dom'\n\nimport cn from 'classnames'\nimport s from './Navbar.module.scss'\nimport { getAuthorizedUserID } from '../../redux/selectors/auth-selectors'\n\ntype PathParamsType = {\n  pathname: string\n  profileUrl?: string\n}\n\nconst Navbar: React.FC<RouteComponentProps<PathParamsType>> = ({\n  location: { pathname },\n}) => {\n  const authorizedUserID = useSelector(getAuthorizedUserID)\n  const profileUrl = `/profile/${authorizedUserID}`\n\n  return (\n    <nav className={s.nav} id='navbar'>\n      <NavLink\n        exact\n        to={profileUrl}\n        activeClassName={s.active}\n        className={s.navLink}\n        replace\n      >\n        <IconProfile pathname={pathname} profileUrl={profileUrl} />\n        Profile\n      </NavLink>\n\n      <NavLink\n        to='/chat'\n        activeClassName={s.active}\n        className={s.navLink}\n        replace\n      >\n        <IconChat pathname={pathname} />\n        Chat\n      </NavLink>\n\n      <NavLink\n        to='/users'\n        activeClassName={s.active}\n        className={s.navLink}\n        replace\n      >\n        <IconUsers pathname={pathname} />\n        Find Users\n      </NavLink>\n\n      <NavLink\n        to='/friends'\n        activeClassName={s.active}\n        className={s.navLink}\n        replace\n      >\n        <IconFriends pathname={pathname} />\n        Friends\n      </NavLink>\n    </nav>\n  )\n}\n\nconst IconProfile: React.FC<PathParamsType> = ({ pathname, profileUrl }) => {\n  return (\n    <svg\n      width='24'\n      height='24'\n      viewBox='0 0 24 24'\n      className={cn(s.navLinkImg, {\n        [s.activeIcon]: pathname === profileUrl,\n      })}\n    >\n      {/* eslint-disable-next-line max-len */}\n      <path d='M12,4A4,4 0 0,1 16,8A4,4 0 0,1 12,12A4,4 0 0,1 8,8A4,4 0 0,1 12,4M12,14C16.42,14 20,15.79 20,18V20H4V18C4,15.79 7.58,14 12,14Z' />\n    </svg>\n  )\n}\n\nconst IconChat: React.FC<PathParamsType> = ({ pathname }) => {\n  return (\n    <svg\n      width='24'\n      height='24'\n      viewBox='0 0 24 24'\n      className={cn(s.navLinkImg, {\n        [s.activeIcon]: pathname === '/chat',\n      })}\n    >\n      {/* eslint-disable-next-line max-len */}\n      <path d='M20,2H4A2,2 0 0,0 2,4V22L6,18H20A2,2 0 0,0 22,16V4C22,2.89 21.1,2 20,2Z' />\n    </svg>\n  )\n}\n\nconst IconUsers: React.FC<PathParamsType> = ({ pathname }) => {\n  return (\n    <svg\n      width='24'\n      height='24'\n      viewBox='0 0 24 24'\n      className={cn(s.navLinkImg, {\n        [s.activeIcon]: pathname === '/users',\n      })}\n    >\n      {/* eslint-disable-next-line max-len */}\n      <path d='M15.5,12C18,12 20,14 20,16.5C20,17.38 19.75,18.21 19.31,18.9L22.39,22L21,23.39L17.88,20.32C17.19,20.75 16.37,21 15.5,21C13,21 11,19 11,16.5C11,14 13,12 15.5,12M15.5,14A2.5,2.5 0 0,0 13,16.5A2.5,2.5 0 0,0 15.5,19A2.5,2.5 0 0,0 18,16.5A2.5,2.5 0 0,0 15.5,14M10,4A4,4 0 0,1 14,8C14,8.91 13.69,9.75 13.18,10.43C12.32,10.75 11.55,11.26 10.91,11.9L10,12A4,4 0 0,1 6,8A4,4 0 0,1 10,4M2,20V18C2,15.88 5.31,14.14 9.5,14C9.18,14.78 9,15.62 9,16.5C9,17.79 9.38,19 10,20H2Z' />\n    </svg>\n  )\n}\n\nconst IconFriends: React.FC<PathParamsType> = ({ pathname }) => {\n  return (\n    <svg\n      width='24'\n      height='24'\n      viewBox='0 0 24 24'\n      className={cn(s.navLinkImg, {\n        [s.activeIcon]: pathname === '/friends',\n      })}\n    >\n      {/* eslint-disable-next-line max-len */}\n      <path d='M12,5.5A3.5,3.5 0 0,1 15.5,9A3.5,3.5 0 0,1 12,12.5A3.5,3.5 0 0,1 8.5,9A3.5,3.5 0 0,1 12,5.5M5,8C5.56,8 6.08,8.15 6.53,8.42C6.38,9.85 6.8,11.27 7.66,12.38C7.16,13.34 6.16,14 5,14A3,3 0 0,1 2,11A3,3 0 0,1 5,8M19,8A3,3 0 0,1 22,11A3,3 0 0,1 19,14C17.84,14 16.84,13.34 16.34,12.38C17.2,11.27 17.62,9.85 17.47,8.42C17.92,8.15 18.44,8 19,8M5.5,18.25C5.5,16.18 8.41,14.5 12,14.5C15.59,14.5 18.5,16.18 18.5,18.25V20H5.5V18.25M0,20V18.5C0,17.11 1.89,15.94 4.45,15.6C3.86,16.28 3.5,17.22 3.5,18.25V20H0M24,20H20.5V18.25C20.5,17.22 20.14,16.28 19.55,15.6C22.11,15.94 24,17.11 24,18.5V20Z' />\n    </svg>\n  )\n}\n\nexport default withRouter(Navbar)\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\n\nimport cn from 'classnames'\nimport Button from '@material-ui/core/Button'\nimport s from './Login.module.scss'\nimport renderTextField from '../common/ElementCustom/renderTextField'\nimport renderCheckbox from '../common/ElementCustom/renderCheckbox'\n\nimport {\n  getAuthorizedUserID,\n  getCaptchaURL,\n  getIsAuth,\n} from '../../redux/selectors/auth-selectors'\nimport { getTheme } from '../../redux/selectors/app-selectors'\nimport { loginThunk } from '../../redux/reducers/auth-reducer'\n\nconst validate = (values: LoginFormValuesType) => {\n  type ErrorsType = {\n    email?: string\n    password?: string\n    captcha?: string\n  }\n\n  const errors: ErrorsType = {}\n\n  if (\n    values.email &&\n    !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n  ) {\n    errors.email = 'Invalid email address'\n  }\n\n  return errors\n}\n\ntype OwnPropsType = {\n  captchaURL: string | null\n}\n\ntype LoginFormValuesType = {\n  email: string\n  password: string\n  rememberMe: boolean\n  captcha: string\n}\n\nconst Login: React.FC = () => {\n  const isAuth = useSelector(getIsAuth)\n  const captchaURL = useSelector(getCaptchaURL)\n  const userID = useSelector(getAuthorizedUserID)\n  const dispatch = useDispatch()\n\n  const onSubmit = (values: LoginFormValuesType) => {\n    dispatch(\n      loginThunk(\n        values.email,\n        values.password,\n        values.rememberMe,\n        values.captcha\n      )\n    )\n  }\n\n  if (isAuth) {\n    return <Redirect to={`/profile/${userID}`} />\n  }\n\n  return (\n    <div className={s.wrap}>\n      <div className={s.body}>\n        <h1>Log in</h1>\n        <LoginReduxForm onSubmit={onSubmit} captchaURL={captchaURL} />\n      </div>\n    </div>\n  )\n}\n\nconst LoginForm: React.FC<\n  InjectedFormProps<LoginFormValuesType, OwnPropsType> & OwnPropsType\n> = ({ handleSubmit, error, captchaURL }) => {\n  const dispatch = useDispatch()\n  const theme = useSelector(getTheme)\n\n  const onTestAccountSubmit = (email: string, password: string) => {\n    dispatch(loginThunk(email, password, false, null))\n  }\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <div className={s.loginBlockSubstrate}>\n          <div className={s.loginBlock}>\n            <div className={s.row}>\n              <Field\n                component={renderTextField}\n                name='email'\n                label='Email:'\n                type='email'\n                fullWidth\n              />\n            </div>\n            <div className={s.row}>\n              <Field\n                component={renderTextField}\n                name='password'\n                label='Password:'\n                type='password'\n                fullWidth\n              />\n            </div>\n            <div className={cn(s.row, s.rowCheckbox)}>\n              <Field\n                component={renderCheckbox}\n                name='rememberMe'\n                label='Remember me'\n              />\n            </div>\n\n            {captchaURL && <img src={captchaURL} alt='captcha' />}\n            {captchaURL && (\n              <Field component={renderTextField} fullWidth name='captcha' />\n            )}\n\n            <div className={s.row}>\n              <Button\n                type='submit'\n                variant='contained'\n                color={theme === 'theme1' ? 'primary' : 'secondary'}\n                fullWidth\n                style={{ fontSize: 16, fontWeight: 700, color: '#fff' }}\n              >\n                Log in\n              </Button>\n\n              {error && (\n                <div className={s.formError}>\n                  {error === 'You are not authorized' ? (\n                    <>\n                      <div>1. You are either not authorized</div>\n                      <div>or</div>\n                      <div>\n                        2. Please, unblock third party cookies or show all\n                        cookies (see browser settings)\n                      </div>\n                    </>\n                  ) : (\n                    error\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n        <p>or</p>\n        <Button\n          onClick={() => onTestAccountSubmit('free@samuraijs.com', 'free')}\n          variant='contained'\n          color={theme === 'theme1' ? 'primary' : 'secondary'}\n          fullWidth\n          style={{\n            fontSize: 16,\n            fontWeight: 700,\n            color: '#fff',\n            marginBottom: '15px',\n          }}\n        >\n          Login to test account\n        </Button>\n      </form>\n    </>\n  )\n}\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, OwnPropsType>({\n  form: 'loginForm',\n  validate,\n})(LoginForm)\n\nexport default Login\n","import React from 'react'\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { error: null }\n  }\n\n  componentDidCatch(error) {\n    this.setState({ error })\n  }\n\n  render() {\n    const { error } = this.state\n    const { children } = this.props\n\n    if (error) {\n      return (\n        <div>\n          <h2>Something went wrong</h2>\n          <details style={{ whiteSpace: 'pre-wrap' }}>\n            {error?.toString()}\n          </details>\n        </div>\n      )\n    }\n\n    return children\n  }\n}\n\nexport default ErrorBoundary\n","import React, { Suspense } from 'react'\nimport Preloader from '../Preloader/Preloader'\n\nfunction withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\n  return (props: WCP) => (\n    <Suspense fallback={<Preloader />}>\n      <WrappedComponent {...props} />\n    </Suspense>\n  )\n}\nexport default withSuspense\n","import React from 'react'\nimport { Route, withRouter, Switch, Redirect } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport ProfileContainer from './components/Profile/ProfileContainer'\nimport PreloaderStart from './components/common/Preloader/PreloaderStart'\nimport Header from './components/Header/Header'\nimport Navbar from './components/Navbar/Navbar'\nimport Login from './components/Login/Login'\nimport ErrorBoundary from './components/Error/ErrorBoundary'\nimport withSuspense from './components/common/hoc/withSuspense'\n\nimport s from './App.module.scss'\n\nimport { getInitialized } from './redux/selectors/app-selectors'\nimport { getAuthorizedUserID } from './redux/selectors/auth-selectors'\nimport { initializeAppThunk } from './redux/reducers/app-reducer'\n\nconst ChatContainer = React.lazy(() => import('./components/Chat/Chat'))\nconst UsersContainer = React.lazy(\n  () => import('./components/Users/UsersContainer')\n)\n\nconst SuspendedChat = withSuspense(ChatContainer)\nconst SuspendedUsers = withSuspense(UsersContainer)\n\nconst App: React.FC = () => {\n  const userID = useSelector(getAuthorizedUserID)\n  const initialized = useSelector(getInitialized)\n  const dispatch = useDispatch()\n\n  React.useEffect(() => {\n    dispatch(initializeAppThunk())\n  }, [dispatch])\n\n  if (!initialized) {\n    return <PreloaderStart />\n  }\n\n  return (\n    <div className={s.fon}>\n      <div className={s.container}>\n        <div className={s.appWrapper}>\n          <Header />\n          <Navbar />\n\n          <div className={s.appWrapperContent}>\n            <ErrorBoundary>\n              <Switch>\n                <Redirect from='/profile/undefined' to='/' />\n\n                <Route\n                  path='/profile/:userId'\n                  render={() => <ProfileContainer />}\n                />\n\n                <Route path='/chat' render={() => <SuspendedChat />} />\n\n                <Route path='/friends' render={() => <SuspendedUsers />} />\n\n                <Route path='/users' render={() => <SuspendedUsers />} />\n\n                <Route path='/login' render={() => <Login />} />\n\n                <Redirect exact from='/' to={`/profile/${userID}`} />\n\n                <Redirect from='*' to='/' />\n              </Switch>\n            </ErrorBoundary>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst AppContainer = withRouter(App)\nexport default AppContainer\n","import {\n  applyMiddleware,\n  combineReducers,\n  createStore,\n  compose,\n  Action,\n} from 'redux'\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk'\nimport { reducer as formReducer } from 'redux-form'\n\nimport authReducer from './reducers/auth-reducer'\nimport profileReducer from './reducers/profile-reducer'\nimport usersReducer from './reducers/users-reducer'\nimport appReducer from './reducers/app-reducer'\nimport chatReducer from './reducers/chat-reducer'\n\nconst rootReducer = combineReducers({\n  profilePage: profileReducer,\n  usersPage: usersReducer,\n  auth: authReducer,\n  app: appReducer,\n  form: formReducer,\n  chat: chatReducer,\n})\n\n// types state app\ntype RootReducerType = typeof rootReducer\nexport type AppStateType = ReturnType<RootReducerType>\n\n// types actions\nexport type InferActionsTypes<T> = T extends {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: (...args: any[]) => infer U\n}\n  ? U\n  : never\n\n// type thunks\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<\n  R,\n  AppStateType,\n  unknown,\n  A\n>\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n// @ts-ignore\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunkMiddleware))\n)\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { HashRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux'\n\nimport {\n  createMuiTheme,\n  ThemeProvider,\n  responsiveFontSizes,\n} from '@material-ui/core/styles'\nimport CssBaseline from '@material-ui/core/CssBaseline'\n\nimport AppContainer from './App'\nimport store from './redux/redux-store'\nimport './styles/theme.css'\n\nlet theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    // цвет главных кнопок, активных ссылок в навигации,\n    // декоративных линий, рамок у форм\n    primary: {\n      main: '#00bcd4',\n      // 1-ая тема, синий цвет\n    },\n    secondary: {\n      main: '#00d482',\n      // 2-ая тема, зелёный цвет\n    },\n  },\n})\n\ntheme = responsiveFontSizes(theme)\n\nReactDOM.render(\n  <HashRouter>\n    <ThemeProvider theme={theme}>\n      <Provider store={store}>\n        <CssBaseline />\n        <AppContainer />\n      </Provider>\n    </ThemeProvider>\n  </HashRouter>,\n  document.getElementById('root')\n)\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"InfoDataForm_form__2kPgc\",\"titleForm\":\"InfoDataForm_titleForm__3v9-q\",\"wrap\":\"InfoDataForm_wrap__1Ypq9\",\"contact\":\"InfoDataForm_contact__2dNMg\",\"titleAllContacts\":\"InfoDataForm_titleAllContacts__3gywu\",\"titleContact\":\"InfoDataForm_titleContact__2rYri\",\"errorProfileContacts\":\"InfoDataForm_errorProfileContacts__VDAET\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1kFdy\",\"logoAndTitle\":\"Header_logoAndTitle__E1gOe\",\"headerTitleDesctop\":\"Header_headerTitleDesctop__2wBaa\",\"headerTitleMobile\":\"Header_headerTitleMobile__3ZA7x\",\"rightColumn\":\"Header_rightColumn__2gu4E\",\"loginAndPhoto\":\"Header_loginAndPhoto__1azBA\",\"loginName\":\"Header_loginName__ncEXR\",\"buttonThemeDesctop\":\"Header_buttonThemeDesctop__1GobS\",\"buttonThemeMobile\":\"Header_buttonThemeMobile__1i4f9\",\"buttonLogoutDesctop\":\"Header_buttonLogoutDesctop__2JZG2\",\"buttonLogoutMobile\":\"Header_buttonLogoutMobile__1W2MZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Login_wrap__1LWwk\",\"body\":\"Login_body__3DOsP\",\"loginBlockSubstrate\":\"Login_loginBlockSubstrate__3-IH5\",\"loginBlock\":\"Login_loginBlock__3-8mF\",\"row\":\"Login_row__18i6W\",\"rowCheckbox\":\"Login_rowCheckbox__16VyH\",\"formError\":\"Login_formError__2wlzE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"count\":\"FieldWithCounter_count__Cu5UD\",\"countHidden\":\"FieldWithCounter_countHidden__3sFUY\",\"countYellow\":\"FieldWithCounter_countYellow__1fcWm\",\"countRed\":\"FieldWithCounter_countRed__3W_7S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"camera\":\"InfoContainer_camera__S_wT3\",\"wrapImg\":\"InfoContainer_wrapImg__3f0wV\",\"containerMain\":\"InfoContainer_containerMain__1_k-O\",\"columnLeft\":\"InfoContainer_columnLeft__1Tu-B\",\"columnRight\":\"InfoContainer_columnRight__3c4jr\",\"iconButtonEditProfile\":\"InfoContainer_iconButtonEditProfile__UwC2i\",\"fullName\":\"InfoContainer_fullName__BeYHm\",\"buttonsSaveAndCancelProfile\":\"InfoContainer_buttonsSaveAndCancelProfile__2LcfV\",\"successSave\":\"InfoContainer_successSave__2h9VB\",\"anim\":\"InfoContainer_anim__1vCzv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Status_container__zqQuP\",\"wrap\":\"Status_wrap__myyLI\",\"buttons\":\"Status_buttons__77L_3\",\"buttonWrap\":\"Status_buttonWrap__3M41z\",\"plug\":\"Status_plug__3fW1v\",\"status\":\"Status_status__1QybE\",\"statusNotMy\":\"Status_statusNotMy__3kDuV\",\"noStatus\":\"Status_noStatus__248I2\",\"buttonSave\":\"Status_buttonSave__11rpK\",\"buttonCancel\":\"Status_buttonCancel__2Npnt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Wall_container__2G0Gc\",\"basket\":\"Wall_basket__3lyCa\",\"form\":\"Wall_form__3SIV6\",\"posts\":\"Wall_posts__gFi8c\",\"noPosts\":\"Wall_noPosts__1bP3a\",\"buttonBig\":\"Wall_buttonBig__2Z8kt\",\"buttonIcon\":\"Wall_buttonIcon__2UH4p\"};","import React from 'react'\nimport cn from 'classnames'\nimport unknown from '../../../img/no_photo.svg'\nimport s from './Avatar.module.scss'\n\ntype SizeType = 'small' | 'medium' | 'large'\n\ntype PropsType = {\n  photo: string | null | undefined\n  size?: SizeType\n}\n\nconst Avatar: React.FC<PropsType> = ({ photo, size = 'medium', children }) => {\n  // Проверка тестового аккаунта с id = 1079:\n  // установленное фото на тестовый аккаунт удаляется через короткое время\n  // на сервере и, если с этого аккаунта написано сообщение в чат, то\n  // при отрисовке этого сообщения (с удалённым фото) в ответ приходит\n  // ошибка вместо null | undefined, вскоре сервер опять присылает null\n  // вместо фото, но это происходит не сразу. Для этого случая эта проверка\n  let photoTrue\n  if (photo?.includes('1079')) {\n    photoTrue = null\n  } else {\n    photoTrue = photo\n  }\n\n  return (\n    <div className={s.avatarWrap}>\n      <div\n        className={cn(\n          s.avatar,\n          { [s.large]: size === 'large' },\n          { [s.medium]: size === 'medium' },\n          { [s.small]: size === 'small' }\n        )}\n      >\n        <img src={photoTrue || unknown} alt='avatar' />\n        {children}\n      </div>\n    </div>\n  )\n}\n\nexport default Avatar\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Preloader_container__2zTxu\",\"wrap\":\"Preloader_wrap__1YoGl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Avatar_avatar__3_fhn\",\"avatarWrap\":\"Avatar_avatarWrap__1kMu_\",\"small\":\"Avatar_small__3YJmQ\",\"medium\":\"Avatar_medium__3JNHX\",\"large\":\"Avatar_large__2CWNX\"};"],"sourceRoot":""}