{"version":3,"sources":["hooks/useResizeWindow.tsx","components/Chat/Chat.module.scss","components/Chat/Members/Members.module.scss","components/Chat/Members/ButtonSort/ButtonSort.module.scss","components/Chat/Messages/Messages.module.scss","components/Chat/Messages/Message/Message.module.scss","components/Chat/Members/ButtonSort/BurronSort.tsx","redux/selectors/chat-selectors.ts","components/Chat/Members/Members.tsx","components/Chat/Messages/Message/Message.tsx","components/Chat/Messages/Messages.tsx","components/Chat/Chat.tsx"],"names":["useResizeWindow","width","action","useEffect","handleResizeWindow","window","innerWidth","addEventListener","removeEventListener","module","exports","ButtonSort","props","theme","isReverseSort","setIsReverseSort","isShowAll","isShowMembers","className","cn","s","buttonSortWrap","buttonSort","buttonSortNotShowMembers","Button","onClick","disabled","startIcon","style","fontSize","marginBottom","padding","color","getMessages","state","chat","messages","getChatMembers","filter","value","index","array","findIndex","item","userId","getStatusWS","statusWS","Members","chatMembers","useSelector","useState","setIsShowAll","setIsShowMembers","widthScreen","setWidthScreen","itemsCount","length","hidden","container","aria-hidden","titleWrap","titleWrapDeployed","title","titleArrow","path","mdiChevronDown","size","members","notShowMembers","slice","sort","a","b","userName","localeCompare","map","u","member","Avatar","photo","id","wrapName","Name","name","showAllWrap","showAll","Message","React","memo","message","myID","getAuthorizedUserID","messageContainer","myMessageContainer","avatarMedium","avatarSmall","nameAndMessage","Messages","lastElement","useRef","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","onScroll","e","el","currentTarget","scrollButton","scrollHeight","scrollTop","clientHeight","Math","abs","m","trim","NoElement","elements","writeSomething","ref","AddMessageForm","status","dispatch","useDispatch","setMessage","wrapForm","form","TextField","placeholder","fullWidth","variant","inputProps","maxLength","onChange","IconButton","margin","sendMessage","Chat","getTheme","startMessagesListening","stopMessagesListening","membersAndMessages"],"mappings":"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","file":"static/js/5.00d9d552.chunk.js","sourcesContent":["import { useEffect, Dispatch, SetStateAction } from 'react'\n\nconst useResizeWindow = (\n  width: number,\n  action: Dispatch<SetStateAction<number>>\n) => {\n  useEffect(() => {\n    const handleResizeWindow = () => action(window.innerWidth)\n\n    window.addEventListener('resize', handleResizeWindow)\n    return () => {\n      window.removeEventListener('resize', handleResizeWindow)\n    }\n  }, [width, action])\n}\n\nexport default useResizeWindow\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat\":\"Chat_chat__18S3w\",\"membersAndMessages\":\"Chat_membersAndMessages__1RTR_\",\"form\":\"Chat_form__3kFu7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Members_container__2pna_\",\"titleWrap\":\"Members_titleWrap__d7NLT\",\"title\":\"Members_title__154Tu\",\"titleArrow\":\"Members_titleArrow__1dMqh\",\"members\":\"Members_members__H4WWv\",\"member\":\"Members_member__2LXCJ\",\"wrapName\":\"Members_wrapName__2m4Ej\",\"showAllWrap\":\"Members_showAllWrap__fuTjQ\",\"showAll\":\"Members_showAll__1QIPw\",\"notShowMembers\":\"Members_notShowMembers__1sD9m\",\"titleWrapDeployed\":\"Members_titleWrapDeployed__3oL3i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonSortWrap\":\"ButtonSort_buttonSortWrap__2rfNk\",\"buttonSortNotShowMembers\":\"ButtonSort_buttonSortNotShowMembers__3K8VO\",\"buttonSort\":\"ButtonSort_buttonSort__2e7NN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Messages_container__2Bams\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageContainer\":\"Message_messageContainer__2kjzX\",\"myMessageContainer\":\"Message_myMessageContainer__2WRWS\",\"message\":\"Message_message__1v5P9\",\"nameAndMessage\":\"Message_nameAndMessage__4B2fF\",\"avatarMedium\":\"Message_avatarMedium__3Yqu1\",\"avatarSmall\":\"Message_avatarSmall__11YXQ\"};","import React, { Dispatch, SetStateAction } from 'react'\n\nimport cn from 'classnames'\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown'\nimport ArrowDropUpIcon from '@material-ui/icons/ArrowDropUp'\nimport { Button } from '@material-ui/core'\nimport s from './ButtonSort.module.scss'\n\ntype PropsType = {\n  theme: string\n  isShowAll: boolean\n  isShowMembers: boolean\n  isReverseSort: boolean\n  setIsReverseSort: Dispatch<SetStateAction<boolean>>\n}\n\nconst ButtonSort: React.FC<PropsType> = (props) => {\n  const { theme, isReverseSort, setIsReverseSort, isShowAll, isShowMembers } =\n    props\n\n  const stylesSortByName: React.CSSProperties = {\n    fontSize: '10px',\n    marginBottom: '5px',\n    padding: '3px 10px 3px 7px',\n  }\n\n  const handleClick = () =>\n    isReverseSort ? setIsReverseSort(false) : setIsReverseSort(true)\n\n  return (\n    <div\n      className={cn(\n        s.buttonSortWrap,\n        { [s.buttonSort]: isShowMembers },\n        { [s.buttonSortNotShowMembers]: !isShowMembers }\n      )}\n    >\n      <Button\n        onClick={handleClick}\n        disabled={!isShowAll}\n        startIcon={isReverseSort ? <ArrowDropUpIcon /> : <ArrowDropDownIcon />}\n        style={stylesSortByName}\n        color={theme === 'theme1' ? 'primary' : 'secondary'}\n      >\n        sort by name\n      </Button>\n    </div>\n  )\n}\n\nexport default ButtonSort\n","import { AppStateType } from '../redux-store'\n\nexport const getMessages = (state: AppStateType) => state.chat.messages\n\nexport const getChatMembers = (state: AppStateType) =>\n  state.chat.messages.filter((value, index, array) =>\n    array.findIndex((item) => item.userId === value.userId) === index\n      ? value\n      : null\n  )\n\nexport const getStatusWS = (state: AppStateType) => state.chat.statusWS\n","import React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport cn from 'classnames'\nimport Icon from '@mdi/react'\nimport { mdiChevronDown } from '@mdi/js'\nimport s from './Members.module.scss'\n\nimport useResizeWindow from '../../../hooks/useResizeWindow'\n\nimport ButtonSort from './ButtonSort/BurronSort'\nimport Avatar from '../../common/Avatar/Avatar'\nimport Name from '../../common/Name/Name'\n\nimport { getChatMembers } from '../../../redux/selectors/chat-selectors'\nimport { ChatMessageAPIType, ChatMessageType } from '../../../types/types'\n\nconst Members: React.FC<{ theme: string }> = ({ theme }) => {\n  const chatMembers = useSelector(getChatMembers)\n\n  const [isShowAll, setIsShowAll] = useState(false)\n  const [isReverseSort, setIsReverseSort] = useState(false)\n  const [isShowMembers, setIsShowMembers] = useState(false)\n  const [widthScreen, setWidthScreen] = useState(window.innerWidth)\n\n  useResizeWindow(widthScreen, setWidthScreen)\n\n  const handleClickTitle = () => {\n    if (widthScreen <= 760) {\n      if (isShowMembers) {\n        setIsShowMembers(false)\n      } else {\n        setIsShowMembers(true)\n      }\n    }\n  }\n\n  const itemsCount = isShowAll ? chatMembers.length : 2\n\n  const sortMembers = (a: ChatMessageType, b: ChatMessageType): number =>\n    isReverseSort\n      ? b.userName.localeCompare(a.userName)\n      : a.userName.localeCompare(b.userName)\n\n  return (\n    <section hidden={!chatMembers.length} className={s.container}>\n      <div\n        aria-hidden='true'\n        className={cn(s.titleWrap, { [s.titleWrapDeployed]: isShowMembers })}\n        onClick={handleClickTitle}\n      >\n        <h1 className={s.title}>Members</h1>\n        <Icon\n          className={s.titleArrow}\n          path={mdiChevronDown}\n          title='ArrowShowMembers'\n          size='18px'\n        />\n      </div>\n\n      <ButtonSort\n        theme={theme}\n        isShowAll={isShowAll}\n        isShowMembers={isShowMembers}\n        isReverseSort={isReverseSort}\n        setIsReverseSort={setIsReverseSort}\n      />\n\n      <div\n        className={cn(\n          { [s.members]: isShowMembers },\n          { [s.notShowMembers]: !isShowMembers }\n        )}\n      >\n        {chatMembers &&\n          [...chatMembers]\n            .slice(0, itemsCount)\n            .sort(sortMembers)\n            .map((u: ChatMessageAPIType) => (\n              <div className={s.member} key={u.userId}>\n                <Avatar photo={u.photo} size='small' id={u.userId} />\n\n                <div className={s.wrapName}>\n                  <Name id={u.userId} name={u.userName} size='small' />\n                </div>\n              </div>\n            ))}\n\n        {chatMembers.length > 2 && !isShowAll ? (\n          <div className={s.showAllWrap}>\n            <span\n              aria-hidden='true'\n              className={s.showAll}\n              onClick={() => setIsShowAll(true)}\n            >\n              show all {chatMembers.length} ...\n            </span>\n          </div>\n        ) : (\n          ''\n        )}\n      </div>\n    </section>\n  )\n}\n\nexport default Members\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nimport cn from 'classnames'\nimport s from './Message.module.scss'\n\nimport Avatar from '../../../common/Avatar/Avatar'\nimport Name from '../../../common/Name/Name'\n\nimport { getAuthorizedUserID } from '../../../../redux/selectors/auth-selectors'\nimport { ChatMessageAPIType } from '../../../../types/types'\n\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(\n  ({ message: { userId, photo, userName, message } }) => {\n    const myID = useSelector(getAuthorizedUserID)\n\n    return (\n      <article\n        className={cn(s.messageContainer, {\n          [s.myMessageContainer]: myID === userId,\n        })}\n      >\n        <div className={s.avatarMedium}>\n          <Avatar photo={photo} size='medium' id={userId} />\n        </div>\n        <div hidden className={s.avatarSmall}>\n          <Avatar photo={photo} size='small' id={userId} />\n        </div>\n\n        <div className={s.nameAndMessage}>\n          <Name id={userId} name={userName} size='normal' />\n          <div className={s.message}>{message}</div>\n        </div>\n      </article>\n    )\n  }\n)\n\nexport default Message\n","import React, { useEffect, useRef, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport s from './Messages.module.scss'\n\nimport Message from './Message/Message'\nimport NoElement from '../../common/NoElement/NoElement'\n\nimport { getMessages } from '../../../redux/selectors/chat-selectors'\n\nimport { ChatMessageType } from '../../../types/types'\n\nconst Messages: React.FC = () => {\n  const messages = useSelector(getMessages)\n  const lastElement = useRef<HTMLDivElement>(null)\n  const [isAutoScroll, setIsAutoScroll] = useState(true)\n\n  const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {\n    const el = e.currentTarget\n    const scrollButton = el.scrollHeight - el.scrollTop - el.clientHeight\n\n    if (Math.abs(scrollButton) < 1) {\n      if (!isAutoScroll) setIsAutoScroll(true)\n    } else if (isAutoScroll) setIsAutoScroll(false)\n  }\n\n  useEffect(() => {\n    if (isAutoScroll) {\n      lastElement.current?.scrollIntoView({ behavior: 'smooth' })\n    }\n  }, [messages, isAutoScroll])\n\n  return (\n    <section className={s.container} onScroll={handleScroll}>\n      {messages.length ? (\n        messages\n          .filter((m) => m.message.trim().length > 0)\n          .map((m: ChatMessageType) => <Message key={m.id} message={m} />)\n      ) : (\n        <NoElement elements='messages' writeSomething />\n      )}\n      <div ref={lastElement} />\n    </section>\n  )\n}\n\nexport default Messages\n","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport IconButton from '@material-ui/core/IconButton'\nimport SendIcon from '@material-ui/icons/Send'\nimport { TextField } from '@material-ui/core'\nimport s from './Chat.module.scss'\n\nimport Members from './Members/Members'\nimport Messages from './Messages/Messages'\n\nimport { getTheme } from '../../redux/selectors/app-selectors'\nimport { getStatusWS } from '../../redux/selectors/chat-selectors'\nimport {\n  sendMessage,\n  startMessagesListening,\n  stopMessagesListening,\n} from '../../redux/reducers/chat-reducer'\n\nimport { StatusWSType } from '../../types/types'\n\nconst Chat: React.FC = () => {\n  const status = useSelector(getStatusWS)\n  const theme = useSelector(getTheme)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(startMessagesListening())\n    return () => {\n      dispatch(stopMessagesListening())\n    }\n  }, [dispatch])\n\n  return (\n    <main className={s.chat}>\n      {/* error появляется, когда пропадает интернет, на несколько\n      миллисекунд и сменяется другим статусом? */}\n      {status === 'error' && (\n        <div>Some error occured. Please, refresh the page...</div>\n      )}\n      <div className={s.membersAndMessages}>\n        <Messages />\n        <Members theme={theme} />\n      </div>\n      <AddMessageForm theme={theme} status={status} />\n    </main>\n  )\n}\n\ntype FormPropsType = {\n  theme: string\n  status: StatusWSType\n}\n\nconst AddMessageForm: React.FC<FormPropsType> = ({ theme, status }) => {\n  const dispatch = useDispatch()\n  const [message, setMessage] = useState('')\n\n  const handleSendMessage = () => {\n    if (!message.trim()) {\n      return\n    }\n    dispatch(sendMessage(message))\n    setMessage('')\n  }\n\n  const handleChangeInput = (e: React.ChangeEvent<HTMLInputElement>) =>\n    setMessage(e.currentTarget.value)\n\n  return (\n    <div className={s.wrapForm}>\n      <div className={s.form}>\n        <TextField\n          name='newMessageText'\n          placeholder='Enter your message...'\n          fullWidth\n          variant='outlined'\n          inputProps={{ maxLength: 100 }}\n          color={theme === 'theme1' ? 'primary' : 'secondary'}\n          onChange={handleChangeInput}\n          value={message}\n        />\n        <IconButton\n          title='Send message'\n          color={theme === 'theme1' ? 'primary' : 'secondary'}\n          style={{ margin: '5px' }}\n          onClick={handleSendMessage}\n          disabled={status === 'pending'}\n        >\n          <SendIcon />\n        </IconButton>\n      </div>\n    </div>\n  )\n}\n\nexport default Chat\n"],"sourceRoot":""}