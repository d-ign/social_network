{"version":3,"sources":["img/no_photo.svg","img/preloaderTheme1.svg","img/preloaderTheme2.svg","components/common/Preloader/Preloader.tsx","components/common/hoc/withAuthRedirect.tsx","api/api.ts","api/users-api.ts","redux/reducers/users-reducer.ts","api/chat-api.ts","redux/reducers/chat-reducer.ts","components/Profile/Info/InfoData/InfoData.module.scss","redux/selectors/app-selectors.ts","components/Profile/Info/InfoDataForm/InfoDataForm.module.scss","components/Navbar/Navbar.module.scss","components/Profile/Wall/Post/Post.module.scss","redux/selectors/auth-selectors.ts","api/profile-api.ts","redux/reducers/profile-reducer.ts","components/common/ElementCustom/renderTextField.jsx","redux/selectors/profile-selectors.ts","components/Profile/Wall/Post/Post.tsx","components/Profile/Wall/Wall.tsx","img/icons/camera.svg","components/Profile/Info/Status/stylesCustomMaterialUI.jsx","components/common/inputCount/inputCount.js","components/Profile/Info/Status/Status.tsx","components/common/ElementCustom/renderCheckbox.jsx","components/Profile/Info/InfoDataForm/InfoDataForm.tsx","components/Profile/Info/InfoData/InfoData.tsx","components/Profile/Info/InfoContainer.tsx","components/Profile/ProfileContainer.tsx","img/preloaderStart.svg","components/common/Preloader/PreloaderStart.tsx","img/icons/logo.svg","api/auth-api.ts","api/security-api.ts","redux/reducers/auth-reducer.ts","redux/reducers/app-reducer.ts","components/Header/Header.tsx","components/Navbar/Navbar.tsx","components/Login/Login.tsx","components/common/hoc/withSuspense.tsx","App.tsx","redux/redux-store.ts","index.tsx","components/Header/Header.module.scss","components/Login/Login.module.scss","components/Profile/Info/InfoContainer.module.scss","components/Profile/Info/Status/Status.module.scss","components/Profile/Wall/Wall.module.scss","components/common/Avatar/Avatar.tsx","components/common/Preloader/Preloader.module.scss","components/common/Avatar/Avatar.module.scss","App.module.scss"],"names":["Preloader","theme","useSelector","getTheme","className","s","container","wrap","src","preloaderTheme1","preloaderTheme2","alt","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","ResultCodesEnum","ResultCodeForCaptcha","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","term","friend","get","response","data","followUser","id","post","unfollowUser","delete","initialState","users","totalUsersCount","isFetching","followingInProgress","actions","followSuccess","userID","type","unfollowSuccess","setUsers","addUsers","setTotalUsersCount","count","clearUsers","toggleIsFetching","toggleFollowingProgress","page","dispatch","getState","a","usersPage","length","items","totalCount","_followUnfollowFlow","apiMethod","actionCreator","resultCode","Success","follow","bind","unfollow","usersReducer","action","map","u","followed","filter","ws","subscribers","notifySubscribersAboutStatus","status","forEach","reconnect","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","openHandler","errorHandler","console","error","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","message","send","messages","payload","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","stopMessagesListening","sendMessage","chatReducer","m","v1","item","index","array","module","exports","getInitialized","app","initialized","getLogin","login","getIsAuth","getAuthorizedUserID","getCaptchaURL","captchaURL","getMyPhoto","myPhoto","profileAPI","getProfile","getStatus","updateStatus","put","savePhotoAPI","photoFile","formData","FormData","append","saveProfileAPI","profile","posts","author","idPost","likesCount","isLikeClick","postsForDelete","isSelectedPost","isClickDeleteSelectedPosts","showSuccessSave","errorProfileContacts","isEditModeProfile","isEditInputProfileForm","initializePosts","addPost","newPostText","deletePost","setLikeOnPost","deletetLikeOnPost","setPostForDeleting","deletePostForDeleting","clearPostsForDelete","toggleIsSelectedPost","bool","toggleIsClickDeleteSelectedPosts","setUserProfile","setStatus","savePhotoSuccess","photos","showSuccessSaveProfile","showErrorProfileContacts","setEditModeProfile","setEditInputProfileForm","getUserProfile","userId","profileReducer","newPost","fullName","p","RenderTextField","label","input","placeholder","multiline","variant","inputProps","onInput","onFocus","meta","touched","warning","fullWidth","custom","TextField","color","style","profilePage","getStatusSelector","getShowSuccessSave","getErrorProfileContacts","getPosts","getPostsForDelete","getToggleClickDeleteSelectedPosts","getIsSelectedPost","getEditModeProfile","getEditInputProfileForm","Post","photo","handleDeleteOnePost","addIdPostBeforeDeleting","deleteIdPostBeforeDeleting","useState","isClickDeletePost","setIsClickDeletePost","isSelectedPostLocal","setIsSelectedPostLocal","useDispatch","cn","postContainer","postDelete","includes","columnLeft","aria-hidden","avatar","postSelectedTheme1","postSelectedTheme2","onClick","Avatar","unknown","size","columnCenter","name","columnRight","hidden","IconButton","aria-label","wrapLike","like","noLike","PostReduxForm","reduxForm","form","handleSubmit","onSubmit","Field","component","renderTextField","maxLength","buttonBig","Button","margin","width","endIcon","buttonIcon","Wall","React","useEffect","arr","localStorage","getItem","setItem","stringify","postsElements","basket","height","startIcon","values","reset","noPosts","useStyles","makeStyles","stylesStatus","minHeight","lineHeight","padding","spacing","backgroundColor","borderRadius","handleFocusCount","target","select","document","getElementById","textContent","value","elem","display","fontSize","position","right","top","handleBlurCount","handleInputCount","num","Status","isOwner","classes","editMode","setEditMode","isEditInputStatusForm","setIsEditInputStatusForm","statusLocal","setStatusLocal","ref","statusRef","useRef","handleClickOutside","event","current","contains","Input","autoFocus","onBlur","onChange","currentTarget","buttons","buttonWrap","disabled","plug","noStatus","statusNotMy","RenderCheckbox","FormControlLabel","control","Checkbox","checked","labelPlacement","marginLeft","InfoDataForm","initialValues","handleEditInputProfileForm","titleForm","wrapForCount","countStyle","renderCheckbox","titleAllContacts","Object","keys","contacts","key","contact","titleContact","Contact","memo","contactTitle","contactValue","contactTextWrap","contactText","href","replace","InfoData","containerForm","aboutMe","title","text","job","lookingForAJob","lookingForAJobDescription","some","el","ScrollToTopOnMount","window","scrollTo","InfoContainer","stylesSaveAndCancelButton","containerMain","large","camera","htmlFor","wrapImg","file","files","marginTop","buttonsSaveAndCancelProfile","submit","successSave","Error","saveProfileThunk","ProfileContainer","this","refreshProfile","prevProps","match","params","authorizedUserID","history","PureComponent","compose","withRouter","PreloaderStart","preloaderStart","authAPI","me","email","password","rememberMe","captcha","logout","securityAPI","getAuthUserDataThunk","stopSubmit","_error","myProfile","loginThunk","CaptchaIsRequired","url","logoutThunk","authReducer","appReducer","Header","myID","themeLocal","setThemeLocal","toggleTheme","colors","cyan","cyanLight","cyanMedium","cyanDark","darkBlue","darkBlueTransparent","i","body","setProperty","themeFromLocalStorage","header","logoAndTitle","logo","headerTitleDesctop","headerTitleMobile","rightColumn","loginAndPhoto","loginName","buttonThemeDesctop","marginRight","buttonThemeMobile","buttonLogoutDesctop","buttonLogoutMobile","IconProfile","pathname","profileUrl","viewBox","navLinkImg","activeIcon","d","IconChat","IconFriends","IconUsers","location","nav","exact","activeClassName","active","navLink","LoginReduxForm","validate","errors","test","loginBlockSubstrate","loginBlock","row","rowCheckbox","fontWeight","formError","marginBottom","Login","withSuspense","fallback","ChatContainer","lazy","UsersContainer","SuspendedChat","SuspendedUsers","AppContainer","fon","appWrapper","appWrapperContent","from","path","render","rootReducer","combineReducers","formReducer","chat","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","createMuiTheme","palette","primary","main","secondary","responsiveFontSizes","ReactDOM","ThemeProvider","CssBaseline","children","avatarWrap","medium","small"],"mappings":"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","file":"static/js/main.72771030.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/no_photo.8bf0768a.svg\";","export default __webpack_public_path__ + \"static/media/preloaderTheme1.364be474.svg\";","export default __webpack_public_path__ + \"static/media/preloaderTheme2.6aed94f2.svg\";","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nimport preloaderTheme1 from '../../../img/preloaderTheme1.svg'\nimport preloaderTheme2 from '../../../img/preloaderTheme2.svg'\nimport s from './Preloader.module.scss'\n\nimport { getTheme } from '../../../redux/selectors/app-selectors'\n\nconst Preloader: React.FC = () => {\n  const theme = useSelector(getTheme)\n\n  return (\n    <div className={s.container}>\n      <div className={s.wrap}>\n        <img\n          src={theme === 'theme1' ? preloaderTheme1 : preloaderTheme2}\n          alt='preloader'\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default Preloader\n","import React from 'react'\nimport { Redirect } from 'react-router'\nimport { connect } from 'react-redux'\nimport { AppStateType } from '../../../redux/redux-store'\n\nconst mapStateToPropsForRedirect = (state: AppStateType) => ({\n  isAuth: state.auth.isAuth,\n})\n\ntype MapStatePropsType = {\n  isAuth: boolean\n}\n\n// WCP - пропсы WrappedComponent\nexport default function withAuthRedirect<WCP>(\n  WrappedComponent: React.ComponentType<WCP>\n) {\n  const RedirectComponent: React.FC<MapStatePropsType & unknown> = (props) => {\n    const { isAuth, ...restProps } = props\n    if (!isAuth) return <Redirect to='/login' />\n    return <WrappedComponent {...(restProps as WCP)} />\n  }\n\n  return connect<MapStatePropsType, never, WCP, AppStateType>(\n    mapStateToPropsForRedirect\n  )(RedirectComponent)\n}\n","import axios from 'axios'\n\nexport const instance = axios.create({\n  withCredentials: true, // цепляем cookie к запросу\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n  headers: {\n    'API-KEY': 'ddfbc45b-6923-498e-99d5-3a4897cbb31f',\n  },\n})\n\nexport enum ResultCodesEnum {\n  Success = 0,\n  Error = 1,\n}\n\nexport enum ResultCodeForCaptcha {\n  CaptchaIsRequired = 10,\n}\n\nexport type DefaultResponseType<D = never, RC = ResultCodesEnum> = {\n  data: D\n  resultCode: RC\n  messages: Array<string> | string\n}\n","import { UserType } from '../types/types'\nimport { DefaultResponseType, instance } from './api'\n\ntype GetUsersType = {\n  items: Array<UserType>\n  totalCount: number\n  error: string\n}\n\nconst usersAPI = {\n  async getUsers(\n    currentPage = 1,\n    pageSize: number,\n    term?: string,\n    friend?: boolean\n  ) {\n    const response = await instance.get<GetUsersType>(\n      `users?page=${currentPage}&count=${pageSize}&term=${term}&friend=${friend}`\n    )\n    return response.data\n  },\n  async followUser(id: number) {\n    const response = await instance.post<DefaultResponseType>(\n      `follow/${id}`,\n      {}\n    )\n    return response.data\n  },\n  async unfollowUser(id: number) {\n    const response = await instance.delete<DefaultResponseType>(`follow/${id}`)\n    return response.data\n  },\n}\n\nexport default usersAPI\n","import { Dispatch } from 'redux'\nimport { DefaultResponseType, ResultCodesEnum } from '../../api/api'\nimport usersAPI from '../../api/users-api'\nimport { UserType } from '../../types/types'\nimport { BaseThunkType, InferActionsTypes } from '../redux-store'\n\nconst initialState = {\n  users: [] as Array<UserType>,\n\n  pageSize: 10,\n  totalUsersCount: 0,\n\n  isFetching: true,\n  // disabling the button after pressing\n  followingInProgress: [] as Array<number>, // array of users ID\n}\n\nconst usersReducer = (\n  state = initialState,\n  action: ActionsTypes\n): InitialStateType => {\n  switch (action.type) {\n    case 'FOLLOW': {\n      return {\n        ...state,\n        users: state.users.map((u) => {\n          if (u.id === action.userID) {\n            return { ...u, followed: true }\n          }\n          return u\n        }),\n      }\n    }\n    case 'UNFOLLOW': {\n      return {\n        ...state,\n        users: state.users.map((u) => {\n          if (u.id === action.userID) {\n            return { ...u, followed: false }\n          }\n          return u\n        }),\n      }\n    }\n    case 'SET_USERS': {\n      return {\n        ...state,\n        users: [...action.users],\n      }\n    }\n    case 'ADD_USERS': {\n      return {\n        ...state,\n        users: [...state.users, ...action.users],\n      }\n    }\n    case 'CLEAR_USERS': {\n      return {\n        ...state,\n        users: [],\n      }\n    }\n    case 'SET_TOTAL_USERS_COUNT': {\n      return {\n        ...state,\n        totalUsersCount: action.count,\n      }\n    }\n    case 'TOGGLE_IS_FETCHING': {\n      return {\n        ...state,\n        isFetching: action.isFetching,\n      }\n    }\n    case 'TOGGLE_IS_FOLLOWING_PROGRESS': {\n      return {\n        ...state,\n        followingInProgress: action.isFetching\n          ? [...state.followingInProgress, action.userID]\n          : state.followingInProgress.filter((id) => id !== action.userID),\n      }\n    }\n    default:\n      return state\n  }\n}\n\nexport const actions = {\n  followSuccess: (userID: number) => ({ type: 'FOLLOW', userID } as const),\n  unfollowSuccess: (userID: number) => ({ type: 'UNFOLLOW', userID } as const),\n\n  setUsers: (users: Array<UserType>) => ({ type: 'SET_USERS', users } as const),\n  addUsers: (users: Array<UserType>) => ({ type: 'ADD_USERS', users } as const),\n  setTotalUsersCount: (totalUsersCount: number) =>\n    ({\n      type: 'SET_TOTAL_USERS_COUNT',\n      count: totalUsersCount,\n    } as const),\n  clearUsers: () => ({ type: 'CLEAR_USERS' } as const),\n\n  toggleIsFetching: (isFetching: boolean) =>\n    ({ type: 'TOGGLE_IS_FETCHING', isFetching } as const),\n  toggleFollowingProgress: (isFetching: boolean, userID: number) =>\n    ({\n      type: 'TOGGLE_IS_FOLLOWING_PROGRESS',\n      isFetching,\n      userID,\n    } as const),\n}\n\nexport const getUsers =\n  (page: number, term: string, friend?: boolean): ThunkType =>\n  async (dispatch, getState) => {\n    dispatch(actions.toggleIsFetching(true))\n\n    const response = await usersAPI.getUsers(\n      page,\n      getState().usersPage.pageSize,\n      term,\n      friend\n    )\n\n    // первичная загрузка\n    if (term.length === 0 && page === 1) {\n      dispatch(actions.setUsers(response.items))\n    }\n    // получение больше пользователей\n    if (page > 1) {\n      dispatch(actions.addUsers(response.items))\n    }\n    // первичный поиск\n    if (term.length > 0 && page === 1) {\n      dispatch(actions.clearUsers())\n      dispatch(actions.setUsers(response.items))\n    }\n\n    dispatch(actions.setTotalUsersCount(response.totalCount))\n    dispatch(actions.toggleIsFetching(false))\n  }\n\ntype DispatchType = Dispatch<ActionsTypes>\nconst _followUnfollowFlow = async (\n  dispatch: DispatchType,\n  id: number,\n  apiMethod: (id: number) => Promise<DefaultResponseType>,\n  actionCreator: (id: number) => ActionsTypes\n) => {\n  dispatch(actions.toggleFollowingProgress(true, id))\n  const response = await apiMethod(id)\n\n  if (response.resultCode === ResultCodesEnum.Success) {\n    dispatch(actionCreator(id))\n  }\n  dispatch(actions.toggleFollowingProgress(false, id))\n}\n\nexport const follow =\n  (id: number): ThunkType =>\n  async (dispatch) => {\n    await _followUnfollowFlow(\n      dispatch,\n      id,\n      usersAPI.followUser.bind(usersAPI),\n      actions.followSuccess\n    )\n  }\n\nexport const unfollow =\n  (id: number): ThunkType =>\n  async (dispatch) => {\n    await _followUnfollowFlow(\n      dispatch,\n      id,\n      usersAPI.unfollowUser.bind(usersAPI),\n      actions.unfollowSuccess\n    )\n  }\n\nexport default usersReducer\n\nexport type InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>\n","let ws: WebSocket | null = null\n\nlet subscribers = {\n  'messages-received': [] as Array<MessagesReceivedSubscriberType>,\n  'status-changed': [] as Array<StatusChangedSubscriberType>,\n}\n\ntype EventsCustomNamesType = 'messages-received' | 'status-changed'\n\nconst notifySubscribersAboutStatus = (status: StatusType) => {\n  if (subscribers) {\n    subscribers['status-changed'].forEach((s) => s(status))\n  }\n}\n\nconst reconnect = () => {\n  notifySubscribersAboutStatus('pending')\n  setTimeout(createChannel, 3000)\n}\n\nconst messageHandler = (e: MessageEvent) => {\n  const newMessages = JSON.parse(e.data)\n  if (subscribers) {\n    subscribers['messages-received'].forEach((s) => s(newMessages))\n  }\n}\n\nconst openHandler = () => {\n  notifySubscribersAboutStatus('ready')\n}\n\nconst errorHandler = () => {\n  notifySubscribersAboutStatus('error')\n  // eslint-disable-next-line no-console\n  console.error('REFRESH PAGE')\n}\n\nconst cleanUp = () => {\n  ws?.removeEventListener('close', reconnect)\n  ws?.removeEventListener('message', messageHandler)\n  ws?.removeEventListener('open', openHandler)\n  ws?.removeEventListener('error', errorHandler)\n}\n\nfunction createChannel() {\n  cleanUp()\n  ws?.close()\n\n  ws = new WebSocket(\n    'wss://social-network.samuraijs.com/handlers/ChatHandler.ashx'\n  )\n\n  notifySubscribersAboutStatus('pending')\n\n  ws.addEventListener('close', reconnect)\n  ws.addEventListener('message', messageHandler)\n  ws.addEventListener('open', openHandler)\n  ws.addEventListener('error', errorHandler)\n}\n\nexport const chatAPI = {\n  start() {\n    createChannel()\n  },\n  stop() {\n    if (subscribers) {\n      subscribers['messages-received'] = []\n      subscribers['status-changed'] = []\n    }\n    cleanUp()\n    ws?.close()\n  },\n  subscribe(\n    eventName: EventsCustomNamesType,\n    callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType\n  ) {\n    if (subscribers) {\n      // @ts-ignore\n      subscribers[eventName].push(callback)\n    }\n  },\n\n  // отписка (забираем возможность api уведомлять store)\n  unsubscribe(\n    eventName: EventsCustomNamesType,\n    callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType\n  ) {\n    if (subscribers) {\n      // @ts-ignore\n      subscribers = subscribers[eventName]?.filter((s) => s !== callback)\n      // оставляем всех, кроме callback\n    }\n  },\n\n  sendMessage(message: string) {\n    ws?.send(message)\n  },\n}\n\nexport type ChatMessageAPIType = {\n  message: string\n  photo: string\n  userId: number\n  userName: string\n}\n\nexport type StatusType = 'pending' | 'ready' | 'error'\n\ntype MessagesReceivedSubscriberType = (\n  messages: Array<ChatMessageAPIType>\n) => void\n\ntype StatusChangedSubscriberType = (status: StatusType) => void\n","import { FormAction } from 'redux-form'\nimport { Dispatch } from 'redux'\nimport { v1 } from 'uuid'\nimport { BaseThunkType, InferActionsTypes } from '../redux-store'\nimport { chatAPI, ChatMessageAPIType, StatusType } from '../../api/chat-api'\n\nexport type ChatMessageType = ChatMessageAPIType & { id: string }\n\nconst initialState = {\n  messages: [] as ChatMessageType[],\n  status: 'pending' as StatusType,\n}\n\nconst chatReducer = (\n  state = initialState,\n  action: ActionsTypes\n): InitialStateType => {\n  switch (action.type) {\n    case 'MESSAGES_RECEIVED': {\n      return {\n        ...state,\n        messages: [\n          ...state.messages,\n          ...action.payload.messages.map((m) => ({ ...m, id: v1() })),\n        ].filter((item, index, array) => index >= array.length - 100),\n        // TODO v1() - вызов не чистой функции\n      }\n    }\n    case 'STATUS_CHANGED': {\n      return {\n        ...state,\n        status: action.payload.status,\n      }\n    }\n    default:\n      return state\n  }\n}\n\nconst actions = {\n  messagesReceived: (messages: ChatMessageAPIType[]) =>\n    ({\n      type: 'MESSAGES_RECEIVED',\n      payload: { messages },\n    } as const),\n  statusChanged: (status: StatusType) =>\n    ({\n      type: 'STATUS_CHANGED',\n      payload: { status },\n    } as const),\n}\n\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\n  // чтобы два раза не вызывалась одна и та же функция,\n  // сначала при подписке, потом при отписке\n  if (_newMessageHandler === null) {\n    _newMessageHandler = (messages) => {\n      dispatch(actions.messagesReceived(messages))\n    }\n  }\n  return _newMessageHandler\n}\n\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\n  // чтобы два раза не вызывалась одна и та же функция,\n  // сначала при подписке, потом при отписке\n  if (_statusChangedHandler === null) {\n    _statusChangedHandler = (status) => {\n      dispatch(actions.statusChanged(status))\n    }\n  }\n  return _statusChangedHandler\n}\n\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\n  chatAPI.start()\n  chatAPI.subscribe('messages-received', newMessageHandlerCreator(dispatch))\n  chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\n}\n\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\n  chatAPI.unsubscribe('messages-received', newMessageHandlerCreator(dispatch))\n  chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch))\n  chatAPI.stop()\n}\n\nexport const sendMessage = (message: string): ThunkType => {\n  return async () => {\n    chatAPI.sendMessage(message)\n  }\n}\n\nexport default chatReducer\n\ntype InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerForm\":\"InfoData_containerForm__4u5ww\",\"wrap\":\"InfoData_wrap__2PdAB\",\"aboutMe\":\"InfoData_aboutMe__1mAal\",\"job\":\"InfoData_job__3P8SV\",\"contacts\":\"InfoData_contacts__23mm2\",\"title\":\"InfoData_title__iejTT\",\"text\":\"InfoData_text__3UZdr\",\"contact\":\"InfoData_contact__1qGtW\",\"contactTitle\":\"InfoData_contactTitle__1ewog\",\"contactTextWrap\":\"InfoData_contactTextWrap__2_ZWp\",\"contactText\":\"InfoData_contactText__wM_du\"};","import { AppStateType } from '../redux-store'\n\nexport const getInitialized = (state: AppStateType) => state.app.initialized\n\nexport const getTheme = (state: AppStateType) => state.app.theme\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"InfoDataForm_form__14vyY\",\"titleForm\":\"InfoDataForm_titleForm__184eL\",\"wrap\":\"InfoDataForm_wrap__15fpP\",\"contact\":\"InfoDataForm_contact__1TXbJ\",\"titleAllContacts\":\"InfoDataForm_titleAllContacts__1H2gR\",\"titleContact\":\"InfoDataForm_titleContact__JPxik\",\"countStyle\":\"InfoDataForm_countStyle__rFGFZ\",\"wrapForCount\":\"InfoDataForm_wrapForCount__mwZRA\",\"errorProfileContacts\":\"InfoDataForm_errorProfileContacts__mM_VA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__27m-F\",\"navLink\":\"Navbar_navLink__1Hvqf\",\"navLinkImg\":\"Navbar_navLinkImg__1h1CV\",\"active\":\"Navbar_active__10_7D\",\"activeIcon\":\"Navbar_activeIcon__kRwHU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postContainer\":\"Post_postContainer__10ly9\",\"post\":\"Post_post__2ijsE\",\"postDelete\":\"Post_postDelete__1zb6x\",\"holeOut\":\"Post_holeOut__OBFMR\",\"columnLeft\":\"Post_columnLeft__1-P3G\",\"avatar\":\"Post_avatar__f8b4a\",\"postSelectedTheme1\":\"Post_postSelectedTheme1__wJgh8\",\"postSelectedTheme2\":\"Post_postSelectedTheme2__3Jl1F\",\"columnCenter\":\"Post_columnCenter__3f7A1\",\"name\":\"Post_name__Gp3iW\",\"message\":\"Post_message__tEL5H\",\"columnRight\":\"Post_columnRight__2b-zX\",\"wrapLike\":\"Post_wrapLike__2FL8E\",\"likesCount\":\"Post_likesCount__1-MqZ\",\"like\":\"Post_like__3m_KI\",\"noLike\":\"Post_noLike__33n8X\"};","import { AppStateType } from '../redux-store'\n\nexport const getLogin = (state: AppStateType) => state.auth.login\n\nexport const getIsAuth = (state: AppStateType) => state.auth.isAuth\n\nexport const getAuthorizedUserID = (state: AppStateType) => state.auth.userID\n\nexport const getCaptchaURL = (state: AppStateType) => state.auth.captchaURL\n\nexport const getMyPhoto = (state: AppStateType) => state.auth.myPhoto\n","import { PhotosType, ProfileType } from '../types/types'\nimport { DefaultResponseType, instance } from './api'\n\ntype SavePhotoDataType = {\n  photos: PhotosType\n}\n\nconst profileAPI = {\n  async getProfile(id: number | null) {\n    const response = await instance.get<ProfileType>(`profile/${id}`)\n    return response.data\n  },\n\n  async getStatus(id: number) {\n    const response = await instance.get<string>(`profile/status/${id}`)\n    return response.data\n  },\n\n  async updateStatus(status: string) {\n    const response = await instance.put<DefaultResponseType>('profile/status', {\n      status,\n    })\n    return response.data\n  },\n\n  async savePhotoAPI(photoFile: File) {\n    const formData = new FormData()\n    formData.append('image', photoFile)\n    const response = await instance.put<DefaultResponseType<SavePhotoDataType>>(\n      'profile/photo',\n      formData,\n      {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      }\n    )\n    return response.data\n  },\n\n  async saveProfileAPI(profile: ProfileType) {\n    const response = await instance.put<DefaultResponseType>('profile', profile)\n    return response.data\n  },\n}\n\nexport default profileAPI\n","import { v1 } from 'uuid'\nimport { BaseThunkType, InferActionsTypes } from '../redux-store'\n\nimport { PostType, ProfileType, PhotosType } from '../../types/types'\n\nimport { ResultCodesEnum } from '../../api/api'\nimport profileAPI from '../../api/profile-api'\n\nconst initialState = {\n  posts: [\n    {\n      author: 'Denis Ignatov',\n      idPost: '1',\n      message: `Lorem ipsum dolor sit amet consectetur adipisicing elit.\n        Facilis ut quo maiores neque laboriosam. Ratione adipisci\n        reiciendis autem placeat alias necessitatibus pariatur saepe\n        ipsum, temporibus animi, facilis minus doloribus ducimus.`,\n      likesCount: 1,\n      isLikeClick: true,\n    },\n    {\n      author: 'Denis Ignatov',\n      idPost: '2',\n      message: 'Lorem ipsum dolor sit amet consectetur adipisicing elit.',\n      likesCount: 0,\n      isLikeClick: false,\n    },\n    {\n      author: 'Denis Ignatov',\n      idPost: '3',\n      message: `Lorem ipsum dolor sit amet consectetur adipisicing elit.\n        Facilis ut quo maiores neque laboriosam. Ratione adipisci\n        reiciendis autem placeat alias necessitatibus...`,\n      likesCount: 0,\n      isLikeClick: false,\n    },\n  ] as Array<PostType>,\n  postsForDelete: [] as Array<string>,\n  isSelectedPost: false,\n  isClickDeleteSelectedPosts: false, // для анимации поста при удалении\n\n  profile: null as ProfileType | null,\n  status: '',\n  showSuccessSave: '',\n  errorProfileContacts: '',\n  isEditModeProfile: false,\n  isEditInputProfileForm: false,\n}\n\nconst profileReducer = (\n  state = initialState,\n  action: ActionsTypes\n): InitialStateType => {\n  switch (action.type) {\n    case 'SET_USER': {\n      return {\n        ...state,\n        profile: action.profile,\n      }\n    }\n    case 'SET_STATUS': {\n      return {\n        ...state,\n        status: action.status,\n      }\n    }\n    case 'INITIALIZE_POSTS': {\n      return {\n        ...state,\n        posts: action.posts,\n      }\n    }\n    case 'ADD_POST': {\n      const newPost = {\n        author: state.profile?.fullName,\n        idPost: v1(), // TODO вызов не чистой функции\n        message: action.newPostText,\n        likesCount: 0,\n        isLikeClick: false,\n      }\n      return {\n        ...state,\n        posts: [newPost, ...state.posts],\n      }\n    }\n    case 'IS_SELECTED_POST': {\n      return {\n        ...state,\n        isSelectedPost: action.bool,\n      }\n    }\n    case 'SET_POST_FOR_DELETE': {\n      return {\n        ...state,\n        postsForDelete: [...state.postsForDelete, action.idPost],\n      }\n    }\n    case 'DELETE_POST_FOR_DELETE': {\n      return {\n        ...state,\n        postsForDelete: [\n          ...state.postsForDelete.filter((id) => id !== action.idPost),\n        ],\n      }\n    }\n    case 'CLEAR_POSTS_FOR_DELETE': {\n      return {\n        ...state,\n        postsForDelete: [],\n      }\n    }\n    case 'TOGGLE_CLICK_DELETE_SELECTED_POST': {\n      return {\n        ...state,\n        isClickDeleteSelectedPosts: action.bool,\n      }\n    }\n    case 'DELETE_POST': {\n      return {\n        ...state,\n        posts: state.posts.filter((p) => p.idPost !== action.idPost),\n      }\n    }\n    case 'SET_LIKE_ON_POST': {\n      return {\n        ...state,\n        posts: [\n          ...state.posts.map((p) => {\n            if (p.idPost === action.idPost) {\n              return {\n                ...p,\n                likesCount: ++p.likesCount,\n                isLikeClick: true,\n              }\n            }\n            return p\n          }),\n        ],\n      }\n    }\n    case 'DELETE_LIKE_ON_POST': {\n      return {\n        ...state,\n        posts: [\n          ...state.posts.map((p) => {\n            if (p.idPost === action.idPost) {\n              return {\n                ...p,\n                likesCount: --p.likesCount,\n                isLikeClick: false,\n              }\n            }\n            return p\n          }),\n        ],\n      }\n    }\n    case 'SAVE_PHOTO_SUCCESS': {\n      return {\n        ...state,\n        profile: { ...state.profile, photos: action.photos } as ProfileType,\n      }\n    }\n    case 'SHOW_SUCCESS_SAVE': {\n      return {\n        ...state,\n        showSuccessSave: action.message,\n      }\n    }\n    case 'SHOW_ERROR_PROFILE_CONTACTS': {\n      return {\n        ...state,\n        errorProfileContacts: action.message,\n      }\n    }\n    case 'TOGGLE_EDIT_MODE_PROFILE': {\n      return {\n        ...state,\n        isEditModeProfile: action.bool,\n      }\n    }\n    case 'TOGGLE_EDIT_INPUT_PROFILE_FORM': {\n      return {\n        ...state,\n        isEditInputProfileForm: action.bool,\n      }\n    }\n    default:\n      return state\n  }\n}\n\nexport const actions = {\n  initializePosts: (posts: Array<PostType>) =>\n    ({ type: 'INITIALIZE_POSTS', posts } as const),\n  addPost: (newPostText: string) =>\n    ({ type: 'ADD_POST', newPostText } as const),\n  deletePost: (idPost: string) => ({ type: 'DELETE_POST', idPost } as const),\n  // лайки-лайки-лайки\n  setLikeOnPost: (idPost: string) =>\n    ({ type: 'SET_LIKE_ON_POST', idPost } as const),\n  deletetLikeOnPost: (idPost: string) =>\n    ({ type: 'DELETE_LIKE_ON_POST', idPost } as const),\n  // удаление нескольких постов\n  setPostForDeleting: (idPost: string) =>\n    ({ type: 'SET_POST_FOR_DELETE', idPost } as const),\n  deletePostForDeleting: (idPost: string) =>\n    ({ type: 'DELETE_POST_FOR_DELETE', idPost } as const),\n  clearPostsForDelete: () => ({ type: 'CLEAR_POSTS_FOR_DELETE' } as const),\n  // для убирания иконок-крестиков у всех постов при выборе нескольких постов\n  toggleIsSelectedPost: (bool: boolean) =>\n    ({ type: 'IS_SELECTED_POST', bool } as const),\n  // для анимации удаления постов\n  toggleIsClickDeleteSelectedPosts: (bool: boolean) =>\n    ({ type: 'TOGGLE_CLICK_DELETE_SELECTED_POST', bool } as const),\n\n  setUserProfile: (profile: ProfileType) =>\n    ({ type: 'SET_USER', profile } as const),\n  setStatus: (status: string) => ({ type: 'SET_STATUS', status } as const),\n  savePhotoSuccess: (photos: PhotosType) =>\n    ({ type: 'SAVE_PHOTO_SUCCESS', photos } as const),\n  showSuccessSaveProfile: (message: string) =>\n    ({ type: 'SHOW_SUCCESS_SAVE', message } as const),\n  showErrorProfileContacts: (message: string) =>\n    ({ type: 'SHOW_ERROR_PROFILE_CONTACTS', message } as const),\n  setEditModeProfile: (bool: boolean) =>\n    ({ type: 'TOGGLE_EDIT_MODE_PROFILE', bool } as const),\n  setEditInputProfileForm: (bool: boolean) =>\n    ({ type: 'TOGGLE_EDIT_INPUT_PROFILE_FORM', bool } as const),\n}\n\nexport const getUserProfile =\n  (userId: number | null): ThunkType =>\n  async (dispatch) => {\n    const response = await profileAPI.getProfile(userId)\n    dispatch(actions.setUserProfile(response))\n  }\n\nexport const getStatus =\n  (id: number): ThunkType =>\n  async (dispatch) => {\n    const response = await profileAPI.getStatus(id)\n    dispatch(actions.setStatus(response))\n  }\n\nexport const updateStatus =\n  (status: string): ThunkType =>\n  async (dispatch) => {\n    const response = await profileAPI.updateStatus(status)\n    if (response.resultCode === ResultCodesEnum.Success) {\n      dispatch(actions.setStatus(status))\n    }\n  }\n\nexport const savePhotoThunk =\n  (file: File): ThunkType =>\n  async (dispatch) => {\n    const response = await profileAPI.savePhotoAPI(file)\n    if (response.resultCode === ResultCodesEnum.Success) {\n      dispatch(actions.savePhotoSuccess(response.data.photos))\n    }\n  }\n\nexport const saveProfileThunk =\n  (profile: ProfileType): ThunkType =>\n  async (dispatch, getState) => {\n    const response = await profileAPI.saveProfileAPI(profile)\n    const { userID } = getState().auth\n\n    if (response.resultCode === ResultCodesEnum.Success) {\n      dispatch(getUserProfile(userID))\n      dispatch(actions.showSuccessSaveProfile('Data saved successfully!'))\n      setTimeout(dispatch, 4000, actions.showSuccessSaveProfile(''))\n      dispatch(actions.showErrorProfileContacts(''))\n    }\n\n    if (response.resultCode === ResultCodesEnum.Error) {\n      // заготовка для показа ошибки конкретного поля\n      // const key = response.data.messages[0]\n      // .match(/Contacts->(\\w+)/)[1].toLowerCase()\n      // dispatch(stopSubmit('editProfile', {\n      //   contacts: { [key]: response.data.messages[0] },\n      // }));\n      dispatch(actions.showErrorProfileContacts(response.messages[0]))\n    }\n  }\n\nexport default profileReducer\n\nexport type InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>\n","import { useSelector } from 'react-redux'\nimport { TextField } from '@material-ui/core'\nimport { getTheme } from '../../../redux/selectors/app-selectors'\n\nconst RenderTextField = (props) => {\n  const {\n    label,\n    input,\n    placeholder,\n    multiline,\n    variant,\n    inputProps,\n    onInput,\n    onFocus,\n    meta: { touched, error, warning },\n    fullWidth,\n    ...custom\n  } = props\n  const theme = useSelector(getTheme)\n  return (\n    <>\n      <TextField\n        color={theme === 'theme1' ? 'primary' : 'secondary'}\n        label={label}\n        placeholder={placeholder}\n        inputProps={inputProps}\n        onInput={onInput}\n        onFocus={onFocus}\n        variant={variant}\n        multiline={multiline}\n        fullWidth={fullWidth}\n        {...input}\n        {...custom}\n      />\n      {touched &&\n        ((error && <span style={{ color: '#f44336' }}>{error}</span>) ||\n          (warning && <span>{warning}</span>))}\n    </>\n  )\n}\n\nexport default RenderTextField\n","import { AppStateType } from '../redux-store'\n\nexport const getProfile = (state: AppStateType) => state.profilePage.profile\n\nexport const getStatusSelector = (state: AppStateType) =>\n  state.profilePage.status\n\nexport const getShowSuccessSave = (state: AppStateType) =>\n  state.profilePage.showSuccessSave\n\nexport const getErrorProfileContacts = (state: AppStateType) =>\n  state.profilePage.errorProfileContacts\n\nexport const getPosts = (state: AppStateType) => state.profilePage.posts\n\nexport const getPostsForDelete = (state: AppStateType) =>\n  state.profilePage.postsForDelete\n\nexport const getToggleClickDeleteSelectedPosts = (state: AppStateType) =>\n  state.profilePage.isClickDeleteSelectedPosts\n\nexport const getIsSelectedPost = (state: AppStateType) =>\n  state.profilePage.isSelectedPost\n\nexport const getEditModeProfile = (state: AppStateType) =>\n  state.profilePage.isEditModeProfile\n\nexport const getEditInputProfileForm = (state: AppStateType) =>\n  state.profilePage.isEditInputProfileForm\n","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport cn from 'classnames'\nimport IconButton from '@material-ui/core/IconButton'\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt'\nimport CloseIcon from '@material-ui/icons/Close'\nimport unknown from '../../../../img/no_photo.svg'\nimport s from './Post.module.scss'\n\nimport Avatar from '../../../common/Avatar/Avatar'\n\nimport {\n  getIsSelectedPost,\n  getPostsForDelete,\n  getToggleClickDeleteSelectedPosts,\n} from '../../../../redux/selectors/profile-selectors'\nimport { getTheme } from '../../../../redux/selectors/app-selectors'\nimport { actions } from '../../../../redux/reducers/profile-reducer'\n\nimport { PostType } from '../../../../types/types'\n\ntype OwnPropsType = {\n  photo: string | null\n  handleDeleteOnePost: (idPost: string) => void\n  addIdPostBeforeDeleting: (idPost: string) => void\n  deleteIdPostBeforeDeleting: (idPost: string) => void\n}\n\nconst Post: React.FC<PostType & OwnPropsType> = (props) => {\n  const {\n    idPost,\n    author,\n    message,\n    likesCount,\n    isLikeClick,\n    photo,\n    handleDeleteOnePost,\n    addIdPostBeforeDeleting,\n    deleteIdPostBeforeDeleting,\n  } = props\n\n  const [isClickDeletePost, setIsClickDeletePost] = useState(false)\n  const [isSelectedPostLocal, setIsSelectedPostLocal] = useState(false)\n\n  const theme = useSelector(getTheme)\n  const isSelectedPost = useSelector(getIsSelectedPost)\n  const isClickDeleteSelectedPosts = useSelector(\n    getToggleClickDeleteSelectedPosts\n  )\n  const postsForDelete = useSelector(getPostsForDelete)\n  const dispatch = useDispatch()\n\n  const handleDeletePost = () => {\n    setIsClickDeletePost(true)\n    setTimeout(() => handleDeleteOnePost(idPost), 300)\n  }\n\n  const handleSetLike = () => {\n    if (!isLikeClick) {\n      dispatch(actions.setLikeOnPost(idPost))\n    } else {\n      dispatch(actions.deletetLikeOnPost(idPost))\n    }\n  }\n\n  return (\n    <div\n      className={cn(s.postContainer, {\n        [s.postDelete]:\n          isClickDeletePost ||\n          (isClickDeleteSelectedPosts && postsForDelete.includes(idPost)),\n        // добавление анимации\n      })}\n    >\n      <div className={s.post}>\n        <div className={s.columnLeft}>\n          <div\n            aria-hidden='true'\n            className={cn(\n              { [s.avatar]: !isSelectedPostLocal },\n              {\n                [s.postSelectedTheme1]:\n                  isSelectedPostLocal && theme === 'theme1',\n              },\n              {\n                [s.postSelectedTheme2]:\n                  isSelectedPostLocal && theme === 'theme2',\n              }\n            )}\n            onClick={() => {\n              if (!isSelectedPostLocal) {\n                // для убирания иконок-крестиков у всех постов\n                dispatch(actions.toggleIsSelectedPost(true))\n                setIsSelectedPostLocal(true)\n                // предварительное добавление поста в список на удаление\n                addIdPostBeforeDeleting(idPost)\n              } else {\n                dispatch(actions.toggleIsSelectedPost(false))\n                setIsSelectedPostLocal(false)\n                deleteIdPostBeforeDeleting(idPost)\n              }\n            }}\n          >\n            <Avatar photo={photo || unknown} size='medium' />\n          </div>\n        </div>\n\n        <div className={s.columnCenter}>\n          <div className={s.name}>{author}</div>\n          <div className={s.message}>{message}</div>\n        </div>\n\n        <div className={s.columnRight}>\n          <div hidden={isSelectedPost}>\n            <IconButton\n              aria-label='deletePost'\n              size='small'\n              onClick={handleDeletePost}\n            >\n              <CloseIcon />\n            </IconButton>\n          </div>\n          <div className={s.wrapLike}>\n            <span className={s.likesCount}>\n              {likesCount > 0 ? `+${likesCount}` : ''}\n            </span>\n            <IconButton aria-label='like' size='small' onClick={handleSetLike}>\n              <ThumbUpAltIcon\n                className={cn(s.like, { [s.noLike]: !isLikeClick })}\n              />\n            </IconButton>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Post\n","import React from 'react'\nimport { Field, InjectedFormProps, reduxForm, reset } from 'redux-form'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport Button from '@material-ui/core/Button'\nimport PostAddIcon from '@material-ui/icons/PostAdd'\nimport { IconButton } from '@material-ui/core'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport cn from 'classnames'\nimport s from './Wall.module.scss'\nimport renderTextField from '../../common/ElementCustom/renderTextField.jsx'\n\nimport Post from './Post/Post'\nimport { PostType } from '../../../types/types'\n\nimport {\n  getPosts,\n  getPostsForDelete,\n} from '../../../redux/selectors/profile-selectors'\nimport { getMyPhoto } from '../../../redux/selectors/auth-selectors'\nimport { actions } from '../../../redux/reducers/profile-reducer'\nimport { getTheme } from '../../../redux/selectors/app-selectors'\n\nconst Wall: React.FC = () => {\n  const posts = useSelector(getPosts)\n  const postsForDelete = useSelector(getPostsForDelete)\n  const myPhoto = useSelector(getMyPhoto)\n  const theme = useSelector(getTheme)\n  const dispatch = useDispatch()\n\n  React.useEffect(() => {\n    // @ts-ignore\n    const arr = JSON.parse(localStorage.getItem('posts'))\n    if (arr) {\n      dispatch(actions.initializePosts(arr))\n    }\n  }, [dispatch])\n\n  React.useEffect(() => {\n    localStorage.setItem('posts', JSON.stringify(posts))\n  }, [posts])\n\n  const handleAddPost = (values: WallValuesFormType) => {\n    if (values.newPostText && values.newPostText.length > 0) {\n      dispatch(actions.addPost(values.newPostText))\n      dispatch(reset('profileNewPostForm'))\n    }\n  }\n\n  const handleDeleteOnePost = (idPost: string) => {\n    dispatch(actions.deletePost(idPost))\n  }\n\n  const handleDeleteSelectedPost = () => {\n    // начало анимации удаления\n    dispatch(actions.toggleIsClickDeleteSelectedPosts(true))\n    // возвращаем индивидуальные иконки-крестики у всех постов\n    dispatch(actions.toggleIsSelectedPost(false))\n\n    setTimeout(() => {\n      postsForDelete.forEach((p) => {\n        dispatch(actions.deletePost(p))\n      })\n      dispatch(actions.clearPostsForDelete())\n\n      // конец анимации удаления\n      dispatch(actions.toggleIsClickDeleteSelectedPosts(false))\n    }, 600)\n  }\n\n  const addIdPostBeforeDeleting = (idPost: string) => {\n    dispatch(actions.setPostForDeleting(idPost))\n  }\n\n  const deleteIdPostBeforeDeleting = (idPost: string) => {\n    dispatch(actions.deletePostForDeleting(idPost))\n  }\n\n  const postsElements = posts.map((p: PostType) => (\n    <Post\n      key={p.idPost}\n      idPost={p.idPost}\n      author={p.author}\n      message={p.message}\n      likesCount={p.likesCount}\n      isLikeClick={p.isLikeClick}\n      photo={myPhoto}\n      handleDeleteOnePost={handleDeleteOnePost}\n      addIdPostBeforeDeleting={addIdPostBeforeDeleting}\n      deleteIdPostBeforeDeleting={deleteIdPostBeforeDeleting}\n    />\n  ))\n\n  return (\n    <div className={s.container}>\n      <div\n        hidden={postsForDelete.length === 0}\n        className={cn({ [s.basket]: postsForDelete.length > 0 })}\n      >\n        <Button\n          onClick={() => handleDeleteSelectedPost()}\n          variant='contained'\n          color={theme === 'theme1' ? 'primary' : 'secondary'}\n          style={{ color: 'white', width: '100%', height: '100%' }}\n          startIcon={<DeleteIcon />}\n        >\n          Delete\n        </Button>\n      </div>\n\n      {postsForDelete.length === 0 && (\n        // @ts-ignore\n        <PostReduxForm onSubmit={handleAddPost} theme={theme} />\n      )}\n\n      <div className={s.posts}>\n        {postsElements}\n        {!posts.length && (\n          <div className={s.noPosts}>\n            <span>No posts yet...</span>\n            <span>Write something!</span>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nconst AddNewPostForm: React.FC<\n  InjectedFormProps<WallValuesFormType, OwnPropsType> & OwnPropsType\n> = ({ handleSubmit, theme }) => {\n  const stylesAddPostButton = {\n    color: 'white',\n    margin: '10px 0 10px 10px',\n    width: '140px',\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className={s.form}>\n        <Field\n          component={renderTextField}\n          name='newPostText'\n          placeholder='Enter the post text...'\n          multiline\n          fullWidth\n          variant='outlined'\n          inputProps={{ maxLength: 1000 }}\n        />\n        <div className={s.buttonBig}>\n          <Button\n            type='submit'\n            variant='contained'\n            color={theme === 'theme1' ? 'primary' : 'secondary'}\n            style={stylesAddPostButton}\n            endIcon={<PostAddIcon />}\n          >\n            Add post\n          </Button>\n        </div>\n        <div hidden className={s.buttonIcon}>\n          <IconButton aria-label='addPost' type='submit'>\n            <PostAddIcon color='primary' />\n          </IconButton>\n        </div>\n      </div>\n    </form>\n  )\n}\n\ntype WallValuesFormType = {\n  newPostText: string\n}\n\ntype OwnPropsType = {\n  theme: string\n}\n\nconst PostReduxForm = reduxForm<WallValuesFormType, OwnPropsType>({\n  form: 'profileNewPostForm',\n})(AddNewPostForm)\n\nexport default Wall\n","export default __webpack_public_path__ + \"static/media/camera.12909c41.svg\";","import { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n  stylesStatus: {\n    minHeight: '30px',\n    lineHeight: '25px',\n    padding: theme.spacing(1),\n    backgroundColor: '#4F4F4F',\n    borderRadius: '5px 5px 0 0',\n  },\n}))\n\nexport default useStyles\n","// Памятка:\n// 1. import {\n// handleInputCount, handleFocusCount, handleBlurCount\n// } from '../../../common/inputCount/inputCount';\n// 2. Передать в input:\n// name='...'\n// onInput={handleInputCount.bind(null, num100)}\n// onFocus={handleFocusCount}\n// onBlur={handleBlurCount}\n// 3. Добавить в компоненту:\n// const num100 = 100;\n// 4. Добавить в компоненту:\n// <span id='statusWrapCount' className={s.countStyle}>\n// <span id='statusCount'></span> of 100\n// </span>\n// 5. Задать родителю span-a:\n// position: relative;\n// 6. Если нужно, чтобы не был виден счётчик при первом отображении input, применить:\n// .countStyle {display: none;}\n\nexport const handleFocusCount = (e) => {\n  e.target.select()\n\n  document.getElementById(`${e.target.name}Count`).textContent =\n    e.target.value.length\n\n  const elem = document.getElementById(`${e.target.name}WrapCount`)\n  elem.style.display = 'inline-block'\n  elem.style.fontSize = '10px'\n  elem.style.position = 'absolute'\n  elem.style.right = '10px'\n  elem.style.top = 0\n}\n\nexport const handleBlurCount = (e) => {\n  document.getElementById(`${e.target.name}WrapCount`).style.display = 'none'\n}\n\nexport const handleInputCount = (num, e) => {\n  const wrap = `${e.target.name}WrapCount`\n  const count = `${e.target.name}Count`\n  const { length } = e.target.value\n\n  if (length < num - 10) document.getElementById(wrap).style.color = 'white'\n  if (length >= num - 10) document.getElementById(wrap).style.color = 'yellow'\n  if (length === num) document.getElementById(wrap).style.color = 'red'\n\n  document.getElementById(count).textContent = e.target.value.length\n}\n","import React, { useEffect, useState, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Input, Button } from '@material-ui/core'\nimport SaveIcon from '@material-ui/icons/Save'\nimport s from './Status.module.scss'\nimport useStyles from './stylesCustomMaterialUI.jsx'\nimport { getTheme } from '../../../../redux/selectors/app-selectors'\n\nimport { getStatusSelector } from '../../../../redux/selectors/profile-selectors'\nimport { updateStatus } from '../../../../redux/reducers/profile-reducer'\nimport {\n  handleInputCount,\n  handleFocusCount,\n  handleBlurCount,\n} from '../../../common/inputCount/inputCount.js'\n\ntype PropsType = {\n  isOwner: boolean\n}\n\nconst Status: React.FC<PropsType> = (props) => {\n  const { isOwner } = props\n  const classes = useStyles()\n\n  const stylesSaveAndButton = {\n    color: '#fff',\n    margin: 10,\n    width: '100%',\n  }\n\n  const status = useSelector(getStatusSelector)\n  const theme = useSelector(getTheme)\n  const dispatch = useDispatch()\n\n  const [editMode, setEditMode] = useState(false)\n  const [isEditInputStatusForm, setIsEditInputStatusForm] = useState(false)\n  const [statusLocal, setStatusLocal] = useState(status)\n  const num300 = 300\n\n  useEffect(() => {\n    setStatusLocal(status)\n  }, [status])\n\n  const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setIsEditInputStatusForm(true)\n    setStatusLocal(e.currentTarget.value)\n  }\n\n  const saveStatus = () => {\n    dispatch(updateStatus(statusLocal))\n    setIsEditInputStatusForm(false)\n    setEditMode(false)\n  }\n\n  function useOutsideAlerter(ref: React.RefObject<HTMLElement>) {\n    useEffect(() => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      function handleClickOutside(event: MouseEvent | any) {\n        if (ref.current && !ref.current.contains(event.target)) {\n          setEditMode(false)\n        }\n      }\n      document.addEventListener('mousedown', handleClickOutside)\n      return () => {\n        document.removeEventListener('mousedown', handleClickOutside)\n      }\n    }, [ref])\n  }\n\n  const statusRef = useRef(null)\n  useOutsideAlerter(statusRef)\n\n  return (\n    <div ref={statusRef} className={s.container}>\n      {editMode && (\n        <div className={s.wrap}>\n          <Input\n            name='status'\n            value={statusLocal}\n            placeholder='Your status...'\n            autoFocus\n            inputProps={{ maxLength: 300 }}\n            className={classes.stylesStatus}\n            color={theme === 'theme1' ? 'primary' : 'secondary'}\n            multiline\n            fullWidth\n            onInput={handleInputCount.bind(null, num300)}\n            onFocus={handleFocusCount}\n            onBlur={handleBlurCount}\n            onChange={onStatusChange}\n          />\n\n          <div className={s.buttons}>\n            <div className={s.buttonWrap}>\n              <Button\n                onClick={saveStatus}\n                disabled={!isEditInputStatusForm}\n                variant='contained'\n                color={theme === 'theme1' ? 'primary' : 'secondary'}\n                style={stylesSaveAndButton}\n                startIcon={<SaveIcon />}\n              >\n                Save\n              </Button>\n            </div>\n\n            <span id='statusWrapCount'>\n              <span id='statusCount' /> of 300\n            </span>\n          </div>\n        </div>\n      )}\n\n      {editMode && <div className={s.plug} />}\n\n      {isOwner && !editMode && (\n        <div\n          aria-hidden='true'\n          className={s.status}\n          onClick={() => setEditMode(true)}\n        >\n          {status || <span className={s.noStatus}>Your status is empty</span>}\n        </div>\n      )}\n\n      {!isOwner && status && <div className={s.statusNotMy}>{status}</div>}\n    </div>\n  )\n}\n\nexport default Status\n","import { FormControlLabel, Checkbox } from '@material-ui/core'\nimport { useSelector } from 'react-redux'\nimport { getTheme } from '../../../redux/selectors/app-selectors'\n\nconst RenderCheckbox = ({ input, label }) => {\n  const theme = useSelector(getTheme)\n  return (\n    <div>\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={!!input.value}\n            onChange={input.onChange}\n            color={theme === 'theme1' ? 'primary' : 'secondary'}\n          />\n        }\n        label={label}\n        labelPlacement='start'\n        style={{ marginLeft: 0 }}\n      />\n    </div>\n  )\n}\n\nexport default RenderCheckbox\n","import React from 'react'\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\n\nimport cn from 'classnames'\nimport renderTextField from '../../../common/ElementCustom/renderTextField.jsx'\nimport renderCheckbox from '../../../common/ElementCustom/renderCheckbox.jsx'\nimport {\n  handleInputCount,\n  handleFocusCount,\n  handleBlurCount,\n} from '../../../common/inputCount/inputCount.js'\nimport s from './InfoDataForm.module.scss'\n\nimport { ProfileType } from '../../../../types/types'\n\ntype OwnPropsType = {\n  errorProfileContacts: string\n  handleEditInputProfileForm: (bool: boolean) => void\n  initialValues: ProfileType\n}\n\nconst DataForm: React.FC<\n  InjectedFormProps<ProfileType, OwnPropsType> & OwnPropsType\n> = (props) => {\n  const {\n    handleSubmit,\n    initialValues,\n    errorProfileContacts,\n    handleEditInputProfileForm,\n  } = props\n\n  const num100 = 100\n  const num1000 = 1000\n\n  return (\n    <form onSubmit={handleSubmit} className={s.form}>\n      <h1 className={s.titleForm}>Edit profile</h1>\n\n      <div className={cn(s.wrap, s.wrapForCount)}>\n        <Field\n          component={renderTextField}\n          name='fullName'\n          label='Name:'\n          placeholder='Your name'\n          variant='filled'\n          fullWidth\n          inputProps={{ maxLength: 100 }}\n          onInput={() => {\n            handleEditInputProfileForm(true)\n            handleInputCount.bind(null, num100)\n          }}\n          onFocus={handleFocusCount}\n          onBlur={handleBlurCount}\n        />\n        <span id='fullNameWrapCount' className={s.countStyle}>\n          <span id='fullNameCount' /> of 100\n        </span>\n      </div>\n\n      <div className={cn(s.wrap, s.wrapForCount)}>\n        <Field\n          component={renderTextField}\n          name='aboutMe'\n          label='About me:'\n          placeholder='Write about yourself!'\n          multiline\n          fullWidth\n          variant='filled'\n          inputProps={{ maxLength: 1000 }}\n          onInput={() => {\n            handleEditInputProfileForm(true)\n            handleInputCount.bind(null, num1000)\n          }}\n          onFocus={handleFocusCount}\n          onBlur={handleBlurCount}\n        />\n        <span id='aboutMeWrapCount' className={s.countStyle}>\n          <span id='aboutMeCount' /> of 1000\n        </span>\n      </div>\n\n      <div className={s.wrap}>\n        <Field\n          component={renderCheckbox}\n          onChange={() => {\n            handleEditInputProfileForm(true)\n          }}\n          name='lookingForAJob'\n          label='Are you looking for a job?'\n        />\n      </div>\n\n      <div className={cn(s.wrap, s.wrapForCount)}>\n        <Field\n          component={renderTextField}\n          name='lookingForAJobDescription'\n          label='Professional skills:'\n          placeholder='What you can do?'\n          multiline\n          fullWidth\n          variant='filled'\n          inputProps={{ maxLength: 1000 }}\n          onInput={() => {\n            handleEditInputProfileForm(true)\n            handleInputCount.bind(null, num1000)\n          }}\n          onFocus={handleFocusCount}\n          onBlur={handleBlurCount}\n        />\n        <span id='lookingForAJobDescriptionWrapCount' className={s.countStyle}>\n          <span id='lookingForAJobDescriptionCount' /> of 1000\n        </span>\n      </div>\n\n      <div className={s.wrap}>\n        <div className={s.titleAllContacts}>Contacts:</div>\n\n        {errorProfileContacts ? (\n          <div className={s.errorProfileContacts}>{errorProfileContacts}</div>\n        ) : (\n          <></>\n        )}\n\n        {Object.keys(initialValues.contacts).map((key) => (\n          <div className={s.contact} key={key}>\n            <div className={s.titleContact}>{key}:</div>\n            <Field\n              component={renderTextField}\n              onInput={() => {\n                handleEditInputProfileForm(true)\n              }}\n              name={`contacts.${key}`}\n              multiline\n              fullWidth\n              placeholder='https://...'\n            />\n          </div>\n        ))}\n      </div>\n    </form>\n  )\n}\n\nconst InfoDataForm = reduxForm<ProfileType, OwnPropsType>({\n  form: 'editProfile',\n})(DataForm)\n\nexport default InfoDataForm\n","import React from 'react'\nimport { ProfileType, СontactsType } from '../../../../types/types'\nimport s from './InfoData.module.scss'\n\ntype PropsType = {\n  profile: ProfileType\n}\n\nconst InfoData: React.FC<PropsType> = ({ profile }) => (\n  <div className={s.containerForm}>\n    <div className={s.wrap}>\n      {profile.aboutMe && (\n        <div className={s.aboutMe}>\n          <div className={s.title}>About me:</div>\n          <div className={s.text}>{profile.aboutMe}</div>\n        </div>\n      )}\n    </div>\n\n    <div className={s.wrap}>\n      <div className={s.job}>\n        <div className={s.title}>Job search:</div>\n        {profile.lookingForAJob ? (\n          <div className={s.text}>Now looking for a job!</div>\n        ) : (\n          <div className={s.text}>I&#39;m not looking for a job</div>\n        )}\n      </div>\n    </div>\n\n    <div className={s.wrap}>\n      {profile.lookingForAJobDescription && (\n        <div className={s.job}>\n          <div className={s.title}>Professional skills:</div>\n          <div className={s.text}>{profile.lookingForAJobDescription}</div>\n        </div>\n      )}\n    </div>\n\n    <div className={s.wrap}>\n      {Object.values(profile.contacts).some((el) => el && el !== '') && (\n        <div className={s.contacts}>\n          <div className={s.title}>My contacts</div>\n          {Object.keys(profile.contacts).map((key) => (\n            <Contact\n              key={key}\n              contactTitle={key}\n              contactValue={profile.contacts[key as keyof СontactsType]}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  </div>\n)\n\ntype ContactPropsType = {\n  contactTitle: string\n  contactValue: string\n}\n\nconst Contact: React.FC<ContactPropsType> = React.memo(\n  ({ contactTitle, contactValue }) => (\n    <>\n      {contactValue && (\n        <div className={s.contact}>\n          <span className={s.contactTitle}>{contactTitle}:</span>\n          <div className={s.contactTextWrap}>\n            <a className={s.contactText} href={contactValue}>\n              {contactValue.replace(/(?:https?):\\/\\/([^/\\s]+)[^\\s]*/gi, '$1')}\n            </a>\n          </div>\n        </div>\n      )}\n    </>\n  )\n)\n\nexport default InfoData\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { submit } from 'redux-form'\n\nimport Button from '@material-ui/core/Button'\nimport EditIcon from '@material-ui/icons/Edit'\nimport SaveIcon from '@material-ui/icons/Save'\nimport CloseIcon from '@material-ui/icons/Close'\nimport s from './InfoContainer.module.scss'\nimport camera from '../../../img/icons/camera.svg'\n\nimport Preloader from '../../common/Preloader/Preloader'\nimport Status from './Status/Status'\nimport Avatar from '../../common/Avatar/Avatar'\nimport InfoDataForm from './InfoDataForm/InfoDataForm'\nimport InfoData from './InfoData/InfoData'\n\nimport { getTheme } from '../../../redux/selectors/app-selectors'\nimport {\n  getEditInputProfileForm,\n  getEditModeProfile,\n  getErrorProfileContacts,\n  getProfile,\n  getShowSuccessSave,\n} from '../../../redux/selectors/profile-selectors'\nimport {\n  actions,\n  savePhotoThunk,\n  saveProfileThunk,\n} from '../../../redux/reducers/profile-reducer'\n\nimport { ProfileType } from '../../../types/types'\n\n// при переходе на старницу профиля скрол обнулится\nfunction ScrollToTopOnMount() {\n  useEffect(() => {\n    window.scrollTo(0, 0)\n  }, [])\n  return null\n}\n\ntype OwnPropsType = {\n  isOwner: boolean\n}\n\nconst ProfileInfo: React.FC<OwnPropsType> = ({ isOwner }) => {\n  const stylesSaveAndCancelButton = {\n    fontSize: 12,\n    color: '#fff',\n    margin: 10,\n  }\n  const stylesEditButton = {\n    fontSize: 12,\n    marginTop: 20,\n  }\n\n  // for InfoDataForm\n  const errorProfileContacts = useSelector(getErrorProfileContacts)\n\n  const theme = useSelector(getTheme)\n  const profile = useSelector(getProfile)\n  const showSuccessSave = useSelector(getShowSuccessSave)\n  const isEditModeProfile = useSelector(getEditModeProfile)\n  const isEditInputProfileForm = useSelector(getEditInputProfileForm)\n  const dispatch = useDispatch()\n\n  const onSubmit = (values: ProfileType) => {\n    dispatch(saveProfileThunk(values))\n  }\n\n  const onMainPhotoSelected = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files?.length) {\n      dispatch(savePhotoThunk(e.target.files[0]))\n    }\n  }\n\n  const handleEditInputProfileForm = (bool: boolean) => {\n    dispatch(actions.setEditInputProfileForm(bool))\n  }\n\n  if (!profile) {\n    return <Preloader />\n  }\n\n  return (\n    <div className={s.containerMain}>\n      {/* при переходе на старницу профиля скрол обнулится */}\n      <ScrollToTopOnMount />\n\n      <div className={s.columnLeft}>\n        <Avatar photo={profile.photos.large} size='large'>\n          {isOwner && !isEditModeProfile && (\n            <div className={s.camera}>\n              <label htmlFor='file_out'>\n                <div className={s.wrapImg}>\n                  <img src={camera} alt='icon' />\n                </div>\n                <input\n                  id='file_out'\n                  hidden\n                  type='file'\n                  onChange={onMainPhotoSelected}\n                />\n              </label>\n            </div>\n          )}\n        </Avatar>\n\n        {isOwner && !isEditModeProfile && (\n          <Button\n            onClick={() => dispatch(actions.setEditModeProfile(true))}\n            variant='outlined'\n            style={stylesEditButton}\n            startIcon={<EditIcon style={{ fontSize: 16 }} />}\n          >\n            Edit profile\n          </Button>\n        )}\n\n        {isEditModeProfile && (\n          <div className={s.buttonsSaveAndCancelProfile}>\n            <Button\n              onClick={() => {\n                handleEditInputProfileForm(false)\n                dispatch(submit('editProfile'))\n              }}\n              disabled={!isEditInputProfileForm}\n              variant='contained'\n              color={theme === 'theme1' ? 'primary' : 'secondary'}\n              fullWidth\n              style={stylesSaveAndCancelButton}\n              startIcon={<SaveIcon />}\n            >\n              Save\n            </Button>\n            <Button\n              onClick={() => {\n                handleEditInputProfileForm(false)\n                dispatch(actions.setEditModeProfile(false))\n              }}\n              variant='outlined'\n              fullWidth\n              style={stylesSaveAndCancelButton}\n              startIcon={<CloseIcon />}\n            >\n              Cancel\n            </Button>\n          </div>\n        )}\n\n        {isEditModeProfile && showSuccessSave && (\n          <div className={s.successSave}>{showSuccessSave}</div>\n        )}\n      </div>\n\n      <div className={s.columnRight}>\n        {!isEditModeProfile && (\n          <div className={s.fullName}>{profile.fullName}</div>\n        )}\n\n        {!isEditModeProfile && <Status isOwner={isOwner} />}\n\n        {isEditModeProfile ? (\n          <InfoDataForm\n            initialValues={profile}\n            errorProfileContacts={errorProfileContacts}\n            onSubmit={onSubmit}\n            handleEditInputProfileForm={handleEditInputProfileForm}\n          />\n        ) : (\n          <InfoData profile={profile} />\n        )}\n      </div>\n    </div>\n  )\n}\n\nconst InfoContainer = ProfileInfo\nexport default InfoContainer\n","import React from 'react'\nimport { compose } from 'redux'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router'\nimport { RouteComponentProps } from 'react-router-dom'\nimport { AppStateType } from '../../redux/redux-store'\nimport {\n  getUserProfile,\n  getStatus,\n  actions,\n} from '../../redux/reducers/profile-reducer'\n\nimport withAuthRedirect from '../common/hoc/withAuthRedirect'\nimport Wall from './Wall/Wall'\nimport InfoContainer from './Info/InfoContainer'\nimport { getEditModeProfile } from '../../redux/selectors/profile-selectors'\n\ntype MapStatePropsType = {\n  authorizedUserID: number | null\n  isEditModeProfile: boolean\n}\n\ntype MapDispatchPropsType = {\n  getUserProfile: (userId: number) => void\n  getStatus: (userId: number) => void\n  setEditModeProfile: (bool: boolean) => void\n}\n\ntype PathParamsType = {\n  userId: string\n}\n\ntype PropsType = MapStatePropsType &\n  MapDispatchPropsType &\n  RouteComponentProps<PathParamsType>\n\nclass ProfileContainer extends React.PureComponent<PropsType> {\n  componentDidMount() {\n    this.refreshProfile()\n  }\n\n  componentDidUpdate(prevProps: PropsType) {\n    const { match } = this.props\n    // рендер при переходе с одной страницы на другую\n    if (match.params.userId !== prevProps.match.params.userId) {\n      this.refreshProfile()\n    }\n  }\n\n  componentWillUnmount() {\n    const { isEditModeProfile, setEditModeProfile } = this.props\n    if (isEditModeProfile) {\n      setEditModeProfile(false)\n    }\n  }\n\n  refreshProfile() {\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    const { match, authorizedUserID, history, getUserProfile, getStatus } =\n      this.props\n    let userId: number | null = +match.params.userId\n\n    if (!userId) {\n      userId = authorizedUserID\n      if (!userId) {\n        history.push('/login')\n      }\n    }\n\n    getUserProfile(userId as number)\n    getStatus(userId as number)\n  }\n\n  render() {\n    const { match, authorizedUserID, isEditModeProfile } = this.props\n    const isOwner = +match.params.userId === authorizedUserID\n\n    return (\n      <>\n        <InfoContainer isOwner={isOwner} />\n        {!isEditModeProfile && isOwner && <Wall />}\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\n  return {\n    authorizedUserID: state.auth.userID,\n    isEditModeProfile: getEditModeProfile(state),\n  }\n}\n\nexport default compose<React.ComponentType>(\n  connect<\n    MapStatePropsType,\n    MapDispatchPropsType,\n    RouteComponentProps<PathParamsType>,\n    AppStateType\n  >(mapStateToProps, {\n    getUserProfile,\n    getStatus,\n    setEditModeProfile: actions.setEditModeProfile,\n  }),\n  withRouter,\n  withAuthRedirect\n)(ProfileContainer)\n","export default __webpack_public_path__ + \"static/media/preloaderStart.ec91d375.svg\";","import React from 'react'\nimport preloaderStart from '../../../img/preloaderStart.svg'\nimport s from './Preloader.module.scss'\n\nconst PreloaderStart: React.FC = () => {\n  return (\n    <div className={s.container}>\n      <div className={s.wrap}>\n        <img src={preloaderStart} alt='preloader' />\n      </div>\n    </div>\n  )\n}\n\nexport default PreloaderStart\n","export default __webpack_public_path__ + \"static/media/logo.cebb0f3e.svg\";","import {\n  DefaultResponseType,\n  instance,\n  ResultCodeForCaptcha,\n  ResultCodesEnum,\n} from './api'\n\ntype MeDataType = {\n  id: number\n  email: string\n  login: string\n}\n\nconst authAPI = {\n  async me() {\n    const response = await instance.get<DefaultResponseType<MeDataType>>(\n      'auth/me'\n    )\n    return response.data\n  },\n  async login(\n    email: string,\n    password: string,\n    rememberMe = false,\n    captcha: null | string = null\n  ) {\n    const response = await instance.post<\n      DefaultResponseType<\n        { userId: number },\n        ResultCodesEnum | ResultCodeForCaptcha\n      >\n    >('/auth/login', {\n      email,\n      password,\n      rememberMe,\n      captcha,\n    })\n    return response.data\n  },\n  async logout() {\n    const response = await instance.delete<DefaultResponseType>('/auth/login')\n    return response.data\n  },\n}\n\nexport default authAPI\n","import { instance } from './api'\n\ntype GetCaptchaResponseType = {\n  url: string\n}\n\nconst securityAPI = {\n  async getCaptchaURL() {\n    const response = await instance.get<GetCaptchaResponseType>(\n      'security/get-captcha-url'\n    )\n    return response.data\n  },\n}\n\nexport default securityAPI\n","import { FormAction, stopSubmit } from 'redux-form'\nimport { ResultCodesEnum, ResultCodeForCaptcha } from '../../api/api'\nimport authAPI from '../../api/auth-api'\nimport securityAPI from '../../api/security-api'\n\nimport { BaseThunkType, InferActionsTypes } from '../redux-store'\nimport profileAPI from '../../api/profile-api'\n\nconst initialState = {\n  userID: null as number | null,\n  email: null as string | null,\n  login: null as string | null,\n  isAuth: false,\n  captchaURL: null as string | null,\n  myPhoto: null as string | null,\n}\n\nconst authReducer = (\n  state = initialState,\n  action: ActionsTypes\n): InitialStateType => {\n  switch (action.type) {\n    case 'SET_USER_DATA':\n    case 'GET_CAPTCHA_URL_SUCCESS': {\n      return {\n        ...state,\n        ...action.payload,\n      }\n    }\n    case 'SET_MY_PHOTO': {\n      return {\n        ...state,\n        // @ts-ignore\n        myPhoto: action.payload.photo,\n      }\n    }\n    default:\n      return state\n  }\n}\n\nconst actions = {\n  setAuthUserData: (\n    userID: number | null,\n    email: string | null,\n    login: string | null,\n    isAuth: boolean\n  ) => ({\n    type: 'SET_USER_DATA',\n    payload: {\n      userID,\n      email,\n      login,\n      isAuth,\n    } as const,\n  }),\n\n  setCaptcha: (captchaURL: string | null) => ({\n    type: 'GET_CAPTCHA_URL_SUCCESS',\n    payload: { captchaURL } as const,\n  }),\n\n  setMyPhoto: (photo: string | null) => ({\n    type: 'SET_MY_PHOTO',\n    payload: { photo } as const,\n  }),\n}\n\nexport const getAuthUserDataThunk = (): ThunkType => async (dispatch) => {\n  const response = await authAPI.me()\n\n  if (response.resultCode === ResultCodesEnum.Success) {\n    const { id, email, login } = response.data\n    dispatch(actions.setAuthUserData(id, email, login, true))\n  }\n\n  if (response.resultCode === ResultCodesEnum.Error) {\n    const message = response.messages\n    const action = stopSubmit('loginForm', {\n      _error: message.length > 0 ? message[0] : 'Some error',\n    })\n    // Some error - на всякий случай, если с сервера придёт пустое сообщение\n    // при ошибке\n    dispatch(action)\n  }\n\n  if (Object.keys(response.data).length !== 0) {\n    const myProfile = await profileAPI.getProfile(response.data.id)\n    dispatch(actions.setMyPhoto(myProfile.photos.large))\n  }\n}\n\nconst setCaptchaThunk = (): ThunkType => async (dispatch) => {\n  const response = await securityAPI.getCaptchaURL()\n  const captcha = response.url\n  dispatch(actions.setCaptcha(captcha))\n}\n\nexport const loginThunk =\n  (\n    email: string,\n    password: string,\n    rememberMe: boolean,\n    captcha: string | null\n  ): ThunkType =>\n  async (dispatch) => {\n    const response = await authAPI.login(email, password, rememberMe, captcha)\n\n    if (response.resultCode === ResultCodesEnum.Success) {\n      dispatch(getAuthUserDataThunk())\n      dispatch(actions.setCaptcha(null))\n    }\n\n    if (response.resultCode === ResultCodesEnum.Error) {\n      const message = response.messages\n      const action = stopSubmit('loginForm', {\n        _error: message.length > 0 ? message[0] : 'Some error',\n      })\n      // Some error - на всякий случай, если с сервера придёт пустое сообщение\n      // при ошибке\n      dispatch(action)\n    }\n\n    if (response.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\n      dispatch(setCaptchaThunk())\n    }\n  }\n\nexport const logoutThunk = (): ThunkType => async (dispatch) => {\n  const response = await authAPI.logout()\n\n  if (response.resultCode === ResultCodesEnum.Success) {\n    dispatch(actions.setAuthUserData(null, null, null, false))\n    dispatch(actions.setMyPhoto(null))\n  }\n}\n\nexport default authReducer\n\ntype InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>\n","import { BaseThunkType, InferActionsTypes } from '../redux-store'\nimport { getAuthUserDataThunk } from './auth-reducer'\n\ntype themeType = 'theme1' | 'theme2'\n\nconst initialState = {\n  initialized: false,\n  theme: 'theme1',\n}\n\nconst appReducer = (\n  state = initialState,\n  action: ActionsTypes\n): InitialStateType => {\n  switch (action.type) {\n    case 'INITIALIZED_SUCCESS': {\n      return {\n        ...state,\n        initialized: true,\n      }\n    }\n    case 'TOGGLE_THEME': {\n      return {\n        ...state,\n        theme: action.theme,\n      }\n    }\n    default:\n      return state\n  }\n}\n\nexport const actions = {\n  initializedSuccess: () => ({ type: 'INITIALIZED_SUCCESS' } as const),\n  setTheme: (theme: themeType) => ({ type: 'TOGGLE_THEME', theme } as const),\n}\n\nexport const initializeAppThunk = (): ThunkType => async (dispatch) => {\n  await dispatch(getAuthUserDataThunk())\n  dispatch(actions.initializedSuccess())\n}\n\nexport default appReducer\n\ntype InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>\n","import React from 'react'\nimport { NavLink, Redirect } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport Button from '@material-ui/core/Button'\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp'\nimport InvertColorsIcon from '@material-ui/icons/InvertColors'\nimport { IconButton } from '@material-ui/core'\nimport s from './Header.module.scss'\nimport logo from '../../img/icons/logo.svg'\nimport Avatar from '../common/Avatar/Avatar'\n\nimport {\n  getAuthorizedUserID,\n  getIsAuth,\n  getLogin,\n  getMyPhoto,\n} from '../../redux/selectors/auth-selectors'\nimport { getTheme } from '../../redux/selectors/app-selectors'\nimport { logoutThunk } from '../../redux/reducers/auth-reducer'\nimport { actions } from '../../redux/reducers/app-reducer'\n\nconst Header: React.FC = () => {\n  const isAuth = useSelector(getIsAuth)\n  const login = useSelector(getLogin)\n  const myID = useSelector(getAuthorizedUserID)\n  const myPhoto = useSelector(getMyPhoto)\n  const theme = useSelector(getTheme)\n  const dispatch = useDispatch()\n\n  const [themeLocal, setThemeLocal] = React.useState(theme)\n\n  const toggleTheme = () => {\n    dispatch(actions.setTheme(themeLocal === 'theme1' ? 'theme2' : 'theme1'))\n    setThemeLocal(themeLocal === 'theme1' ? 'theme2' : 'theme1')\n  }\n\n  React.useEffect(() => {\n    const colors = {\n      cyan: `var(--color-cyan-${themeLocal})`,\n      cyanLight: `var(--color-cyanLight-${themeLocal})`,\n      cyanMedium: `var(--color-cyanMedium-${themeLocal})`,\n      cyanDark: `var(--color-cyanDark-${themeLocal})`,\n      darkBlue: `var(--color-darkBlue-${themeLocal})`,\n      darkBlueTransparent: `var(--color-darkBlueTransparent-${themeLocal})`,\n    }\n\n    const keys = Object.keys(colors)\n    const values = Object.values(colors)\n\n    for (let i = 0; i < keys.length; i++) {\n      document.body.style.setProperty(`--color-${keys[i]}`, values[i])\n    }\n  }, [theme, themeLocal])\n\n  // чтение и применение темы из Local Storage\n  React.useEffect(() => {\n    // @ts-ignore\n    const themeFromLocalStorage = JSON.parse(localStorage.getItem('theme'))\n\n    if (themeFromLocalStorage) {\n      dispatch(actions.setTheme(themeFromLocalStorage))\n      setThemeLocal(themeFromLocalStorage)\n    }\n  }, [dispatch])\n\n  // запись темы в Local Storage\n  React.useEffect(() => {\n    localStorage.setItem('theme', JSON.stringify(theme))\n  }, [theme])\n\n  return (\n    <header className={s.header}>\n      <NavLink className={s.logoAndTitle} to='/profile'>\n        <img src={logo} alt='logo' />\n        <span className={s.headerTitleDesctop}>Social network</span>\n        <span hidden className={s.headerTitleMobile}>\n          SN\n        </span>\n      </NavLink>\n\n      <div className={s.rightColumn}>\n        {isAuth ? (\n          <>\n            <NavLink className={s.loginAndPhoto} to={`/profile/${myID}`}>\n              <Avatar photo={myPhoto} size='small' />\n              <span className={s.loginName}>{login}</span>\n            </NavLink>\n\n            <span className={s.buttonThemeDesctop}>\n              <Button\n                color={theme === 'theme1' ? 'primary' : 'secondary'}\n                style={{ padding: '6px 12px', marginRight: '12px' }}\n                onClick={toggleTheme}\n                startIcon={<InvertColorsIcon />}\n              >\n                Change theme\n              </Button>\n            </span>\n            <span hidden className={s.buttonThemeMobile}>\n              <IconButton\n                onClick={toggleTheme}\n                aria-label='changeTheme'\n                type='submit'\n                style={{ margin: '0 12px' }}\n              >\n                <InvertColorsIcon\n                  color={theme === 'theme1' ? 'primary' : 'secondary'}\n                />\n              </IconButton>\n            </span>\n\n            <span className={s.buttonLogoutDesctop}>\n              <Button\n                onClick={() => dispatch(logoutThunk())}\n                variant='outlined'\n                style={{ marginRight: '12px' }}\n                startIcon={<ExitToAppIcon />}\n              >\n                Log out\n              </Button>\n            </span>\n            <span hidden className={s.buttonLogoutMobile}>\n              <IconButton\n                onClick={() => dispatch(logoutThunk())}\n                aria-label='logout'\n                type='submit'\n              >\n                <ExitToAppIcon />\n              </IconButton>\n            </span>\n          </>\n        ) : (\n          <Redirect to='/login' />\n        )}\n      </div>\n    </header>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { NavLink, RouteComponentProps, withRouter } from 'react-router-dom'\n\nimport cn from 'classnames'\nimport s from './Navbar.module.scss'\nimport { getAuthorizedUserID } from '../../redux/selectors/auth-selectors'\n\ntype PathParamsType = {\n  pathname: string\n  profileUrl?: string\n}\n\nconst Navbar: React.FC<RouteComponentProps<PathParamsType>> = ({\n  location: { pathname },\n}) => {\n  const authorizedUserID = useSelector(getAuthorizedUserID)\n  const profileUrl = `/profile/${authorizedUserID}`\n\n  return (\n    <nav className={s.nav} id='navbar'>\n      <NavLink\n        exact\n        to={profileUrl}\n        activeClassName={s.active}\n        className={s.navLink}\n        replace\n      >\n        <IconProfile pathname={pathname} profileUrl={profileUrl} />\n        Profile\n      </NavLink>\n\n      <NavLink\n        to='/chat'\n        activeClassName={s.active}\n        className={s.navLink}\n        replace\n      >\n        <IconChat pathname={pathname} />\n        Chat\n      </NavLink>\n\n      <NavLink\n        to='/friends'\n        activeClassName={s.active}\n        className={s.navLink}\n        replace\n      >\n        <IconFriends pathname={pathname} />\n        Friends\n      </NavLink>\n\n      <NavLink\n        to='/users'\n        activeClassName={s.active}\n        className={s.navLink}\n        replace\n      >\n        <IconUsers pathname={pathname} />\n        Find Users\n      </NavLink>\n    </nav>\n  )\n}\n\nconst IconProfile: React.FC<PathParamsType> = ({ pathname, profileUrl }) => {\n  return (\n    <svg\n      width='24'\n      height='24'\n      viewBox='0 0 24 24'\n      className={cn(s.navLinkImg, {\n        [s.activeIcon]: pathname === profileUrl,\n      })}\n    >\n      {/* eslint-disable-next-line max-len */}\n      <path d='M12,4A4,4 0 0,1 16,8A4,4 0 0,1 12,12A4,4 0 0,1 8,8A4,4 0 0,1 12,4M12,14C16.42,14 20,15.79 20,18V20H4V18C4,15.79 7.58,14 12,14Z' />\n    </svg>\n  )\n}\n\nconst IconChat: React.FC<PathParamsType> = ({ pathname }) => {\n  return (\n    <svg\n      width='24'\n      height='24'\n      viewBox='0 0 24 24'\n      className={cn(s.navLinkImg, {\n        [s.activeIcon]: pathname === '/chat',\n      })}\n    >\n      {/* eslint-disable-next-line max-len */}\n      <path d='M20,2H4A2,2 0 0,0 2,4V22L6,18H20A2,2 0 0,0 22,16V4C22,2.89 21.1,2 20,2Z' />\n    </svg>\n  )\n}\n\nconst IconFriends: React.FC<PathParamsType> = ({ pathname }) => {\n  return (\n    <svg\n      width='24'\n      height='24'\n      viewBox='0 0 24 24'\n      className={cn(s.navLinkImg, {\n        [s.activeIcon]: pathname === '/friends',\n      })}\n    >\n      {/* eslint-disable-next-line max-len */}\n      <path d='M12,5.5A3.5,3.5 0 0,1 15.5,9A3.5,3.5 0 0,1 12,12.5A3.5,3.5 0 0,1 8.5,9A3.5,3.5 0 0,1 12,5.5M5,8C5.56,8 6.08,8.15 6.53,8.42C6.38,9.85 6.8,11.27 7.66,12.38C7.16,13.34 6.16,14 5,14A3,3 0 0,1 2,11A3,3 0 0,1 5,8M19,8A3,3 0 0,1 22,11A3,3 0 0,1 19,14C17.84,14 16.84,13.34 16.34,12.38C17.2,11.27 17.62,9.85 17.47,8.42C17.92,8.15 18.44,8 19,8M5.5,18.25C5.5,16.18 8.41,14.5 12,14.5C15.59,14.5 18.5,16.18 18.5,18.25V20H5.5V18.25M0,20V18.5C0,17.11 1.89,15.94 4.45,15.6C3.86,16.28 3.5,17.22 3.5,18.25V20H0M24,20H20.5V18.25C20.5,17.22 20.14,16.28 19.55,15.6C22.11,15.94 24,17.11 24,18.5V20Z' />\n    </svg>\n  )\n}\n\nconst IconUsers: React.FC<PathParamsType> = ({ pathname }) => {\n  return (\n    <svg\n      width='24'\n      height='24'\n      viewBox='0 0 24 24'\n      className={cn(s.navLinkImg, {\n        [s.activeIcon]: pathname === '/users',\n      })}\n    >\n      {/* eslint-disable-next-line max-len */}\n      <path d='M15.5,12C18,12 20,14 20,16.5C20,17.38 19.75,18.21 19.31,18.9L22.39,22L21,23.39L17.88,20.32C17.19,20.75 16.37,21 15.5,21C13,21 11,19 11,16.5C11,14 13,12 15.5,12M15.5,14A2.5,2.5 0 0,0 13,16.5A2.5,2.5 0 0,0 15.5,19A2.5,2.5 0 0,0 18,16.5A2.5,2.5 0 0,0 15.5,14M10,4A4,4 0 0,1 14,8C14,8.91 13.69,9.75 13.18,10.43C12.32,10.75 11.55,11.26 10.91,11.9L10,12A4,4 0 0,1 6,8A4,4 0 0,1 10,4M2,20V18C2,15.88 5.31,14.14 9.5,14C9.18,14.78 9,15.62 9,16.5C9,17.79 9.38,19 10,20H2Z' />\n    </svg>\n  )\n}\n\nexport default withRouter(Navbar)\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Redirect } from 'react-router'\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\n\nimport cn from 'classnames'\nimport Button from '@material-ui/core/Button'\nimport s from './Login.module.scss'\nimport renderTextField from '../common/ElementCustom/renderTextField.jsx'\nimport renderCheckbox from '../common/ElementCustom/renderCheckbox.jsx'\n\nimport {\n  getAuthorizedUserID,\n  getCaptchaURL,\n  getIsAuth,\n} from '../../redux/selectors/auth-selectors'\nimport { getTheme } from '../../redux/selectors/app-selectors'\nimport { loginThunk } from '../../redux/reducers/auth-reducer'\n\nconst validate = (values: LoginFormValuesType) => {\n  type ErrorsType = {\n    email?: string\n    password?: string\n    captcha?: string\n  }\n\n  const errors: ErrorsType = {}\n\n  if (\n    values.email &&\n    !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n  ) {\n    errors.email = 'Invalid email address'\n  }\n\n  return errors\n}\n\ntype OwnPropsType = {\n  captchaURL: string | null\n}\n\ntype LoginFormValuesType = {\n  email: string\n  password: string\n  rememberMe: boolean\n  captcha: string\n}\n\nconst Login: React.FC = () => {\n  const isAuth = useSelector(getIsAuth)\n  const captchaURL = useSelector(getCaptchaURL)\n  const userID = useSelector(getAuthorizedUserID)\n  const dispatch = useDispatch()\n\n  const onSubmit = (values: LoginFormValuesType) => {\n    dispatch(\n      loginThunk(\n        values.email,\n        values.password,\n        values.rememberMe,\n        values.captcha\n      )\n    )\n  }\n\n  if (isAuth) {\n    return <Redirect to={`/profile/${userID}`} />\n  }\n\n  return (\n    <div className={s.wrap}>\n      <div className={s.body}>\n        <h1>Log in</h1>\n        <LoginReduxForm onSubmit={onSubmit} captchaURL={captchaURL} />\n      </div>\n    </div>\n  )\n}\n\nconst LoginForm: React.FC<\n  InjectedFormProps<LoginFormValuesType, OwnPropsType> & OwnPropsType\n> = ({ handleSubmit, error, captchaURL }) => {\n  const dispatch = useDispatch()\n  const theme = useSelector(getTheme)\n\n  const onTestAccountSubmit = (email: string, password: string) => {\n    dispatch(loginThunk(email, password, false, null))\n  }\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <div className={s.loginBlockSubstrate}>\n          <div className={s.loginBlock}>\n            <div className={s.row}>\n              <Field\n                component={renderTextField}\n                name='email'\n                label='Email:'\n                type='email'\n                fullWidth\n              />\n            </div>\n            <div className={s.row}>\n              <Field\n                component={renderTextField}\n                name='password'\n                label='Password:'\n                type='password'\n                fullWidth\n              />\n            </div>\n            <div className={cn(s.row, s.rowCheckbox)}>\n              <Field\n                component={renderCheckbox}\n                name='rememberMe'\n                label='Remember me'\n              />\n            </div>\n\n            {captchaURL && <img src={captchaURL} alt='captcha' />}\n            {captchaURL && (\n              <Field component={renderTextField} fullWidth name='captcha' />\n            )}\n\n            <div className={s.row}>\n              <Button\n                type='submit'\n                variant='contained'\n                color={theme === 'theme1' ? 'primary' : 'secondary'}\n                fullWidth\n                style={{ fontSize: 16, fontWeight: 'bold', color: '#fff' }}\n              >\n                Log in\n              </Button>\n\n              {error && (\n                <div className={s.formError}>\n                  {error === 'You are not authorized' ? (\n                    <>\n                      <div>You are not authorized</div>\n                      <div>or,</div>\n                      <div>please, unblock third party cookies</div>\n                    </>\n                  ) : (\n                    error\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n        <p>or</p>\n        <Button\n          onClick={() => onTestAccountSubmit('free@samuraijs.com', 'free')}\n          variant='contained'\n          color={theme === 'theme1' ? 'primary' : 'secondary'}\n          fullWidth\n          style={{\n            fontSize: 16,\n            fontWeight: 'bold',\n            color: '#fff',\n            marginBottom: '15px',\n          }}\n        >\n          Login to test account\n        </Button>\n      </form>\n    </>\n  )\n}\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, OwnPropsType>({\n  form: 'loginForm',\n  validate,\n})(LoginForm)\n\nexport default Login\n","import React, { Suspense } from 'react'\nimport Preloader from '../Preloader/Preloader'\n\nfunction withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\n  return (props: WCP) => (\n    <Suspense fallback={<Preloader />}>\n      <WrappedComponent {...props} />\n    </Suspense>\n  )\n}\nexport default withSuspense\n","import React from 'react'\nimport { Route, withRouter, Switch, Redirect } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport ProfileContainer from './components/Profile/ProfileContainer'\nimport PreloaderStart from './components/common/Preloader/PreloaderStart'\nimport Header from './components/Header/Header'\nimport Navbar from './components/Navbar/Navbar'\nimport Login from './components/Login/Login'\nimport withSuspense from './components/common/hoc/withSuspense'\n\nimport s from './App.module.scss'\n\nimport { getInitialized } from './redux/selectors/app-selectors'\nimport { getAuthorizedUserID } from './redux/selectors/auth-selectors'\nimport { initializeAppThunk } from './redux/reducers/app-reducer'\n\n// TODO Error: Nothing was returned from render. This usually means a return\n// statement is missing. Or, to render nothing, return null\n// import ErrorBoundary from './components/Error/ErrorBoundary.jsx'\n\nconst ChatContainer = React.lazy(() => import('./components/Chat/Chat'))\nconst UsersContainer = React.lazy(\n  () => import('./components/Users/UsersContainer')\n)\n\nconst SuspendedChat = withSuspense(ChatContainer)\nconst SuspendedUsers = withSuspense(UsersContainer)\n\nconst App: React.FC = () => {\n  const userID = useSelector(getAuthorizedUserID)\n  const initialized = useSelector(getInitialized)\n  const dispatch = useDispatch()\n\n  React.useEffect(() => {\n    dispatch(initializeAppThunk())\n  }, [dispatch])\n\n  if (!initialized) {\n    return <PreloaderStart />\n  }\n\n  return (\n    <div className={s.fon}>\n      <div className={s.container}>\n        <div className={s.appWrapper}>\n          <Header />\n          <Navbar />\n\n          <div className={s.appWrapperContent}>\n            {/* <ErrorBoundary> */}\n            <Switch>\n              <Redirect from='/profile/undefined' to='/' />\n\n              <Route\n                path='/profile/:userId'\n                render={() => <ProfileContainer />}\n              />\n\n              <Route path='/chat' render={() => <SuspendedChat />} />\n\n              <Route path='/friends' render={() => <SuspendedUsers />} />\n\n              <Route path='/users' render={() => <SuspendedUsers />} />\n\n              <Route path='/login' render={() => <Login />} />\n\n              <Redirect exact from='/' to={`/profile/${userID}`} />\n\n              <Redirect from='*' to='/' />\n            </Switch>\n            {/* </ErrorBoundary> */}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst AppContainer = withRouter(App)\nexport default AppContainer\n","import {\n  applyMiddleware,\n  combineReducers,\n  createStore,\n  compose,\n  Action,\n} from 'redux'\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk'\nimport { reducer as formReducer } from 'redux-form'\n\nimport authReducer from './reducers/auth-reducer'\nimport profileReducer from './reducers/profile-reducer'\nimport usersReducer from './reducers/users-reducer'\nimport appReducer from './reducers/app-reducer'\nimport chatReducer from './reducers/chat-reducer'\n\nconst rootReducer = combineReducers({\n  profilePage: profileReducer,\n  usersPage: usersReducer,\n  auth: authReducer,\n  app: appReducer,\n  form: formReducer,\n  chat: chatReducer,\n})\n\n// types state app\ntype RootReducerType = typeof rootReducer\nexport type AppStateType = ReturnType<RootReducerType>\n\n// types actions\nexport type InferActionsTypes<T> = T extends {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: (...args: any[]) => infer U\n}\n  ? U\n  : never\n\n// type thunks\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<\n  R,\n  AppStateType,\n  unknown,\n  A\n>\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n// @ts-ignore\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunkMiddleware))\n)\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { HashRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux'\n\nimport {\n  createMuiTheme,\n  ThemeProvider,\n  responsiveFontSizes,\n} from '@material-ui/core/styles'\nimport CssBaseline from '@material-ui/core/CssBaseline'\n\nimport AppContainer from './App'\nimport store from './redux/redux-store'\nimport './styles/theme.css'\n\nlet theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    // цвет главных кнопок, активных ссылок в навигации,\n    // декоративных линий, рамок у форм\n    primary: {\n      main: '#00bcd4',\n      // 1-ая тема, синий цвет\n    },\n    secondary: {\n      main: '#00d482',\n      // 2-ая тема, зелёный цвет\n    },\n  },\n})\n\ntheme = responsiveFontSizes(theme)\n\nReactDOM.render(\n  <HashRouter>\n    <ThemeProvider theme={theme}>\n      <Provider store={store}>\n        <CssBaseline />\n        <AppContainer />\n      </Provider>\n    </ThemeProvider>\n  </HashRouter>,\n  document.getElementById('root')\n)\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__11X-i\",\"logoAndTitle\":\"Header_logoAndTitle__1aRH2\",\"headerTitleDesctop\":\"Header_headerTitleDesctop__YFVbC\",\"headerTitleMobile\":\"Header_headerTitleMobile__20xtB\",\"rightColumn\":\"Header_rightColumn__3_8tP\",\"loginAndPhoto\":\"Header_loginAndPhoto__1Ut22\",\"loginName\":\"Header_loginName__2wjc2\",\"buttonThemeDesctop\":\"Header_buttonThemeDesctop__2p96k\",\"buttonThemeMobile\":\"Header_buttonThemeMobile__1uAJD\",\"buttonLogoutDesctop\":\"Header_buttonLogoutDesctop__1luO3\",\"buttonLogoutMobile\":\"Header_buttonLogoutMobile__1XrW8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Login_wrap__hR_4R\",\"body\":\"Login_body__2XWd-\",\"loginBlockSubstrate\":\"Login_loginBlockSubstrate__39N_j\",\"loginBlock\":\"Login_loginBlock__2cjmN\",\"row\":\"Login_row__1yy-b\",\"rowCheckbox\":\"Login_rowCheckbox__27ZLk\",\"formError\":\"Login_formError__2i8Fi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"camera\":\"InfoContainer_camera__1yrOv\",\"wrapImg\":\"InfoContainer_wrapImg__2vTp6\",\"containerMain\":\"InfoContainer_containerMain__2-Az2\",\"columnLeft\":\"InfoContainer_columnLeft__1ik0X\",\"columnRight\":\"InfoContainer_columnRight__13HkF\",\"iconButtonEditProfile\":\"InfoContainer_iconButtonEditProfile__-3nGx\",\"fullName\":\"InfoContainer_fullName__1Jmx0\",\"buttonsSaveAndCancelProfile\":\"InfoContainer_buttonsSaveAndCancelProfile__IBoio\",\"successSave\":\"InfoContainer_successSave__CyJ5t\",\"anim\":\"InfoContainer_anim__AvMM3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Status_container__fEtnU\",\"wrap\":\"Status_wrap__2T3mP\",\"buttons\":\"Status_buttons__2aizz\",\"buttonWrap\":\"Status_buttonWrap__Uieln\",\"plug\":\"Status_plug__1WGsx\",\"status\":\"Status_status__MePaV\",\"statusNotMy\":\"Status_statusNotMy__3HYU8\",\"noStatus\":\"Status_noStatus__22JwO\",\"buttonSave\":\"Status_buttonSave__1mn2Y\",\"buttonCancel\":\"Status_buttonCancel__PIGTv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Wall_container__3eNrD\",\"basket\":\"Wall_basket__35anx\",\"form\":\"Wall_form__1mdjG\",\"posts\":\"Wall_posts__1FRLR\",\"noPosts\":\"Wall_noPosts__Gr0wW\",\"buttonBig\":\"Wall_buttonBig__3Nobv\",\"buttonIcon\":\"Wall_buttonIcon__1vL4R\"};","import React from 'react'\nimport cn from 'classnames'\nimport unknown from '../../../img/no_photo.svg'\nimport s from './Avatar.module.scss'\n\ntype SizeType = 'small' | 'medium' | 'large'\n\ntype PropsType = {\n  photo: string | null | undefined\n  size: SizeType\n}\n\nconst Avatar: React.FC<PropsType> = ({ photo, size, children }) => (\n  <div className={s.avatarWrap}>\n    <div\n      className={cn(\n        s.avatar,\n        { [s.large]: size === 'large' },\n        { [s.medium]: size === 'medium' },\n        { [s.small]: size === 'small' }\n      )}\n    >\n      <img src={photo || unknown} alt='avatar' />\n      {children}\n    </div>\n  </div>\n)\n\nexport default Avatar\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Preloader_container__1fEKm\",\"wrap\":\"Preloader_wrap__2cexB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Avatar_avatar__21jOw\",\"avatarWrap\":\"Avatar_avatarWrap__1k1xZ\",\"small\":\"Avatar_small__kJUnB\",\"medium\":\"Avatar_medium__2-gEK\",\"large\":\"Avatar_large__2ACxy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fon\":\"App_fon__3lpfh\",\"container\":\"App_container__3eQ5h\",\"appWrapper\":\"App_appWrapper__15Fi2\",\"appWrapperContent\":\"App_appWrapperContent__1DlSr\"};"],"sourceRoot":""}